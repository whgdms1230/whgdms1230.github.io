[{"permalink":"//","layout":"default","title":"Profile","content":"## 1. Profile\n\n<img src=\"/assets/images/picture.jpg\" width=\"150\" height=\"200\">\n\n### Jiyong Kim\n\n#### Manager / Platform Business Team, [CLOBOT Co., Ltd.](https://www.clobot.co.kr)\n\nI am currently a manager at the CLOBOT Co., Ltd since 2021. I received a B.S and M.S degrees in Department of Mechanical Design and Robot Enginnering from Seoul National University of Science and Technology, Seoul, South Korea in 2017 and 2021, respectively. I am interested in scheduling of multi mobile robots, dynamics control of manipulators, and service robot platform based on the open source.\n\n## 2. Experience\n* 2021.5. ~ PRESENT - Manager, CLOBOT Co., Ltd.\n\n## 3. Education\n* 2019.3. ~ 2021.8. - M.S, Department of Mechanical Design and Robot Engineering, Seoul National University of Science and Technology, South Korea.\n* 2013.3. ~ 2017.2. - B.S, Department of Mechanical System Design Engineering, Seoul National University of Science and Technology, South Korea.\n\n## 4. Journals\n* [Ji-Yong Kim, Jung-Yup Kim, \"Gait training algorithm based on inverse dynamics of walking rehabilitation robot, DDgo Pro,\" Intelligent Service Robotics, Vol. 14, pp. 143-155, 2021.](https://doi.org/10.1007/s11370-021-00357-8)\n* [Jung‑Yup Kim, Ji‑Yong Kim, Hyeong‑Sic Kim, Kiwon Park, \"Development and Evaluation of a Hybrid Walking Rehabilitation Robot, DDgo Pro,\" International Journal of Precision Engineering and Manufacturing, Vol. 21, pp. 2105–2115, 2020.](https://doi.org/10.1007/s12541-020-00404-x)\n\n## 5. International Conference\n* Ji-Yong Kim, Jae-Wong Cho, Ji-Hyeon Kwon, \"Multi-robot traffic management using MIP path negotiation scheduler,\" International Conference on Control, Automation and Systems, 2021.\n\n## 6. Domestic Conference\n* [김지용, 김정엽, \"역동역학 기반의 보행 재활 로봇의 수동 모드 보행 훈련 알고리즘\", 한국정밀공학회 학술발표대회 논문집, 21-22, 2020.](https://www.dbpia.co.kr/journal/articleDetail?nodeId=NODE10489383)\n\n## 7. Research and Development\n\n### RMF\n\n### CLOBER\n\n### DDgo Pro\n\n### Quadcopter","dir":"/","name":"README.md","path":"README.md","url":"/"},{"layout":"default","title":"To Do List","content":"# To Do List\n\n## 1. [ROS 1.0](/ROS1/)\n* **noetic 설치 방법**\n* **catkin에 대한 내용**\n* **CMakeLists.txt 구조, 기능, 작성방법 등**\n* **package.xml 구조, 기능, 작성방법 등**\n* tf에 대한 내용\n* ros의 토픽, 서비스, 액션, 파라미터\n* **launch 파일의 구조**\n* gazebo 구조 및 urdf, sdf 내용, spawn\n* rviz\n* navgation 구조\n* ros package의 전체적인 구조\n* ros api\n* ros index 등록 및 release 방법\n* ros wiki 및 github 관리\n* ros 기본 명령어\n* 정적라이브러리, 동적 라이브러리 추가 방법\n\n## 2. [ROS 2.0](/ROS2/)\n* **foxy 설치 방법**\n* **colcon에 대한 내용(catkin과의 차이)**\n* **CMakeLists.txt 구조, 기능, 작성방법 등**\n* **package.xml 구조, 기능, 작성방법 등**\n* tf2에 대한 내용\n* ros의 토픽, 서비스, 액션, 파라미터\n* **launch 파일 구조**\n* gazebo와 ignition\n* rviz2\n* navigation2\n* ros2 package 구조\n* ros api\n* linter\n* free fleet 과 rmf\n* ros2 기본 명령어\n* 정적라이브러리, 동적 라이브러리 추가 방법\n* json, yaml, xml 파일 등\n* dds\n* ROS 개발에 유용한 VSCode Extension(Remote - SSH)\n\n## 3. [Robotics](/ROBOTICS/)\n* 로봇동역학 정리(F.K. ~ 역동역학 제어)\n* PD 제어, CTC 제어\n* 매니퓰레이터\n* 로봇 설계\n* 제어공학\n\n## 4. [github](/Github/)\n* git 명령어 정리(주로 사용하는 명령어)\n* commit message\n* fork 및 pull request 방법\n* 협업 방법 및 organization 계정 운용 방법\n* ros에서 branch의 운용 방법\n* linter에 따른 action 추가 방법\n* license에 관한 내용\n* 오픈 소스 운영\n* PR 및 ISSUE 관리 방법\n* tag, release의 관리\n* 패키지 배포 wget / clone\n* binary release\n* VSCode Extension Git Graph, GitLens\n## 5. [Linux](/Linux/)\n* **리눅스 기본 명령어 정리**\n* *쉘 스크립트, bash*\n* curl\n* debian\n* 심볼릭 링크, 하드 링크\n* 환경변수\n* 포어그라운드, 백그라운드\n* cache와 buffer\n* pid\n* vi 편집기 사용 방법\n* ssh 원격 접속\n* wget을 이용한 다운로드\n* scp\n\n## 6. [C++](/C++/)\n* if, switch 문의 이니셜라이저\n* 타입추론(auto, decltype)\n* std:size()\n* std::array\n* std::vector\n* 범위기반 for 문\n* 스마트 포인터\n* const 상수, 매개변수\n* 레퍼런스\n* 익셉션\n\n\n* 모던 C++과 클래식 C++\n* class에 대한 내용\n* 스마트 포인터\n* 동적 라이브러리\n* C++의 장점과 단점\n* 포인터와 참조자\n* 코딩스타일\n\n## 7. [python](/Python/)\n* \n\n## 8. [Algorithm](/Algorithm/)\n* network 구조\n* 동적 라이브러리 / 정적 라이브러리\n* 기타 알고리즘 이론 정리\n\n## 9. [용어정리](/Words/)\n* mssql\n* CMake\n* lagecy","dir":"/ToDo/","name":"list.md","path":"ToDo/list.md","url":"/ToDo/list.html"},{"sort":1,"layout":"default","title":"If Initializer","content":"<h1 id=\"if-initializer\">If Initializer</h1>\n\n<ul>\n <li>참고문헌 : 전문가를 위한 C++(마크 그레고리 / 한빛미디어)</li>\n</ul>\n\n<p><code class=\"language-plaintext highlighter-rouge\">C++17</code>부터 <code class=\"language-plaintext highlighter-rouge\">if</code> 문 안에 이니셜라이저를 넣는 기능이 추가되었음.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"err\">이니셜라이저</span><span class=\"o\">&gt;</span> <span class=\"p\">;</span> <span class=\"o\">&lt;</span><span class=\"err\">조건문</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"o\">&lt;</span><span class=\"err\">본문</span><span class=\"o\">&gt;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">&lt;이니셜라이저&gt;</code>에서 정의한 변수는 <code class=\"language-plaintext highlighter-rouge\">&lt;조건문&gt;</code>과 <code class=\"language-plaintext highlighter-rouge\">&lt;본문&gt;</code> 안에서만 사용할 수 있고, <code class=\"language-plaintext highlighter-rouge\">if</code> 문 밖에서는 사용할 수 없음.</p>\n\n<p>다음 예시는 <code class=\"language-plaintext highlighter-rouge\">&lt;이니셜라이저&gt;</code>로 직원 정보를 가져와서, <code class=\"language-plaintext highlighter-rouge\">&lt;조건문&gt;</code>에서 그 직원의 급여가 1000 이상인지 확인하고, 참이라면 <code class=\"language-plaintext highlighter-rouge\">&lt;본문&gt;</code>을 실행</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">Employee</span> <span class=\"n\">employee</span> <span class=\"o\">=</span> <span class=\"n\">GetEmployee</span><span class=\"p\">()</span> <span class=\"p\">;</span> <span class=\"n\">employee</span><span class=\"p\">.</span><span class=\"n\">salary</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"p\">...</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n","dir":"/C++/Grammer/","name":"0001If-initializer.md","path":"C++/Grammer/0001If-initializer.md","url":"/C++/Grammer/0001If-initializer.html"},{"sort":1,"permalink":"/C++/Grammer/","layout":"default","title":"Grammer","content":"<h1 id=\"grammer\">Grammer</h1>\n\n<ul>\n <li><a href=\"/C++/Grammer/0001If-initializer.html\">If Initializer</a></li>\n <li><a href=\"/C++/Grammer/0002Switch-initializer.html\">Switch Initializer</a></li>\n <li><a href=\"/C++/Grammer/0003vector.html\">vector 기초</a></li>\n <li><a href=\"/C++/Grammer/0004Initializer-list.html\">initializer_list</a></li>\n <li><a href=\"/C++/Grammer/0005Range-based-for-statement.html\">범위 기반 for 문</a></li>\n <li><a href=\"/C++/Grammer/0006Smart-pointer-basic.html\">스마트 포인터 기본</a></li>\n <li><a href=\"/C++/Grammer/0007Exception.html\">Exception</a></li>\n <li><a href=\"/C++/Grammer/0008Type-inference.html\">타입 추론</a></li>\n <li><a href=\"/C++/Grammer/0009Class_definition.html\">Class 정의</a></li>\n <li><a href=\"/C++/Grammer/0010Uniform-initialization.html\">유니폼 이니셜라이저</a></li>\n</ul>\n","dir":"/C++/Grammer/","name":"README.md","path":"C++/Grammer/README.md","url":"/C++/Grammer/"},{"sort":1,"layout":"default","title":"Command","content":"<h1 id=\"command\">Command</h1>\n\n<h2 id=\"a\">A</h2>\n\n<ul>\n <li>alias : 명령어를 간소화하여 다른 이름으로 사용할 수 있도록 해주는 쉘 내부 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 현재 등록되어 있는 alias 목록 </span>\n<span class=\"nb\">alias</span>\n\n<span class=\"c\"># alias 등록</span>\n<span class=\"nb\">alias</span> <span class=\"o\">[</span>alias_name]<span class=\"o\">=</span><span class=\"s1\">'[command_name]'</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>apt-cache : 패키지 검색 도구</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 패키지 검색</span>\napt-cache search <span class=\"o\">[</span>package_name]\n\n<span class=\"c\"># 패키지 정보 보기</span>\napt-cache show <span class=\"o\">[</span>package_name]\n\n<span class=\"c\"># 패키지 의존성 확인</span>\napt-cache depends <span class=\"o\">[</span>package_name]\n\n<span class=\"c\"># 패키지 역 의존성 확인</span>\napt-cache rdepends <span class=\"o\">[</span>package_name]\n</code></pre>  </div></div>\n\n<ul>\n <li>apt, apt-get : 데비안 계열의 리눅스에서 쓰이는 패키지 관리 명령어 도구</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 패키지 인덱스 업데이트(/etc/apt/source.list의 인덱스 정보 이용)</span>\n<span class=\"nb\">sudo </span>apt-get update\n\n<span class=\"c\"># 설치된 패키지 업그레이드</span>\n<span class=\"nb\">sudo </span>apt-get upgrade\n<span class=\"nb\">sudo </span>apt-get upgrade <span class=\"o\">[</span>package_name]\n\n<span class=\"c\"># 패키지 설치</span>\n<span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install</span> <span class=\"o\">[</span>package_name]\n\n<span class=\"c\"># 패키지 재설치</span>\n<span class=\"nb\">sudo </span>apt-get <span class=\"nt\">--reinstall</span> <span class=\"nb\">install</span> <span class=\"o\">[</span>package_name]\n\n<span class=\"c\"># 패키지 삭제</span>\n<span class=\"nb\">sudo </span>apt-get remove <span class=\"o\">[</span>package_name]\n\n<span class=\"c\"># 패키지 완전 삭제(구성 파일 포함)</span>\n<span class=\"nb\">sudo </span>apt-get purge <span class=\"o\">[</span>package_name]\n\n<span class=\"c\"># 패키지 소스코드 다운로드</span>\n<span class=\"nb\">sudo </span>apt-get <span class=\"nb\">source</span> <span class=\"o\">[</span>package_name]\n</code></pre>  </div></div>\n\n<h2 id=\"b\">B</h2>\n\n<ul>\n <li>bg : “background”를 나타내며, 작업을 백그라운드로 보내는 명령어, “foreground”에 해당하는 fg와 반대되는 명령어</li>\n</ul>\n\n<h2 id=\"c\">C</h2>\n\n<ul>\n <li>cal : 캘린더를 띄우는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 서버시간 기준의 연,월,일이 표시된 해당 월의 달력 표시</span>\ncal\n\n<span class=\"c\"># 해당 연도의 모든 월의 달력 표시</span>\ncal <span class=\"nt\">-y</span>\n\n<span class=\"c\"># 특정 연 월 출력</span>\ncal 8 2021\n</code></pre>  </div></div>\n\n<ul>\n <li>cat : 파일의 내용을 화면에 출력하거나 파일을 만듦</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 파일의 내용 출력</span>\n<span class=\"nb\">cat</span> <span class=\"o\">[</span>fileName]\n<span class=\"nb\">cat</span> <span class=\"o\">[</span>fileName1] <span class=\"o\">[</span>fileName2] <span class=\"o\">[</span>fileName3] ...\n\n<span class=\"c\"># 파일의 내용 합치기(1,2,3번을 합쳐서 4번 파일을 만듦)</span>\n<span class=\"nb\">cat</span> <span class=\"o\">[</span>fileName1] <span class=\"o\">[</span>fileName2] <span class=\"o\">[</span>fileName3] <span class=\"o\">&gt;</span> <span class=\"o\">[</span>fileName4]\n\n<span class=\"c\"># 파일 내용 덧붙이기(2번의 끝에 1번을 덧붙임)</span>\n<span class=\"nb\">cat</span> <span class=\"o\">[</span>fileName1] <span class=\"o\">&gt;&gt;</span> <span class=\"o\">[</span>fileName2]\n\n<span class=\"c\"># 새로운 파일을 만들기</span>\n<span class=\"nb\">cat</span> <span class=\"o\">&gt;</span> <span class=\"o\">[</span>new_file]\n</code></pre>  </div></div>\n\n<ul>\n <li>cd : 해당 경로의 디렉토리로 이동함.</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># path에 해당하는 위치로 이동</span>\n<span class=\"nb\">cd</span> <span class=\"o\">[</span>path]\n\n<span class=\"c\"># 현재 디렉토리로 이동</span>\n<span class=\"nb\">cd</span> <span class=\"nb\">.</span>\n\n<span class=\"c\"># 한 단계 상위 디렉토리로 이동</span>\n<span class=\"nb\">cd</span> ..\n\n<span class=\"c\"># 최상위 디렉토리로 이동</span>\n<span class=\"nb\">cd</span> /\n</code></pre>  </div></div>\n\n<ul>\n <li>chmod : 파일의 권한 변경. 숫자로 변경하는 방법만 간단하게 정리</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 모든 사용자의 모든 권한 제거</span>\n<span class=\"nb\">chmod </span>000 FILE\n\n<span class=\"c\"># 사용자(읽기+쓰기), 그룹(읽기+쓰기), 그 외 사용자(읽기)</span>\n<span class=\"nb\">chmod </span>664 FILE\n\n<span class=\"c\"># 사용자에게 모든 권한 추가</span>\n<span class=\"nb\">chmod </span>700 FILE\n\n<span class=\"c\"># 사용자(읽기+쓰기+실행), 그룹(읽기), 그 외 사용자(읽기)</span>\n<span class=\"nb\">chmod </span>744 FILE\n\n<span class=\"c\"># 사용자(읽기+쓰기+실행), 그룹(읽기+실행), 그 외 사용자(읽기+실행)</span>\n<span class=\"nb\">chmod </span>755 FILE\n\n<span class=\"c\"># 모든 사용자에 모든 권한 추가.</span>\n<span class=\"nb\">chmod </span>777 FILE\n</code></pre>  </div></div>\n\n<ul>\n <li>chown : 파일이나 디렉터리의 소유자를 변경하는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 파일이나 디렉토리의 소유자 변경</span>\n<span class=\"nb\">chown </span>user /path/to/file_or_directory\n\n<span class=\"c\"># 파일이나 디렉토리의 소유자 및 그룹 변경</span>\n<span class=\"nb\">chown </span>user:group /path/to/file_or_directory\n\n<span class=\"c\"># symbolic link의 소유자 변경</span>\n<span class=\"nb\">chown</span> <span class=\"nt\">-h</span> user /path/to/symboli_link\n\n<span class=\"c\"># symbolic link를 포함한 파일이나 디렉토리의 소유자와 그룹 변경</span>\n<span class=\"nb\">chown</span> <span class=\"nt\">-hR</span> user:group /path/to/file_or_dir\n</code></pre>  </div></div>\n\n<ul>\n <li>cp : 파일을 복사하는 데 사용</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># filename1을 복사하여 filename2를 만듦</span>\n<span class=\"nb\">cp</span> <span class=\"o\">[</span>filename1] <span class=\"o\">[</span>filename2] \n\n<span class=\"c\"># filename을 복사하여 directory안에 filename을 만듦 (directory가 존재한다고 가정)</span>\n<span class=\"nb\">cp</span> <span class=\"o\">[</span>filename] <span class=\"o\">[</span>directory]\n</code></pre>  </div></div>\n\n<h2 id=\"d\">D</h2>\n\n<ul>\n <li>date : 날짜 출력 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 현재 시간 출력</span>\n<span class=\"nb\">date</span>\n\n<span class=\"c\"># 표준 시간 표시하기</span>\n<span class=\"nb\">date</span> <span class=\"nt\">-u</span>\n\n<span class=\"c\"># format 지정 출력(YYYY-MM-DD)</span>\n<span class=\"nb\">date</span> <span class=\"s2\">\"+%Y-%m-%d\"</span>\n\n<span class=\"c\"># format 지정 출력(YYYY-MM-DD 24시간 표시,분,초)</span>\n<span class=\"nb\">date</span> <span class=\"s2\">\"+%Y-%m-%d %H:%M:%S\"</span>\n\n<span class=\"c\"># format 지정 출력(12시간 표시,분,초 오전/오후 출력)</span>\n<span class=\"nb\">date</span> <span class=\"s2\">\"+%Y-%m-%d %I:%M:%S %p\"</span>\n\n<span class=\"c\"># unix time stamp</span>\ndata +%s\n\n<span class=\"c\"># 시스템 시간 설정</span>\n<span class=\"nb\">sudo date</span>  <span class=\"s2\">\"+%Y-%m-%d %H:%M:%S\"</span> <span class=\"nt\">-s</span> <span class=\"s2\">\"20200412-13:24:50\"</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>df : 시스템 전체의 디스크 여유 공간 확인</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 디스크 공간 확인</span>\n<span class=\"nb\">df</span>\n\n<span class=\"c\"># 모든 파일 시스템 출력</span>\n<span class=\"nb\">df</span> <span class=\"nt\">-a</span>\n\n<span class=\"c\"># total 추가</span>\n<span class=\"nb\">df</span> <span class=\"nt\">--total</span>\n\n<span class=\"c\"># 용량 크기로 출력</span>\n<span class=\"nb\">df</span> <span class=\"nt\">-h</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>dmesg : 시스템 부팅 메세지를 확인하는 명령어, 커널에서 출력되는 메세지를 일정 수준 기록하는 버퍼 역할을 수행, 커널 부팅 중에 에러가 났다면 어느 단계에서 에러가 났는지 범위를 좁히고 찾아내는데 사용</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 옵션 없이 커널의 로그 생성</span>\n<span class=\"nb\">sudo </span>dmesg\n\n<span class=\"c\"># 모든 메세지 삭제 및 새로운 로그 생성</span>\n<span class=\"nb\">sudo </span>dmesg <span class=\"nt\">-c</span>\n\n<span class=\"c\"># grep으로 특정 로그 검색</span>\n<span class=\"nb\">sudo </span>dmesg | <span class=\"nb\">grep</span> <span class=\"o\">[</span>message name]\n\n<span class=\"c\"># level별 로그 검색</span>\n<span class=\"nb\">sudo </span>dmesg <span class=\"nt\">--level</span> <span class=\"o\">[</span>level name]\n\n<span class=\"c\"># facility별 로그 검색</span>\n<span class=\"nb\">sudo </span>dmesg <span class=\"nt\">--f</span> <span class=\"o\">[</span>facility name]\n\n<span class=\"c\"># 변경 사항 대기</span>\n<span class=\"nb\">sudo </span>dmesg <span class=\"nt\">-w</span>\n\n<span class=\"c\"># timestamp 추가</span>\n<span class=\"nb\">sudo </span>dmesg <span class=\"nt\">-T</span>\n\n<span class=\"c\"># 가독성 높이기</span>\n<span class=\"nb\">sudo </span>dmesg <span class=\"nt\">-H</span>\n\n<span class=\"c\"># color 추가</span>\n<span class=\"nb\">sudo </span>dmesg <span class=\"nt\">-L</span>\n\n<span class=\"c\"># THL 추가</span>\n<span class=\"nb\">sudo </span>dmesg <span class=\"nt\">-THL</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>dpkg : deb 패키지의 설치, 삭제, 정보 제공을 위해 사용하는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 설치된 패키지 목록 확인</span>\ndpkg <span class=\"nt\">-l</span>\n\n<span class=\"c\"># 해당 패키지로부터 설치된 파일 목록 확인</span>\ndpkg <span class=\"nt\">-L</span> <span class=\"o\">[</span>package name]\n\n<span class=\"c\"># 해당 .deb 파일이 설치한 파일 목록 확인</span>\ndpkg <span class=\"nt\">-C</span> <span class=\"o\">[</span>.deb name]\n\n<span class=\"c\"># 해당 패키지 정보 확인</span>\ndpkg <span class=\"nt\">-s</span> <span class=\"o\">[</span>package name]\n\n<span class=\"c\"># 해당 .deb 파일의 정보 확인</span>\ndpkg <span class=\"nt\">-I</span> <span class=\"o\">[</span>.deb name]\n\n<span class=\"c\"># 해당 파일명 또는 경로가 포함된 패키지 검색</span>\ndpkg <span class=\"nt\">-S</span> <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 해당 패키지 삭제(설정파일은 남겨둠)</span>\n<span class=\"nb\">sudo </span>dpkg <span class=\"nt\">-r</span> <span class=\"o\">[</span>package name]\n\n<span class=\"c\"># 해당 패키지 삭제(설정파일 포함)</span>\n<span class=\"nb\">sudo </span>dpkg <span class=\"nt\">-P</span> <span class=\"o\">[</span>package name]\n\n<span class=\"c\"># .deb파일에 포함되어 있는 파일들을 지정된 디렉토리 초기화 후 압축해제</span>\n<span class=\"nb\">sudo </span>dpkg <span class=\"nt\">-x</span> <span class=\"o\">[</span>.deb name] <span class=\"o\">[</span>directory name]\n</code></pre>  </div></div>\n\n<ul>\n <li>du : 디렉토리별 디스크 사용량 확인</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 모든 디렉토리 및 그 하위의 모든 디렉토리의 용량 확인</span>\n<span class=\"nb\">du</span>\n\n<span class=\"c\"># 특정 디렉토리와 하위의 모든 디렉토리의 용량 확인</span>\n<span class=\"nb\">du</span> <span class=\"o\">[</span>directory name]\n\n<span class=\"c\"># 선택한 디렉토리의 용량만 확인</span>\n<span class=\"nb\">du</span> <span class=\"nt\">-s</span> <span class=\"o\">[</span>directory name]\n\n<span class=\"c\"># 읽기 편한 단위로 용량 확인</span>\n<span class=\"nb\">du</span> <span class=\"nt\">-h</span> <span class=\"o\">[</span>directory name]\n\n<span class=\"c\"># 디렉토리의 바로 아래 디렉토리까지의 용량을 확인</span>\n<span class=\"nb\">du</span> <span class=\"nt\">-sh</span> <span class=\"o\">[</span>directory name]/<span class=\"k\">*</span>\n\n<span class=\"c\"># N 단계의 하위 디렉토리까지의 용량 확인</span>\n<span class=\"nb\">du</span> <span class=\"nt\">-d</span> N <span class=\"o\">[</span>directory name]\n\n<span class=\"c\"># 파일의 용량까지 확인</span>\n<span class=\"nb\">du</span> <span class=\"nt\">-a</span> <span class=\"o\">[</span>directory name]\n</code></pre>  </div></div>\n\n<h2 id=\"e\">E</h2>\n\n<ul>\n <li>echo : 문자열을 컴퓨터 터미널에 출력하는 명령어이다. 일반적으로 셸 스크립트와 배치 파일에서 화면이나 파일로 상황을 알리는 문자열을 출력할 때에 사용</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 문자열 출력</span>\n<span class=\"nb\">echo</span> <span class=\"o\">[</span>string]\n\n<span class=\"c\"># 백슬래쉬 특수문자 인식</span>\n<span class=\"nb\">echo</span> <span class=\"nt\">-e</span> <span class=\"o\">[</span>string]\n\n<span class=\"c\"># 환경변수 출력</span>\n<span class=\"nb\">echo</span> <span class=\"nv\">$[</span><span class=\"nb\">env </span>var name]\n\n<span class=\"c\"># echo 결과 파일 저장</span>\n<span class=\"nb\">echo</span> <span class=\"o\">[</span>string] <span class=\"o\">&gt;&gt;</span> <span class=\"o\">[</span>file name]\n</code></pre>  </div></div>\n\n<ul>\n <li>\n <p>exit : 현재 세션 종료</p>\n </li>\n <li>\n <p>export : 환경 변수 목록 확인, 환경 변수 값 설정</p>\n </li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 환경 변수 목록 확인</span>\n<span class=\"nb\">export</span>\n\n<span class=\"c\"># 환경 변수 값 설정</span>\n<span class=\"nb\">export</span> <span class=\"o\">[</span><span class=\"nb\">env </span>var name]<span class=\"o\">=[</span>value]\n</code></pre>  </div></div>\n\n<h2 id=\"f\">F</h2>\n\n<ul>\n <li>\n <p>fg : “foreground”를 나타내며, 현재 백그라운드로 실행중인 명령어를 포그라운드작업으로 전환을 할때 사용하는 명령어</p>\n </li>\n <li>\n <p>find : 리눅스에서 파일 및 디렉토리를 검색할 때 사용하는 명령어</p>\n </li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 현재 디렉토리(.)의 파일 검색</span>\nfind <span class=\"nb\">.</span>\n\n<span class=\"c\"># 특정 디렉토리의 파일 검색</span>\nfind <span class=\"nb\">.</span> <span class=\"o\">[</span>directory name]\n\n<span class=\"c\"># 찾을 파일 이름 지정</span>\nfind <span class=\"nb\">.</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"[file name]\"</span>\n\n<span class=\"c\"># 디렉토리만 검색</span>\nfind <span class=\"nb\">.</span> <span class=\"nt\">-type</span> d\n\n<span class=\"c\"># 파일만 검색</span>\nfind <span class=\"nb\">.</span> <span class=\"nt\">-type</span> f\n\n<span class=\"c\"># 파일 사이즈 지정</span>\n<span class=\"nb\">sudo </span>find <span class=\"nb\">.</span> <span class=\"nt\">-size</span> <span class=\"o\">[</span>file size]\n<span class=\"nb\">sudo </span>find <span class=\"nb\">.</span> <span class=\"nt\">-size</span> +10M\n\n<span class=\"c\"># 빈 파일 검색</span>\nfind <span class=\"nb\">.</span> <span class=\"nt\">-empty</span>\n\n<span class=\"c\"># 서브 디렉토리 검색 깊이 지정</span>\nfind <span class=\"nb\">.</span> <span class=\"nt\">-maxdepth</span>\n\n<span class=\"c\"># 해당 파일보다 최근에 변경된 파일 검색</span>\nfind <span class=\"nb\">.</span> <span class=\"nt\">-newer</span> <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 검색한 파일로 부가적인 작업 수행(검색된 파일이 {}위치에 입력되어 처리됨)</span>\n<span class=\"c\"># 빈파일 정리</span>\nfind <span class=\"nb\">.</span> <span class=\"nt\">-empty</span> <span class=\"nt\">-exec</span> <span class=\"nb\">rm</span> <span class=\"o\">{}</span> <span class=\"se\">\\;</span>\n\n<span class=\"c\"># permission denied 없애기</span>\nfind <span class=\"nb\">.</span> 2&gt;/dev/null\n</code></pre>  </div></div>\n\n<ul>\n <li>free : 메모리 상태 확인</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 메모리 상태 확인</span>\nfree\n\n<span class=\"c\"># KB 단위로 확인</span>\nfree <span class=\"nt\">-k</span>\n\n<span class=\"c\"># MB 단위로 확인</span>\nfree <span class=\"nt\">-m</span>\n\n<span class=\"c\"># GB 단위로 확인</span>\nfree <span class=\"nt\">-g</span>\n</code></pre>  </div></div>\n<h2 id=\"g\">G</h2>\n\n<ul>\n <li>grep : 입력으로 전달된 파일의 내용에서 특정 문자열을 찾고자할 때 사용하는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 대소문자 구분 없이 검색</span>\n<span class=\"nb\">grep</span> <span class=\"nt\">-i</span> <span class=\"s2\">\"[pattern]\"</span> <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 일치 횟수 표시</span>\n<span class=\"nb\">grep</span> <span class=\"nt\">-c</span> <span class=\"s2\">\"[pattern]\"</span> <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 패턴과 일치하는 파일 표시</span>\n<span class=\"nb\">grep</span> <span class=\"nt\">-l</span> <span class=\"s2\">\"[pattern]\"</span> <span class=\"k\">*</span>\n\n<span class=\"c\"># 전체 단어 단위로 검색</span>\n<span class=\"nb\">grep</span> <span class=\"nt\">-w</span> <span class=\"s2\">\"[pattern]\"</span> <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 일치하는 패턴만 표시</span>\n<span class=\"nb\">grep</span> <span class=\"nt\">-o</span> <span class=\"s2\">\"[pattern]\"</span> <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 줄 번호 표시</span>\n<span class=\"nb\">grep</span> <span class=\"nt\">-n</span> <span class=\"s2\">\"[pattern]\"</span> <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 패턴과 일치하지 않은 행 표시</span>\n<span class=\"nb\">grep</span> <span class=\"nt\">-v</span> <span class=\"s2\">\"[pattern]\"</span> <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 주어진 패턴으로 시작하는 행 표시</span>\n<span class=\"nb\">grep</span> <span class=\"s2\">\"^[pattern]\"</span> <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 주어진 패턴으로 끝나는 행 표시</span>\n<span class=\"nb\">grep</span> <span class=\"s2\">\"[pattern]$\"</span> <span class=\"o\">[</span>file name]\n</code></pre>  </div></div>\n\n<h2 id=\"h\">H</h2>\n\n<ul>\n <li>head : 텍스트로된 파일의 앞부분을 지정한 만큼 출력하는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 앞에서부터 10행 출력</span>\n<span class=\"nb\">head</span> <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 앞에서부터 N행 출력</span>\n<span class=\"nb\">head</span> <span class=\"nt\">-n</span> N <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 앞에서부터 N byte 출력</span>\n<span class=\"nb\">head</span> <span class=\"nt\">-c</span> N <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 출력된 내용 저장</span>\n<span class=\"nb\">head</span> <span class=\"o\">[</span>file name 1] <span class=\"o\">&gt;</span> <span class=\"o\">[</span>file name 2]\n\n<span class=\"c\"># 여러 개의 파일 출력</span>\n<span class=\"nb\">head</span> <span class=\"o\">[</span>file name 1] <span class=\"o\">[</span>file name 2]\n\n<span class=\"c\"># 파일 제목 생략하고 출력</span>\n<span class=\"nb\">head</span> <span class=\"nt\">-q</span> <span class=\"o\">[</span>file name]\n</code></pre>  </div></div>\n\n<h2 id=\"i\">I</h2>\n\n<ul>\n <li>\n <p>id : 현재 사용자의 실제 id와 유효 사용자 id, 그룹 id를 출력하며 내부 bash 변수인 $UID, $EUID, $GROUPS와 짝을 이룸.</p>\n </li>\n <li>\n <p>ifconfig : 네트워크 인터페이스를 설정하거나 확인하는 명령어. IP주소, 서브넷마스크, MAC주소, 네트워크 상태 등을 확인, 설정하는 명령어</p>\n </li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># ip 확인하기</span>\nifconfig\n\n<span class=\"c\"># 특정 이더넷 이름에 ip 주소 설정</span>\nifconfig <span class=\"o\">[</span>ethernet name] <span class=\"o\">[</span>ip address]\n\n<span class=\"c\"># 특정 이더넷 이름에 서브넷 마스크 설정</span>\nifconfig <span class=\"o\">[</span>ethernet name] netmask <span class=\"o\">[</span>netmask address]\n\n<span class=\"c\"># 특정 이더넷 이름에 broadcast 설정</span>\nifconfig <span class=\"o\">[</span>ehternet name] broadcast <span class=\"o\">[</span>broadcast address]\n</code></pre>  </div></div>\n\n<h2 id=\"j\">J</h2>\n\n<ul>\n <li>join : 두 파일을 의미있는 형태로 묶어 하나의 파일로 만드는 명령어로 공통으로 표시된 필드가 들어 있는 줄에 대응하여 합침.</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 두 파일의 공통된 내용을 보여줌</span>\n<span class=\"nb\">join</span> <span class=\"o\">[</span>file name 1] <span class=\"o\">[</span>file name 2]\n\n<span class=\"c\"># 두 파일의 일치하지 않는 내용을 보여줌</span>\n<span class=\"nb\">join</span> <span class=\"nt\">-v</span> <span class=\"o\">[</span>file name 1] <span class=\"o\">[</span>file name 2]\n</code></pre>  </div></div>\n\n<h2 id=\"k\">K</h2>\n\n<ul>\n <li>kill : 프로세스에 특정한 signal을 보내는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 프로세스 종료(pid 확인 : ps), 아래는 모두 같은 명령</span>\n<span class=\"nb\">kill</span> <span class=\"o\">[</span>pid]\n<span class=\"nb\">kill</span> <span class=\"nt\">-15</span> <span class=\"o\">[</span>pid]\n<span class=\"nb\">kill</span> <span class=\"nt\">-TERM</span> <span class=\"o\">[</span>pid]\n\n<span class=\"c\"># 시그널 종류 출력</span>\n<span class=\"nb\">kill</span> <span class=\"nt\">-l</span>\n</code></pre>  </div></div>\n\n<h2 id=\"l\">L</h2>\n\n<ul>\n <li>\n <p>ll : ls -l 과 동일한 명령어</p>\n </li>\n <li>\n <p>ln : 링크파일을 만드는 명령어</p>\n </li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 하드 링크 파일 생성</span>\n<span class=\"nb\">ln</span> <span class=\"o\">[</span>original file name] <span class=\"o\">[</span>hard <span class=\"nb\">link </span>file name]\n\n<span class=\"c\"># 심볼링 링크 파일 생성</span>\n<span class=\"nb\">ln</span> <span class=\"nt\">-s</span> <span class=\"o\">[</span>original file name] <span class=\"o\">[</span>symbolic <span class=\"nb\">link </span>file name]\n</code></pre>  </div></div>\n\n<ul>\n <li>locale : 현재 설정된 locale(사용자 인터페이스에서 사용되는 언어, 지역 설정, 출력 형식 등을 정의하는 문자열)을 확인하는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 현재 설정된 locale 확인</span>\nlocale\n\n<span class=\"c\"># 가능한 locale 언어 목록 확인</span>\nlocale <span class=\"nt\">-a</span>\n\n<span class=\"c\"># locale 설정</span>\n<span class=\"nb\">export </span><span class=\"nv\">LANG</span><span class=\"o\">=</span>ko_KR.utf8\n</code></pre>  </div></div>\n\n<ul>\n <li>ls : 현재 디렉토리 위치의 파일 목록을 조회</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 현재 디렉토리 위치의 파일 목록 조회</span>\n<span class=\"nb\">ls</span>\n\n<span class=\"c\"># 숨겨진 파일 포함하여 조회</span>\n<span class=\"nb\">ls</span> <span class=\"nt\">-a</span>\n\n<span class=\"c\"># 퍼미션, 포함된 파일 수, 소유자, 그룹, 파일크기, 수정일자, 파일이름 출력</span>\n<span class=\"nb\">ls</span> <span class=\"nt\">-l</span>\n\n<span class=\"c\"># 파일 크기 순으로 정렬하여 출력</span>\n<span class=\"nb\">ls</span> <span class=\"nt\">-S</span>\n\n<span class=\"c\"># 알파벳의 역순으로 출력</span>\n<span class=\"nb\">ls</span> <span class=\"nt\">-r</span>\n\n<span class=\"c\"># 하위 디렉토리까지 출력</span>\n<span class=\"nb\">ls</span> <span class=\"nt\">-R</span>\n\n<span class=\"c\"># 사람이 보기 좋은 단위로 출력</span>\n<span class=\"nb\">ls</span> <span class=\"nt\">-h</span>\n\n<span class=\"c\"># 접근 시간 출력</span>\n<span class=\"nb\">ls</span> <span class=\"nt\">-lu</span>\n\n<span class=\"c\"># 변경 시간 출력</span>\n<span class=\"nb\">ls</span> <span class=\"nt\">-lc</span>\n</code></pre>  </div></div>\n\n<h2 id=\"m\">M</h2>\n\n<ul>\n <li>man : 각 종 명령어들의 자세한 사용법이나 매뉴얼을 볼 때 사용하는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 명령어 메뉴얼 표시</span>\nman <span class=\"o\">[</span><span class=\"nb\">command</span><span class=\"o\">]</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>mkdir : 새로운 디렉토리를 만드는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># directoryname의 새로운 디렉토리 생성</span>\n<span class=\"nb\">mkdir</span> <span class=\"o\">[</span>directory name]\n\n<span class=\"c\"># 디렉토리를 만들 때, 하위 디렉토리까지 만들 때 사용</span>\n<span class=\"nb\">mkdir</span> <span class=\"nt\">-p</span> <span class=\"o\">[</span>directory name 1]/[directory name 2]\n\n<span class=\"c\"># 디렉토리 만들 때, 권한 지정</span>\n<span class=\"nb\">mkdir</span> <span class=\"nt\">-m</span> 700 <span class=\"o\">[</span>directory name]\n</code></pre>  </div></div>\n\n<ul>\n <li>more : 리눅스에서 파일 내용을 확인하는 명령어들 중에 하나로, 파일을 읽어 화면에 화면 단위로 끊어서 출력하는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 파일의 내용 확인</span>\nmore <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># n행씩 출력</span>\nmore <span class=\"nt\">-n</span> <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># n행부터 출력</span>\nmore +n <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 파일 출력을 more로 출력하기</span>\n<span class=\"nb\">ls</span> <span class=\"nt\">-al</span> | more\n</code></pre>  </div></div>\n\n<ul>\n <li>mv : 파일을 이동시키는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 파일 이름 변경(file name 1 --&gt; file name 2)</span>\n<span class=\"nb\">mv</span> <span class=\"o\">[</span>file name 1] <span class=\"o\">[</span>file name 2]\n\n<span class=\"c\"># 해당 파일을 특정 디렉토리로 이동</span>\n<span class=\"nb\">mv</span> <span class=\"o\">[</span>file name] <span class=\"o\">[</span>directory name]\n\n<span class=\"c\"># 여러개의 파일을 특정 디렉토리로 이동</span>\n<span class=\"nb\">mv</span> <span class=\"o\">[</span>file name 1] <span class=\"o\">[</span>file name 2] <span class=\"o\">[</span>directory name]\n\n<span class=\"c\"># 디렉토리 이름 변경(directory name 1 --&gt; directory name 2)</span>\n<span class=\"nb\">mv</span> <span class=\"o\">[</span>directory name 1] <span class=\"o\">[</span>directory name 2]\n</code></pre>  </div></div>\n\n<h2 id=\"n\">N</h2>\n\n<ul>\n <li>nslookup : name server 관련한 조회를 할 수 있는 명령어, 서버의 네트워크가 제대로 설정되었는지 확인하는 용도로 주로 사용</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># IP 조회</span>\nnslookup google.com\n\n<span class=\"c\"># MX(Mail Record) 확인</span>\nnslookup <span class=\"nt\">-query</span><span class=\"o\">=</span>mx google.com\n\n<span class=\"c\"># CNAME 조회</span>\nnslookup <span class=\"nt\">-q</span><span class=\"o\">=</span>cname example.com\n\n<span class=\"c\"># TEXT 조회</span>\nnslookup <span class=\"nt\">-q</span><span class=\"o\">=</span>txt gmail.com\n\n<span class=\"c\"># NS 레코드로 DNS 목록 확인</span>\nnslookup <span class=\"nt\">-type</span><span class=\"o\">=</span>ns google.com \n\n<span class=\"c\"># Reverse DNS lookup</span>\nnslookup 209.132.183.181\n\n<span class=\"c\"># 특정 DNS 사용하여 조회</span>\nnslookup redhat.com 8.8.8.8\n</code></pre>  </div></div>\n\n<h2 id=\"p\">P</h2>\n\n<ul>\n <li>ps : 현재 실행 중인 프로세스 목록과 상태를 출력</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># pid, cmd 등 기본적인 프로세스 목록 출력</span>\nps\n\n<span class=\"c\"># 풀 포맷으로 출력</span>\nps <span class=\"nt\">-f</span>\n\n<span class=\"c\"># 긴 포맷으로 출력</span>\nps <span class=\"nt\">-l</span>\n\n<span class=\"c\"># 프로세스 번호가 1인 프로세스 출력</span>\nps <span class=\"nt\">-p</span> 1\n\n<span class=\"c\"># 계정이 apache인 프로세스 출력</span>\nps <span class=\"nt\">-u</span> apache\n\n<span class=\"c\"># 모든 프로세스 출력</span>\nps <span class=\"nt\">-e</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>\n <p>pwd : 현재 작업 중인 디렉토리의 절대 경로를 출력하는 명령어</p>\n </li>\n <li>\n <p>ping : 네트워크 상태를 확인하려는 대상 컴퓨터를 향해 일정 크기의 패킷을 전송하는 명령어</p>\n </li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 네트워크 대역폭 혹은 속도에 따라 ping의 송신간격 결정</span>\nping <span class=\"nt\">-A</span> www.google.com\n\n<span class=\"c\"># 패킷의 갯수 걸정</span>\nping <span class=\"nt\">-c</span> 10 www.google.com\n\n<span class=\"c\"># 타임스탬프 출력</span>\nping <span class=\"nt\">-D</span> www.google.com\n\n<span class=\"c\"># 빠른 속도로 패킷 전송</span>\nping <span class=\"nt\">-f</span> www.google.com\n\n<span class=\"c\"># 패킷 전송 간격 조절</span>\nping <span class=\"nt\">-i</span> 0.2 www.google.com\n</code></pre>  </div></div>\n\n<h2 id=\"r\">R</h2>\n\n<ul>\n <li>rm : 파일 또는 디렉토리를 제거하는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 특정 파일 제거</span>\n<span class=\"nb\">rm</span> <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 모든 파일 제거</span>\n<span class=\"nb\">rm</span> <span class=\"k\">*</span>\n\n<span class=\"c\"># 특정 디렉토리 제거</span>\n<span class=\"nb\">rm</span> <span class=\"nt\">-r</span> <span class=\"o\">[</span>directory name]\n\n<span class=\"c\"># 특정 디렉토리 강제 제거</span>\n<span class=\"nb\">rm</span> <span class=\"nt\">-rf</span> <span class=\"o\">[</span>directory name]\n\n<span class=\"c\"># 특정 디렉토리의 내용을 확인하며 제거</span>\n<span class=\"nb\">rm</span> <span class=\"nt\">-ri</span> <span class=\"o\">[</span>directory name]\n</code></pre>  </div></div>\n\n<ul>\n <li>rmdir : 비어있는 디렉토리 삭제</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 특정 디렉토리 삭제</span>\n<span class=\"nb\">rmdir</span> <span class=\"o\">[</span>directory name]\n\n<span class=\"c\"># 여러 개의 디렉토리 삭제</span>\n<span class=\"nb\">rmdir</span> <span class=\"o\">[</span>directory name 1] <span class=\"o\">[</span>directory name 2]\n\n<span class=\"c\"># 상위 디렉토리 포함 사게</span>\n<span class=\"nb\">rmdir</span> <span class=\"nt\">-p</span> <span class=\"o\">[</span>directory name 1]/[directory name 2]\n</code></pre>  </div></div>\n\n<h2 id=\"s\">S</h2>\n\n<ul>\n <li>\n <p>sh : 기본으로 지정된 쉘(shell)을 호출하는 명령어</p>\n </li>\n <li>\n <p>source : bash 명령어로, bash 쉘이 작동 중일 때만 동작함. filename 안의 환경설정 내용을 즉시 적용하기 위해 사용됨</p>\n </li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">source</span> <span class=\"o\">[</span>filename]\n</code></pre>  </div></div>\n\n<ul>\n <li>ssh : Secure Shell의 약자로 네트워크 상의 다른 컴퓨터에 로그인하거나 원격 시스템에서 명령을 실행하고 다른 시스템으로 파일을 복사할 수 있도록 해주는 응용 프로그램 또는 프로토콜</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 특정 사용자의 ip 주소에 접속</span>\nssh <span class=\"o\">[</span>user name]@[ip address]\n\n<span class=\"c\"># 특정 포트에 접속</span>\nssh <span class=\"nt\">-p</span> <span class=\"o\">[</span>port num] <span class=\"o\">[</span>user name]@[ip address]\n</code></pre>  </div></div>\n\n<ul>\n <li>sudo : root 권한을 이용하여 명령어를 실행할 때 사용</li>\n</ul>\n\n<h2 id=\"t\">T</h2>\n\n<ul>\n <li>tail : 파일의 마지막 부분을 출력하는 프로그램</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 뒤에서부터 10행 출력</span>\n<span class=\"nb\">tail</span> <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 뒤에서부터 N행 출력</span>\n<span class=\"nb\">tail</span> <span class=\"nt\">-n</span> N <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 뒤에서부터 N byte 출력</span>\n<span class=\"nb\">tail</span> <span class=\"nt\">-c</span> N <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 출력된 내용 저장</span>\n<span class=\"nb\">tail</span> <span class=\"o\">[</span>file name 1] <span class=\"o\">&gt;</span> <span class=\"o\">[</span>file name 2]\n\n<span class=\"c\"># 여러 개의 파일 출력</span>\n<span class=\"nb\">tail</span> <span class=\"o\">[</span>file name 1] <span class=\"o\">[</span>file name 2]\n\n<span class=\"c\"># 파일 제목 생략하고 출력</span>\n<span class=\"nb\">tail</span> <span class=\"nt\">-q</span> <span class=\"o\">[</span>file name]\n</code></pre>  </div></div>\n\n<ul>\n <li>tar : tar 혹은 tar.gz로 압축을 하거나 압축을 해제하는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># tar로 압축하기</span>\n<span class=\"nb\">tar</span> <span class=\"nt\">-cvf</span> <span class=\"o\">[</span><span class=\"nb\">tar </span>name].tar <span class=\"o\">[</span>directory name]\n\n<span class=\"c\"># tar 압축 해제</span>\n<span class=\"nb\">tar</span> <span class=\"nt\">-xvf</span> <span class=\"o\">[</span><span class=\"nb\">tar </span>name].tar\n\n<span class=\"c\"># tar.gz로 압축하기</span>\n<span class=\"nb\">tar</span> <span class=\"nt\">-zcvf</span> <span class=\"o\">[</span><span class=\"nb\">tar </span>name].tar.gz <span class=\"o\">[</span>directory name]\n\n<span class=\"c\"># tar.gz 압축 해제</span>\n<span class=\"nb\">tar</span> <span class=\"nt\">-zxvf</span> <span class=\"o\">[</span><span class=\"nb\">tar </span>name].tar\n</code></pre>  </div></div>\n\n<ul>\n <li>\n <p>top : CPU의 사용률을 확인하는 명령어</p>\n </li>\n <li>\n <p>touch : 0바이트 파일을 생성함</p>\n </li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># filename의 0바이트 파일을 생성</span>\n<span class=\"nb\">touch</span> <span class=\"o\">[</span>filename]\n</code></pre>  </div></div>\n\n<h2 id=\"u\">U</h2>\n\n<ul>\n <li>uname : 시스템의 정보(커널명, 호스트명, 커널 릴리즈, 커널 버전, 머신, 프로세스 하드웨어 플랫폼, OS)를 확인하는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 시스템의 모든 정보 출력</span>\n<span class=\"nb\">uname</span> <span class=\"nt\">-a</span>\n\n<span class=\"c\"># 커널명확인</span>\n<span class=\"nb\">uname</span> <span class=\"nt\">-s</span>\n\n<span class=\"c\"># 사용중인 네트워크 호스트 이름 확인</span>\n<span class=\"nb\">uname</span> <span class=\"nt\">-n</span>\n\n<span class=\"c\"># 커널 릴리즈 확인(운영체제 배포 버전)</span>\n<span class=\"nb\">uname</span> <span class=\"nt\">-r</span>\n\n<span class=\"c\"># 커널 버전 확인</span>\n<span class=\"nb\">uname</span> <span class=\"nt\">-v</span>\n\n<span class=\"c\"># 시스템 하드웨어 타입 정보 확인</span>\n<span class=\"nb\">uname</span> <span class=\"nt\">-m</span>\n\n<span class=\"c\"># 프로세서 정보 확인</span>\n<span class=\"nb\">uname</span> <span class=\"nt\">-p</span>\n\n<span class=\"c\"># 시스템의 하드웨어 플랫폼 정보 확인</span>\n<span class=\"nb\">uname</span> <span class=\"nt\">-i</span>\n\n<span class=\"c\"># 운영체제 정보 확인</span>\n<span class=\"nb\">uname</span> <span class=\"nt\">-o</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>uptime : 시스템이 실행되고 난 후 부터 지금까지의 시간과 시스템에 로그인 된 사용자 수 그리고 시스템 부하율을 표시하는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 현재시간, 시스템 실행시간, 로그인된 사용자 수, 부하율을 표시</span>\n<span class=\"nb\">uptime</span>\n\n<span class=\"c\"># 현재까지 운영된 시간 출력</span>\n<span class=\"nb\">uptime</span> <span class=\"nt\">-p</span>\n\n<span class=\"c\"># 부팅이 시작된 시간 출력</span>\n<span class=\"nb\">uptime</span> <span class=\"nt\">-s</span>\n</code></pre>  </div></div>\n\n<h2 id=\"v\">V</h2>\n\n<ul>\n <li>vi : vi 편집기 사용</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 새로운 문서 편집</span>\nvi <span class=\"o\">[</span>file name]\n</code></pre>  </div></div>\n\n<h2 id=\"w\">W</h2>\n\n<ul>\n <li>w : 서버에 접속한 사용자의 접속정보 및 작업 정보 내용을 확인하는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 헤더 정보를 뺀 간략한 정보 출력</span>\nw <span class=\"nt\">-h</span>\n\n<span class=\"c\"># 로그인 시간, JCPU, PCPU를 제외한 간략한 정보 출력</span>\nw <span class=\"nt\">-s</span>\n\n<span class=\"c\"># FROM 필드의 값 제외한 간략한 정보 출력</span>\nw <span class=\"nt\">-f</span>\n\n<span class=\"c\"># FROM 필드에 호스트 이름 대신 IP 주소 출력</span>\nw <span class=\"nt\">-i</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>\n <p>wget : Web get의 약어로 웹 상의 파일을 다운로드할 때 사용하는 명령어</p>\n </li>\n <li>\n <p>whereis : 명령어의 실행 파일 절대 경로와 소스코드, 설정 파일 및 매뉴얼 페이지를 찾아 출력하는 명령어</p>\n </li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 특정 명령어의 경로, 소스코드, 설정 파일 및 메뉴얼 페이지 출력</span>\nwhereis <span class=\"o\">[</span><span class=\"nb\">command</span><span class=\"o\">]</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>which : 명령어의 위치를 찾아주는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 특정 명령어의 경로 출력</span>\nwhich <span class=\"o\">[</span><span class=\"nb\">command</span><span class=\"o\">]</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>\n <p>whoami : 현재 로그인한 사용자 ID를 출력하는 명령어, id명령어에 -un 옵션을 준 것과 같은 효과</p>\n </li>\n <li>\n <p>whois : 도메인 이름의 소유자가 누구인지 알려주는 명령어</p>\n </li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 도메인 이름을 이용한 소유자 확인</span>\nwhois www.google.com\n\n<span class=\"c\"># IP를 이용한 소유자 확인</span>\nwhois <span class=\"o\">[</span>IP address]\n</code></pre>  </div></div>\n","dir":"/Linux/Command/","name":"Command.md","path":"Linux/Command/Command.md","url":"/Linux/Command/Command.html"},{"sort":1,"permalink":"/Linux/Command/","layout":"default","title":"Command","content":"<h1 id=\"command\">Command</h1>\n\n<ul>\n <li><a href=\"/Linux/Command/Command.html\">Command</a></li>\n</ul>\n","dir":"/Linux/Command/","name":"README.md","path":"Linux/Command/README.md","url":"/Linux/Command/"},{"sort":1,"layout":"default","title":"Install","content":"<h1 id=\"install\">Install</h1>\n\n<blockquote>\n <p>noetic 버전은 <a href=\"http://releases.ubuntu.com/20.04/\">ubuntu 20.04</a>에서 사용되므로, 버전에 유의할 것.</p>\n</blockquote>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- <a href=\"http://wiki.ros.org/Installation/Ubuntu\">ROS 1.0 설치 관련 위키 페이지</a></em></p>\n\n<h2 id=\"1-sourcelist-설정\">1. source.list 설정</h2>\n<p>쉘 스크립트를 이용. /etc/apt/source.list.d에 ros-latest.list를 추가하여 ROS 패키지의 <code class=\"language-plaintext highlighter-rouge\">binary release</code>를 받을 수 있는 저장소를 추가.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>sh <span class=\"nt\">-c</span> <span class=\"s1\">'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" &gt; /etc/apt/sources.list.d/ros-latest.list'</span>\n</code></pre>  </div></div>\n\n<h2 id=\"2-key-설정\">2. key 설정</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">curl</code> 설치 (curl 설치가 되어있다면 넘어가도 된다.)</p>\n<blockquote>\n <p>여기서 curl은 서버와 통신할 수 있는 커맨드 툴로서, 다양한 프로토콜을 지원한다.</p>\n</blockquote>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt <span class=\"nb\">install </span>curl\n</code></pre>  </div></div>\n<p>curl 명령을 통해 가져온 gpg key를 apt-key 명령을 통해 추가한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">-s</span> https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | <span class=\"nb\">sudo </span>apt-key add -\n</code></pre>  </div></div>\n\n<h2 id=\"3-설치\">3. 설치</h2>\n<p>설치하기 전, <code class=\"language-plaintext highlighter-rouge\">debian package</code>를 업데이트 한 후, <code class=\"language-plaintext highlighter-rouge\">noetic</code> 버전을 설치한다.(풀버전 설치)</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt update\n<span class=\"nb\">sudo </span>apt <span class=\"nb\">install </span>ros-noetic-desktop-full\n</code></pre>  </div></div>\n\n<h2 id=\"4-설치-확인\">4. 설치 확인</h2>\n<p>설치가 되었는지 확인</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>apt search ros-noetic\n</code></pre>  </div></div>\n","dir":"/ROS1/Basic/","name":"0001Install.md","path":"ROS1/Basic/0001Install.md","url":"/ROS1/Basic/0001Install.html"},{"sort":1,"permalink":"/ROS1/Basic/","layout":"default","title":"BASIC","content":"<h1 id=\"basic\">BASIC</h1>\n\n<ul>\n <li><a href=\"/ROS1/Basic/0001Install.html\">Install</a></li>\n <li><a href=\"/ROS1/Basic/0002Catkin.html\">Catkin</a></li>\n <li><a href=\"/ROS1/Basic/0003CMakeList.html\">CMakeLists.txt</a></li>\n <li><a href=\"/ROS1/Basic/0004Package-xml.html\">Package.xml</a></li>\n <li><a href=\"/ROS1/Basic/0005Launch-System.html\">Launch System</a></li>\n</ul>\n","dir":"/ROS1/Basic/","name":"README.md","path":"ROS1/Basic/README.md","url":"/ROS1/Basic/"},{"sort":1,"permalink":"/ROS1/","layout":"default","title":"ROS 1.0","content":"<h1 id=\"ros-10\">ROS 1.0</h1>\n\n<ul>\n <li><a href=\"/ROS1/Basic/\">BASIC</a>\n <ul>\n <li><a href=\"/ROS1/Basic/0001Install.html\">Install</a></li>\n <li><a href=\"/ROS1/Basic/0002Catkin.html\">Catkin</a></li>\n <li><a href=\"/ROS1/Basic/0003CMakeList.html\">CMakeLists.txt</a></li>\n <li><a href=\"/ROS1/Basic/0004Package-xml.html\">Package.xml</a></li>\n <li><a href=\"/ROS1/Basic/0005Launch-System.html\">Launch System</a></li>\n </ul>\n </li>\n</ul>\n","dir":"/ROS1/","name":"README.md","path":"ROS1/README.md","url":"/ROS1/"},{"sort":1,"layout":"default","title":"Install","content":"<h1 id=\"install\">Install</h1>\n\n<blockquote>\n <p>foxy 버전은 <a href=\"http://releases.ubuntu.com/20.04/\">ubuntu 20.04</a>에서 사용되므로, 버전에 유의할 것.</p>\n</blockquote>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em><a href=\"https://docs.ros.org/en/foxy/Installation/Ubuntu-Install-Debians.html\">ROS 2.0 foxy 설치 페이지(debian 패키지 이용)</a></em></p>\n\n<h2 id=\"1-locale-설정\">1. Locale 설정</h2>\n<p>설치를 위해 설정된 <code class=\"language-plaintext highlighter-rouge\">locale</code>이 <code class=\"language-plaintext highlighter-rouge\">UTF-8</code>을 지원애햐 한다. 따라서 <code class=\"language-plaintext highlighter-rouge\">locale</code>을 다음과 같이 설정한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt update <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">sudo </span>apt <span class=\"nb\">install </span>locales\n<span class=\"nb\">sudo </span>locale-gen en_US en_US.UTF-8\n<span class=\"nb\">sudo </span>update-locale <span class=\"nv\">LC_ALL</span><span class=\"o\">=</span>en_US.UTF-8 <span class=\"nv\">LANG</span><span class=\"o\">=</span>en_US.UTF-8\n<span class=\"nb\">export </span><span class=\"nv\">LANG</span><span class=\"o\">=</span>en_US.UTF-8\n</code></pre>  </div></div>\n\n<h2 id=\"2-source-추가\">2. Source 추가</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">curl</code> 명령을 이용하여 <code class=\"language-plaintext highlighter-rouge\">gpg key</code>를 가져온다.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt update <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">sudo </span>apt <span class=\"nb\">install </span>curl gnupg2 lsb-release\n<span class=\"nb\">sudo </span>curl <span class=\"nt\">-sSL</span> https://raw.githubusercontent.com/ros/rosdistro/master/ros.key  <span class=\"nt\">-o</span> /usr/share/keyrings/ros-archive-keyring.gpg\n</code></pre>  </div></div>\n\n<p>그 이후, <code class=\"language-plaintext highlighter-rouge\">sources.list.d</code>에 <code class=\"language-plaintext highlighter-rouge\">ROS 2.0</code> 설치하기 위해 <code class=\"language-plaintext highlighter-rouge\">repository</code>를 추가한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">echo</span> <span class=\"s2\">\"deb [arch=</span><span class=\"si\">$(</span>dpkg <span class=\"nt\">--print-architecture</span><span class=\"si\">)</span><span class=\"s2\"> signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu </span><span class=\"si\">$(</span>lsb_release <span class=\"nt\">-cs</span><span class=\"si\">)</span><span class=\"s2\"> main\"</span> | <span class=\"nb\">sudo tee</span> /etc/apt/sources.list.d/ros2.list <span class=\"o\">&gt;</span> /dev/null\n</code></pre>  </div></div>\n\n<h2 id=\"3-설치\">3. 설치</h2>\n<p>설치하기 전, <code class=\"language-plaintext highlighter-rouge\">debian package</code>를 업데이트 한 후, <code class=\"language-plaintext highlighter-rouge\">foxy</code> 버전을 설치한다.(풀버전 설치)</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt update\n<span class=\"nb\">sudo </span>apt <span class=\"nb\">install </span>ros-foxy-desktop\n<span class=\"nb\">sudo </span>apt <span class=\"nb\">install </span>ros-foxy-ros-base\n</code></pre>  </div></div>\n\n<h2 id=\"4-개발-및-ros-tool-설치\">4. 개발 및 ROS tool 설치</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">ROS 2.0</code> 개발에 필요한 패키지들을 설치한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt update <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">sudo </span>apt <span class=\"nb\">install</span> <span class=\"nt\">-y</span> <span class=\"se\">\\</span>\n  build-essential <span class=\"se\">\\</span>\n  cmake <span class=\"se\">\\</span>\n  git <span class=\"se\">\\</span>\n  libbullet-dev <span class=\"se\">\\</span>\n  python3-colcon-common-extensions <span class=\"se\">\\</span>\n  python3-flake8 <span class=\"se\">\\</span>\n  python3-pip <span class=\"se\">\\</span>\n  python3-pytest-cov <span class=\"se\">\\</span>\n  python3-rosdep <span class=\"se\">\\</span>\n  python3-setuptools <span class=\"se\">\\</span>\n  python3-vcstool <span class=\"se\">\\</span>\n  wget\n<span class=\"c\"># install some pip packages needed for testing</span>\npython3 <span class=\"nt\">-m</span> pip <span class=\"nb\">install</span> <span class=\"nt\">-U</span> <span class=\"se\">\\</span>\n  argcomplete <span class=\"se\">\\</span>\n  flake8-blind-except <span class=\"se\">\\</span>\n  flake8-builtins <span class=\"se\">\\</span>\n  flake8-class-newline <span class=\"se\">\\</span>\n  flake8-comprehensions <span class=\"se\">\\</span>\n  flake8-deprecated <span class=\"se\">\\</span>\n  flake8-docstrings <span class=\"se\">\\</span>\n  flake8-import-order <span class=\"se\">\\</span>\n  flake8-quotes <span class=\"se\">\\</span>\n  pytest-repeat <span class=\"se\">\\</span>\n  pytest-rerunfailures <span class=\"se\">\\</span>\n  pytest\n<span class=\"c\"># install Fast-RTPS dependencies</span>\n<span class=\"nb\">sudo </span>apt <span class=\"nb\">install</span> <span class=\"nt\">--no-install-recommends</span> <span class=\"nt\">-y</span> <span class=\"se\">\\</span>\n  libasio-dev <span class=\"se\">\\</span>\n  libtinyxml2-dev\n<span class=\"c\"># install Cyclone DDS dependencies</span>\n<span class=\"nb\">sudo </span>apt <span class=\"nb\">install</span> <span class=\"nt\">--no-install-recommends</span> <span class=\"nt\">-y</span> <span class=\"se\">\\</span>\n  libcunit1-dev\n</code></pre>  </div></div>\n\n<p>작업 공간을 만들고, 저장소들을 불러온다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">mkdir</span> <span class=\"nt\">-p</span> ~/ros2_foxy/src\n<span class=\"nb\">cd</span> ~/ros2_foxy\nwget https://raw.githubusercontent.com/ros2/ros2/foxy/ros2.repos\nvcs import src &lt; ros2.repos\n</code></pre>  </div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">rosdep</code> 명령어를 이용하여 의존성 패키지들을 설치한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>rosdep init\nrosdep update\nrosdep <span class=\"nb\">install</span> <span class=\"nt\">--from-paths</span> src <span class=\"nt\">--ignore-src</span> <span class=\"nt\">--rosdistro</span> foxy <span class=\"nt\">-y</span> <span class=\"nt\">--skip-keys</span> <span class=\"s2\">\"console_bridge fastcdr fastrtps rti-connext-dds-5.3.1 urdfdom_headers\"</span>\n</code></pre>  </div></div>\n\n<p>작업공간에 설치된 패키지들을 빌드하면, <code class=\"language-plaintext highlighter-rouge\">ROS</code> 작업에 필요한 기본 패키지들을 설치할 수 있다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cd</span> ~/ros2_foxy/\ncolcon build <span class=\"nt\">--symlink-install</span>\n</code></pre>  </div></div>\n\n<h2 id=\"5-설치-확인\">5. 설치 확인</h2>\n<p>설치 확인을 위해 다음과 같은 예제를 실행한다.</p>\n\n<ul>\n <li>C++ talker\n터미널창을 열어 <code class=\"language-plaintext highlighter-rouge\">C++ talker</code>를 실행한다.\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">source</span> /opt/ros/foxy/setup.bash\nros2 run demo_nodes_cpp talker\n</code></pre>  </div> </div>\n </li>\n <li>Python listener\n또 다른 터미널창을 열어 <code class=\"language-plaintext highlighter-rouge\">Python listener</code>를 실행한다.\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">source</span> /opt/ros/foxy/setup.bash\nros2 run demo_nodes_py listener\n</code></pre>  </div> </div>\n </li>\n</ul>\n\n<p>그 결과, <code class=\"language-plaintext highlighter-rouge\">talker</code>에서 <code class=\"language-plaintext highlighter-rouge\">publish</code>하는 <code class=\"language-plaintext highlighter-rouge\">message</code>를 <code class=\"language-plaintext highlighter-rouge\">listener</code>의 터미널창에서 <code class=\"language-plaintext highlighter-rouge\">subscribe</code>하는 것을 볼 수 있다.</p>\n","dir":"/ROS2/Basic/","name":"0001Install.md","path":"ROS2/Basic/0001Install.md","url":"/ROS2/Basic/0001Install.html"},{"sort":2,"layout":"default","title":"Switch Initializer","content":"<h1 id=\"switch-initializer\">Switch Initializer</h1>\n\n<ul>\n <li>참고문헌 : 전문가를 위한 C++(마크 그레고리 / 한빛미디어)</li>\n</ul>\n\n<p><code class=\"language-plaintext highlighter-rouge\">if</code> 문과 동일하게 <code class=\"language-plaintext highlighter-rouge\">C++17</code>부터 <code class=\"language-plaintext highlighter-rouge\">switch</code> 문 안에 이니셜라이저를 넣는 기능이 추가되었음.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"err\">이니셜라이저</span><span class=\"o\">&gt;</span> <span class=\"p\">;</span> <span class=\"o\">&lt;</span><span class=\"err\">조건문</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"o\">&lt;</span><span class=\"err\">본문</span><span class=\"o\">&gt;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">&lt;이니셜라이저&gt;</code>에서 정의한 변수는 <code class=\"language-plaintext highlighter-rouge\">&lt;조건문&gt;</code>과 <code class=\"language-plaintext highlighter-rouge\">&lt;본문&gt;</code> 안에서만 사용할 수 있고, <code class=\"language-plaintext highlighter-rouge\">switch</code> 문 밖에서는 사용할 수 없음.</p>\n\n","dir":"/C++/Grammer/","name":"0002Switch-initializer.md","path":"C++/Grammer/0002Switch-initializer.md","url":"/C++/Grammer/0002Switch-initializer.html"},{"sort":2,"layout":"default","title":"Catkin","content":"<h1 id=\"catkin\">Catkin</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- Programming Robots with ROS(Morgan Quigley, Brian Gerkey, William D. Smart)</em></p>\n\n<p><em>- <a href=\"https://wiki.ros.org/catkin/conceptual_overview\">catkin overview ros wiki pages</a></em></p>\n\n<h2 id=\"1-catkin-이란\">1. Catkin 이란?</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">catkin</code>은 <code class=\"language-plaintext highlighter-rouge\">ROS</code>에 사용되는 실행 프로그램, 라이브러리, 스크립트 및 다른 코드에서 사용할 인터페이스를 생성할 수 있도록 하는 <code class=\"language-plaintext highlighter-rouge\">ROS</code> 빌드 시스템이다. <code class=\"language-plaintext highlighter-rouge\">catkin</code>은 <code class=\"language-plaintext highlighter-rouge\">CMake</code> 매크로들과 일반적인 <code class=\"language-plaintext highlighter-rouge\">CMake</code> workflow에 추가적인 기능을 제공하기 위한 전용 파이썬 스크립트로 구성된다.</p>\n\n<h2 id=\"2-ros-프로젝트를-진행하며-자주-사용한-catkin-cli\">2. ROS 프로젝트를 진행하며 자주 사용한 catkin CLI</h2>\n<p>다음은 <code class=\"language-plaintext highlighter-rouge\">ROS</code> 프로젝트를 진행하면서 주로 사용되는 <code class=\"language-plaintext highlighter-rouge\">command line arguments</code>를 정리하였다.</p>\n\n<ul>\n <li>\n <p><code class=\"language-plaintext highlighter-rouge\">catkin_create_pkg [package_name] [dependency_package1] [dependency_package2] ...</code>\n<code class=\"language-plaintext highlighter-rouge\">ROS</code> 패키지를 생성하는 명령으로, <code class=\"language-plaintext highlighter-rouge\">package_name</code>으로 패키지를 생성하며, <code class=\"language-plaintext highlighter-rouge\">CMakeLists.txt</code>와 <code class=\"language-plaintext highlighter-rouge\">package.xml</code>을 포함한 패키지 폴더를 생성한다. 이 때, 패키지 이름은 모두 소문자를 사용해야하며, 공백이 있으면 안된다.</p>\n </li>\n <li>\n <p><code class=\"language-plaintext highlighter-rouge\">catkin_make</code>\n<code class=\"language-plaintext highlighter-rouge\">catkin</code> 빌드 명령어로, <code class=\"language-plaintext highlighter-rouge\">workspace</code> 위치에서 해당 명령어로 <code class=\"language-plaintext highlighter-rouge\">workspace</code> 내부에 있는 패키지들을 빌드할 수 있다.</p>\n </li>\n</ul>\n","dir":"/ROS1/Basic/","name":"0002Catkin.md","path":"ROS1/Basic/0002Catkin.md","url":"/ROS1/Basic/0002Catkin.html"},{"sort":2,"layout":"default","title":"Colcon","content":"<h1 id=\"colcon\">Colcon</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- <a href=\"https://docs.ros.org/en/foxy/Tutorials/Colcon-Tutorial.html\">Colcon 관련 ROS 2.0 foxy 설치 페이지</a></em></p>\n\n<p><em>- <a href=\"https://design.ros2.org/articles/build_tool.html\">Build tools 에 대한 비교 및 정리 문서</a></em></p>\n\n<p><em>- <a href=\"https://github.com/colcon\">Colcon github pages</a></em></p>\n\n<p><em>- <a href=\"https://colcon.readthedocs.io/en/released/#\">Colcon gitbook pages</a></em></p>\n\n<h2 id=\"1-colcon-이란\">1. Colcon 이란?</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">colcon</code>은 command line tool로, 빌드, 테스트, 다수의 소프트웨어 패키지를 사용하는데 workflow를 개선하는데 사용된다. <code class=\"language-plaintext highlighter-rouge\">colcon</code>은 이런 과정을 자동화하고, 명령을 처리하고, 패키지를 사용하도록 환경을 설정한다.</p>\n\n<p>ROS 2.0에서는 <code class=\"language-plaintext highlighter-rouge\">ament_cmake</code>를 이용하여 패키지들을 빌드하는데, <code class=\"language-plaintext highlighter-rouge\">ament_cmake</code>의 사용의 불편함으로 인해, <code class=\"language-plaintext highlighter-rouge\">catkin</code>이나 <code class=\"language-plaintext highlighter-rouge\">ament</code> 등의 빌드 방식을 범용적으로 빌드할 수 있는 툴로써 <code class=\"language-plaintext highlighter-rouge\">colcon</code>을 이용하여 패키지를 빌드한다.</p>\n\n<p>ROS의 workspace는 <code class=\"language-plaintext highlighter-rouge\">src</code> 폴더 내부에 ROS 패키지들이 들어가게 된다. 이 패키지들을 빌드하기 위하여 workspace 위치(<code class=\"language-plaintext highlighter-rouge\">src</code>의 상위 폴더)에서 <code class=\"language-plaintext highlighter-rouge\">colcon build</code>를 하게 되면, <code class=\"language-plaintext highlighter-rouge\">build</code>, <code class=\"language-plaintext highlighter-rouge\">install</code>, <code class=\"language-plaintext highlighter-rouge\">log</code> 폴더들이 생성된다.</p>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">build</code> : CMake와 같이 빌드에 필요한 intermediate 파일들이 저장되는 공간으로, 빌드되는 패키지들의 폴더들이 생성됨.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">install</code> : 각 패키지들이 설치되는 폴더로, 각 패키지별로 폴더가 생성됨. <code class=\"language-plaintext highlighter-rouge\">catkin</code>으로 빌드하면 <code class=\"language-plaintext highlighter-rouge\">devel</code> 폴더가 생성되었으나 <code class=\"language-plaintext highlighter-rouge\">colcon</code>으로 빌드하게 되면 <code class=\"language-plaintext highlighter-rouge\">install</code> 폴더가 생성됨.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">log</code> : <code class=\"language-plaintext highlighter-rouge\">colcon</code> 호출에 대한 로그 정보가 기록됨.</li>\n</ul>\n\n<p>빌드 이후에 <code class=\"language-plaintext highlighter-rouge\">install</code> 폴더에 설치된 패키지들을 ROS 패키지와 함께 사용하기 위해서는 source 명령을 통해 <code class=\"language-plaintext highlighter-rouge\">install</code> 폴더 내부에 생성된 <code class=\"language-plaintext highlighter-rouge\">setup.bash</code> 의 환경 설정 내용을 가져와야 한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">source</span> ~/[workspace_name]/install/setup.bash\n</code></pre>  </div></div>\n\n<h2 id=\"2-ros-프로젝트를-진행하며-사용되는-colcon-cli\">2. ROS 프로젝트를 진행하며 사용되는 colcon CLI</h2>\n<p>다음은 <code class=\"language-plaintext highlighter-rouge\">ROS</code> 프로젝트를 진행하면서 주로 사용되는 build 관련된 <code class=\"language-plaintext highlighter-rouge\">command line arguments</code>를 정리하였다.</p>\n\n<ul>\n <li>\n <p><code class=\"language-plaintext highlighter-rouge\">--symlink-install</code>\n빌드하는 파일들을 복사하지 않고 링크로 연결하여 수정이 용이하도록 하는 명령으로, 해당 명령으로 빌드된 python 파일의 코드는 첫 빌드 이후에 내용이 수정되어도 빌드를 다시 하지 않고도 사용할 수 있다.</p>\n </li>\n <li>\n <p><code class=\"language-plaintext highlighter-rouge\">--packages-select [package_name [package_name ...]]</code>\n<code class=\"language-plaintext highlighter-rouge\">package_name</code> 패키지만 빌드한다.</p>\n </li>\n <li>\n <p><code class=\"language-plaintext highlighter-rouge\">--packages-up-to [package_name [package_name ...]]</code>\n패키지 내부에 dependency에 의해 먼저 빌드되어야 하는 패키지가 있을 때 사용되며, <code class=\"language-plaintext highlighter-rouge\">package_name</code> 패키지 내부에 걸려있는 dependency 패키지들과 <code class=\"language-plaintext highlighter-rouge\">package_name</code> 패키지를 빌드한다.</p>\n </li>\n <li>\n <p><code class=\"language-plaintext highlighter-rouge\">--cmake-args [*[* ...]]</code> \nCMake 과정에서 관련 arguments를 입력할 수 있다.</p>\n </li>\n</ul>\n","dir":"/ROS2/Basic/","name":"0002Colcon.md","path":"ROS2/Basic/0002Colcon.md","url":"/ROS2/Basic/0002Colcon.html"},{"sort":2,"permalink":"/ROS2/Basic/","layout":"default","title":"BASIC","content":"<h1 id=\"basic\">BASIC</h1>\n\n<ul>\n <li><a href=\"/ROS2/Basic/0001Install.html\">Install</a></li>\n <li><a href=\"/ROS2/Basic/0002Colcon.html\">Colcon</a></li>\n <li><a href=\"/ROS2/Basic/0003CMakeList.html\">CMakeLists.txt</a></li>\n <li><a href=\"/ROS2/Basic/0004Package-xml.html\">Package.xml</a></li>\n <li><a href=\"/ROS2/Basic/0005Launch-System.html\">Launch System</a></li>\n</ul>\n","dir":"/ROS2/Basic/","name":"README.md","path":"ROS2/Basic/README.md","url":"/ROS2/Basic/"},{"sort":2,"permalink":"/ROS2/","layout":"default","title":"ROS 2.0","content":"<h1 id=\"ros-20\">ROS 2.0</h1>\n\n<ul>\n <li><a href=\"/ROS2/Basic/\">BASIC</a>\n <ul>\n <li><a href=\"/ROS2/Basic/0001Install.html\">Install</a></li>\n <li><a href=\"/ROS2/Basic/0002Colcon.html\">Colcon</a></li>\n <li><a href=\"/ROS2/Basic/0003CMakeList.html\">CMakeLists.txt</a></li>\n <li><a href=\"/ROS2/Basic/0004Package-xml.html\">Package.xml</a></li>\n <li><a href=\"/ROS2/Basic/0005Launch-System.html\">Launch System</a></li>\n </ul>\n </li>\n</ul>\n","dir":"/ROS2/","name":"README.md","path":"ROS2/README.md","url":"/ROS2/"},{"sort":3,"layout":"default","title":"vector 기초","content":"<h1 id=\"vector-기초\">vector 기초</h1>\n\n<ul>\n <li>참고문헌 : 전문가를 위한 C++(마크 그레고리 / 한빛미디어)</li>\n</ul>\n\n<p><code class=\"language-plaintext highlighter-rouge\">std::vector</code>는 <code class=\"language-plaintext highlighter-rouge\">C++</code> 표준 라이브러리로, <code class=\"language-plaintext highlighter-rouge\">C</code> 스타일의 배열을 대체하며, 메모리 관리를 신경 쓸 필요가 없기 때문에 배열보다 훨씬 유연하고 안전하다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">myVector</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span> <span class=\"p\">};</span>\n\n<span class=\"n\">myVector</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">33</span><span class=\"p\">);</span>\n<span class=\"n\">myVector</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">44</span><span class=\"p\">);</span>\n\n<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"1st element: \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">myVector</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">vector</code>는 제네릭 컨테이너로, 거의 모든 종류의 객체를 담을 수 있다.</li>\n</ul>\n","dir":"/C++/Grammer/","name":"0003vector.md","path":"C++/Grammer/0003vector.md","url":"/C++/Grammer/0003vector.html"},{"sort":3,"permalink":"/ROBOTICS/","layout":"default","title":"ROBOTICS","content":"<h1 id=\"robotics\">ROBOTICS</h1>\n\n","dir":"/ROBOTICS/","name":"README.md","path":"ROBOTICS/README.md","url":"/ROBOTICS/"},{"sort":3,"layout":"default","title":"CMakeLists.txt","content":"<h1 id=\"cmakeliststxt\">CMakeLists.txt</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- <a href=\"http://wiki.ros.org/catkin/CMakeLists.txt\">CmakeLists.txt ros wiki page</a></em></p>\n\n<p><em>- <a href=\"https://cmake.org/\">CMake Main page</a></em></p>\n\n<h2 id=\"1-cmakeliststxt란\">1. CMakeLists.txt란?</h2>\n\n<p>해당 페이지는 <code class=\"language-plaintext highlighter-rouge\">CmakeLists.txt ros wiki page</code>의 내용을 주로 옮겨왔다.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">CMakeLists.txt</code>파일은 소프트웨어 패키지 빌드를 위한 <code class=\"language-plaintext highlighter-rouge\">CMake</code> 빌드 시스템의 입력 파일이다. <code class=\"language-plaintext highlighter-rouge\">CMake</code>와 호환되는 패키지는 하나 이상의 <code class=\"language-plaintext highlighter-rouge\">CMakeLists.txt</code> 파일을 가지며, 이 파일을 통해 어떻게 패키지 내의 코드를 빌드하고 어디에 설치할 지를 기술하게 된다.</p>\n\n<h2 id=\"2-cmake-버전\">2. CMake 버전</h2>\n<p>패키지를 빌드하기 위해 최소로 필요한 <code class=\"language-plaintext highlighter-rouge\">CMake</code> 버전을 입력한다. <code class=\"language-plaintext highlighter-rouge\">ROS 1.0</code>의 <code class=\"language-plaintext highlighter-rouge\">catkin</code>에서는 최소 2.8.3 이상을 필요로 한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>cmake_minimum_required<span class=\"o\">(</span>VERSION 2.8.3<span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<h2 id=\"3-package-name\">3. Package Name</h2>\n<p>패키지 명을 project 함수를 통해 전달한다. 현재 패키지의 폴더 명과 동일해야 한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>project<span class=\"o\">([</span>PACKAGE_NAME]<span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<h2 id=\"4-빌드에-필요한-cmake-패키지-찾기\">4. 빌드에 필요한 CMake 패키지 찾기</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">find_package()</code> 함수를 이용하여 패키지 빌드를 위해 필요한 다른 의존 패키지들을 입력한다.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">ROS 1.0</code>의 경우 <code class=\"language-plaintext highlighter-rouge\">catkin</code> 패키지가 필요하므로 항상 <code class=\"language-plaintext highlighter-rouge\">catkin</code> 패키지를 추가해야 한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>find_package<span class=\"o\">(</span>catkin REQUIRED<span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<p>또한 <code class=\"language-plaintext highlighter-rouge\">COMPONENTS</code> 인자를 통해 해당 패키지에서 가져올 부분을 다음 예시처럼 명시해주어야 한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>find_package<span class=\"o\">(</span>catkin REQUIRED COMPONENTS\n  roscpp\n  std_msgs\n  tf\n  ...\n<span class=\"o\">)</span>\n</code></pre>  </div></div>\n<p>이렇게 하면, 해당 패키지에 대한 헤더 파일 경로, 라이브러리 정보 등이 <code class=\"language-plaintext highlighter-rouge\">catkin_</code> 환경 변수에 적용될 것이다. 즉 <code class=\"language-plaintext highlighter-rouge\">catkin_INCLUDE_DIRS</code> 안에 각 <code class=\"language-plaintext highlighter-rouge\">catkin</code> 패키지에 대한 헤더 파일 경로 뿐 아니라, 각 패키지에 대한 환경변수도 생성이 된다. 이렇게 해두면 나중에 편리할 수 있다.</p>\n\n<p>물론 각각의 패키지에 대해서 <code class=\"language-plaintext highlighter-rouge\">find_package()</code> 함수를 사용할 수 있으며, 각 패키지에 대한 <code class=\"language-plaintext highlighter-rouge\">[PACKAGE_NAME]_INCLUDE_DIRS</code>, <code class=\"language-plaintext highlighter-rouge\">[PACKAGE_NAME]_LIBRARIES</code> 등과 같이 별도의 환경변수 세트가 생성된다.</p>\n\n<p>그 이외의 <code class=\"language-plaintext highlighter-rouge\">catkin</code> 패키지가 아닌 패키지들을 추가적으로 필요한 다른 의존성 패키지들을 추가하면 된다. 예를 들어 <code class=\"language-plaintext highlighter-rouge\">Boost</code> 패키지를 사용할 때, 다음과 같이 패키지를 추가해주어야 한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>find_package<span class=\"o\">(</span>Boost REQUIRED COMPONENTS\n  system\n<span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<h2 id=\"5-파이썬-모듈-지원-활성화\">5. 파이썬 모듈 지원 활성화</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">ROS</code> 패키지에 파이썬 모듈이 포함되는 경우(즉, <code class=\"language-plaintext highlighter-rouge\">rospy</code>를 사용하는 경우)에 사용된다. <code class=\"language-plaintext highlighter-rouge\">setup.py</code> 파일이 필요하며, 아래와 같은 호출이 <code class=\"language-plaintext highlighter-rouge\">CMakeLists.txt</code>에 추가되어야 하며, 그 위치는 <code class=\"language-plaintext highlighter-rouge\">generate_messages()</code>와 <code class=\"language-plaintext highlighter-rouge\">catkin_package()</code> 호출 전이어야 한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>catkin_python_setup<span class=\"o\">()</span>\n</code></pre>  </div></div>\n\n<h2 id=\"6-메세지-서비스-액션-타겟\">6. 메세지, 서비스, 액션 타겟</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">ROS</code>의 메시지 파일(<code class=\"language-plaintext highlighter-rouge\">.msg</code>), 서비스 파일(<code class=\"language-plaintext highlighter-rouge\">.srv</code>), 액션 파일(<code class=\"language-plaintext highlighter-rouge\">.action</code>)을 사용하려면 패키지 빌드 전에 이들 파일을 위한 특별한 전처리 빌드 단계가 필요하다. 매크로를 통해 사용하는 프로그래밍 언어에 적합한 형태로 메시지, 서비스, 액션을 전처리하게 된다. 빌드 시스템은 <code class=\"language-plaintext highlighter-rouge\">gencpp</code>, <code class=\"language-plaintext highlighter-rouge\">genpy</code>, <code class=\"language-plaintext highlighter-rouge\">genlisp</code> 등의 생성 도구를 이용하여 바인딩을 위한 전처리를 수행한다. 아래와 같이 매시지, 서비스, 액션 각각을 위한 세 개의 매크로가 제공된다.</p>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">add_message_files()</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">add_service_files()</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">add_action_files()</code></li>\n</ul>\n\n<p>ROS 메세지, 서비스, 액션을 생성하기 전에 먼저 <code class=\"language-plaintext highlighter-rouge\">find_package()</code> 에서 <code class=\"language-plaintext highlighter-rouge\">message_generation</code>을 불러와야 한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>find_package<span class=\"o\">(</span>catkin REQUIRED COMPONENTS\n  message_generation\n<span class=\"o\">)</span>\n</code></pre>  </div></div>\n<p>그 이외에도 메세지, 서비스, 액션 파일에 <code class=\"language-plaintext highlighter-rouge\">std_msgs</code>나 <code class=\"language-plaintext highlighter-rouge\">geometry_msgs</code>를 사용한다면, <code class=\"language-plaintext highlighter-rouge\">find_package()</code>에 추가해야 한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>find_package<span class=\"o\">(</span>catkin REQUIRED COMPONENTS\n  std_msgs\n  geometry_msgs\n  message_generation\n<span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<p>그 이후에, <code class=\"language-plaintext highlighter-rouge\">add_message_files()</code>, <code class=\"language-plaintext highlighter-rouge\">add_service_files()</code>, <code class=\"language-plaintext highlighter-rouge\">add_action_files()</code> 매크로를 이용해, 메세지, 서비스, 액션 파일을 추가한다. 여기서 <code class=\"language-plaintext highlighter-rouge\">FILES</code> 인자는 패키지 폴더의 각각 <code class=\"language-plaintext highlighter-rouge\">msg</code>, <code class=\"language-plaintext highlighter-rouge\">srv</code>, <code class=\"language-plaintext highlighter-rouge\">action</code> 폴더 아래의 <code class=\"language-plaintext highlighter-rouge\">.msg</code>, <code class=\"language-plaintext highlighter-rouge\">.srv</code>, <code class=\"language-plaintext highlighter-rouge\">.action</code> 파일들을 참조하도록 한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 메세지 추가</span>\nadd_message_files<span class=\"o\">(</span>\n   FILES\n   <span class=\"o\">[</span>MessageName_1.msg]\n   <span class=\"o\">[</span>MessageName_2.msg]\n   <span class=\"o\">[</span>MessageName_3.msg]\n   ...\n<span class=\"o\">)</span>\n<span class=\"c\"># 서비스 추가</span>\nadd_service_files<span class=\"o\">(</span>\n   FILES\n   <span class=\"o\">[</span>ServiceName_1.srv]\n   <span class=\"o\">[</span>ServiceName_2.srv]\n   <span class=\"o\">[</span>ServiceName_3.srv]\n   ...\n<span class=\"o\">)</span>\n<span class=\"c\"># 액션 추가</span>\nadd_action_files<span class=\"o\">(</span>\n   FILES\n   <span class=\"o\">[</span>ActionName_1.action]\n   <span class=\"o\">[</span>ActionName_2.action]\n   <span class=\"o\">[</span>ActionName_3.action]\n   ...\n<span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<p>매크로 이후에 <code class=\"language-plaintext highlighter-rouge\">generate_message()</code> 함수를 이용하여 메세지를 생성한다. 이 때, 의존성으로 필요한 <code class=\"language-plaintext highlighter-rouge\">ROS</code> 표준 메세지 타입이 있다면 추가해주어야 한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>generate_messages<span class=\"o\">(</span>\n  DEPENDENCIES\n  std_msgs\n  geometry_msgs\n<span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">generate_message()</code>를 수행한 다음에 <code class=\"language-plaintext highlighter-rouge\">catkin_package()</code>를 수행해야 하는데, <code class=\"language-plaintext highlighter-rouge\">catkin_package()</code>에서 <code class=\"language-plaintext highlighter-rouge\">CATKIN_DEPENDS</code>로 <code class=\"language-plaintext highlighter-rouge\">message_runtime</code>을 추가해야 한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>catkin_package<span class=\"o\">(</span>\n ...\n CATKIN_DEPENDS message_runtime ...\n ...\n<span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<h2 id=\"7-catkin_package\">7. catkin_package()</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">catkin_package()</code> 는 <code class=\"language-plaintext highlighter-rouge\">catkin</code>이 제공하는 <code class=\"language-plaintext highlighter-rouge\">CMake</code> 매크로 함수로 <code class=\"language-plaintext highlighter-rouge\">catkin</code> 관련 정보를 빌드 시스템에 전달하여 <code class=\"language-plaintext highlighter-rouge\">pkg-config</code>와 <code class=\"language-plaintext highlighter-rouge\">CMake</code> 파일을 생성하기 위해 필요하다. 이 함수는 반드시 <code class=\"language-plaintext highlighter-rouge\">add_library()</code> or <code class=\"language-plaintext highlighter-rouge\">add_executable()</code>로 빌드 타겟을 선언하기 전에 호출하여야 하며, 다음의 5 개의 선택가능한 인자를 가진다. 주로 <code class=\"language-plaintext highlighter-rouge\">CATKIN_DEPENDS</code>를 사용하는 것 같다.</p>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">INCLUDE_DIRS</code> - 패키지 내부 폴더인 <code class=\"language-plaintext highlighter-rouge\">include</code>의 헤더 파일을 사용하겠다는 설정</li>\n <li><code class=\"language-plaintext highlighter-rouge\">LIBRARIES</code> - 사용할 의존성 라이브러리를 설정</li>\n <li><code class=\"language-plaintext highlighter-rouge\">CATKIN_DEPENDS</code> - <code class=\"language-plaintext highlighter-rouge\">roscpp</code>나 <code class=\"language-plaintext highlighter-rouge\">std_msgs</code>와 같이 프로젝트가 의존성을 가진 다른 <code class=\"language-plaintext highlighter-rouge\">catkin</code> 프로젝트</li>\n <li><code class=\"language-plaintext highlighter-rouge\">DEPENDS</code> - 프로젝트가 의존성을 가진 <code class=\"language-plaintext highlighter-rouge\">Non-catkin CMake</code> 프로젝트</li>\n <li><code class=\"language-plaintext highlighter-rouge\">CFG_EXTRAS</code> - 기타 설정 옵션</li>\n</ul>\n\n<h2 id=\"8-빌드-타겟-정의\">8. 빌드 타겟 정의</h2>\n<p>빌드 타겟은 일반적으로 아래 두 가지 방법 중 하나를 선택한다.</p>\n<ul>\n <li>실행 파일 타겟 - 실행할 수 있는 프로그램 형태</li>\n <li>라이브러리 타겟 - 빌드나 실행시 실행 파일 타겟이 사용할 라이브러리</li>\n</ul>\n\n<h3 id=\"81-타겟-설정\">8.1 타겟 설정</h3>\n<p>*우선 <code class=\"language-plaintext highlighter-rouge\">catkin에서 빌드 타겟의 이름은 어느 폴더에 빌드/설치되느냐와 관계 없이 중복되지 않는 유일한 것이어야 한다. 이는 CMake의 규칙이다.* 타겟의 이름을 변경하고자 할때에는 아래와 같이 </code>set_target_properties()` 함수를 사용하면 된다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>set_target_properties<span class=\"o\">(</span>rviz_image_view\n                      PROPERTIES OUTPUT_NAME image_view\n                      PREFIX <span class=\"s2\">\"\"</span><span class=\"o\">)</span>\n</code></pre>  </div></div>\n<p>이 명령은 타겟의 이름이 <code class=\"language-plaintext highlighter-rouge\">rviz_image_view</code>에서 <code class=\"language-plaintext highlighter-rouge\">image_view</code>로 변경되어 빌드/설치 결과물에 반영된다.</p>\n\n<h3 id=\"82-출력-디렉토리-설정\">8.2 출력 디렉토리 설정</h3>\n<p>실행 파일과 라이브러리를 위한 기본 출력 디렉토리가 정해져 있으나 특별한 경우 이를 원하는 대로 수정할 수 있다. 예로 파이썬 바인딩이 필요한 라이브러리의 경우 파이썬 <code class=\"language-plaintext highlighter-rouge\">import</code>가 가능한 폴더에 위치해야 할 수 있다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>set_target_properties<span class=\"o\">(</span>python_module_library\n  PROPERTIES LIBRARY_OUTPUT_DIRECTORY <span class=\"k\">${</span><span class=\"nv\">CATKIN_DEVEL_PREFIX</span><span class=\"k\">}</span>/<span class=\"k\">${</span><span class=\"nv\">CATKIN_PACKAGE_PYTHON_DESTINATION</span><span class=\"k\">}</span><span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<h3 id=\"83-include-경로와-library-경로\">8.3 Include 경로와 Library 경로</h3>\n<p>타겟을 정의하기 전에 빌드에 필요한 헤더 파일이나 라이브러리 등의 경로에 대한 정보를 기술해 두어야 한다.</p>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">Include</code> 경로 - 코드 빌드를 위해 필요한 헤더 파일의 위치 지정</li>\n <li><code class=\"language-plaintext highlighter-rouge\">Library</code> 경로 - 실행 파일 타겟 빌드를 위해 필요한 라이브러리의 위치 지정</li>\n</ul>\n\n<h4 id=\"831-include_directories\">8.3.1 include_directories()</h4>\n<p><code class=\"language-plaintext highlighter-rouge\">include_directories()</code>의 인자는 앞서 <code class=\"language-plaintext highlighter-rouge\">find_package()</code> 호출 시 생성된 <code class=\"language-plaintext highlighter-rouge\">*_INCLUDE_DIRS</code> 환경 변수와 추가로 지정한 디렉토리 경로가 반영된다. 예를 들어, <code class=\"language-plaintext highlighter-rouge\">catkin</code>과 <code class=\"language-plaintext highlighter-rouge\">Boost</code>를 사용하는 경우, 아래와 같이 기술하면 된다. 여기서 맨 앞의 <code class=\"language-plaintext highlighter-rouge\">include</code>는 패키지 내부의 <code class=\"language-plaintext highlighter-rouge\">include</code> 폴더를 나타내며, 해당 경로를 추가해주어야 패키지 내부의 헤더파일들을 추가할 수 있다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>include_directories<span class=\"o\">(</span>include <span class=\"k\">${</span><span class=\"nv\">Boost_INCLUDE_DIRS</span><span class=\"k\">}</span> <span class=\"k\">${</span><span class=\"nv\">catkin_INCLUDE_DIRS</span><span class=\"k\">}</span><span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<h4 id=\"832-link_directories\">8.3.2 link_directories()</h4>\n<p>라이브러리 경로를 추가하기 위해 <code class=\"language-plaintext highlighter-rouge\">CMake</code>의 <code class=\"language-plaintext highlighter-rouge\">link_directories()</code> 함수를 사용할 수 있으나, 추천되는 방법은 아니다. 왜냐하면 <code class=\"language-plaintext highlighter-rouge\">find_package()</code> 실행 시 모든 <code class=\"language-plaintext highlighter-rouge\">catkin</code>과 <code class=\"language-plaintext highlighter-rouge\">CMake</code> 패키지를 위한 <code class=\"language-plaintext highlighter-rouge\">link</code> 정보를 얻게 되기 때문이다. <code class=\"language-plaintext highlighter-rouge\">target_link_libraries()</code>를 이용하여 라이브러리를 링크하면 된다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>link_directories<span class=\"o\">(</span>~/my_libs<span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<h3 id=\"84-실행-파일-추가\">8.4 실행 파일 추가</h3>\n<p>빌드 후 생성할 실행 파일을 추가하기 위해 <code class=\"language-plaintext highlighter-rouge\">add_executable()</code> 함수를 사용한다. 다음 예시는 <code class=\"language-plaintext highlighter-rouge\">src/main.cpp</code>, <code class=\"language-plaintext highlighter-rouge\">src/some_file.cpp</code>, <code class=\"language-plaintext highlighter-rouge\">src/another_file.cpp</code>을 참조하여 <code class=\"language-plaintext highlighter-rouge\">myProgram</code>이라는 실행파일을 생성한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>add_executable<span class=\"o\">(</span>myProgram src/main.cpp src/some_file.cpp src/another_file.cpp<span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<h3 id=\"85-라이브러리-타겟-추가\">8.5 라이브러리 타겟 추가</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">add_library()</code> 함수를 이용하여 빌드 후 생성할 라이브러리를 선언한다. 기본적으로 <code class=\"language-plaintext highlighter-rouge\">catkin</code>은 공유 라이브러리로 빌드한다. 다음 예시는 현재 패키지에 포함되어있는 소스 코드들을 참조하여 <code class=\"language-plaintext highlighter-rouge\">PROJECT_NAME</code>의 이름으로 라이브러리를 생성한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>add_library<span class=\"o\">(</span><span class=\"k\">${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"k\">}</span> <span class=\"k\">${${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"k\">}</span><span class=\"nv\">_SRCS</span><span class=\"k\">}</span><span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<h3 id=\"86-target_link_libraries\">8.6 target_link_libraries()</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">target_link_libraries()</code> 함수로 실행 파일 타겟과 링크될 라이브러리를 지정한다. 일반적으로 <code class=\"language-plaintext highlighter-rouge\">add_executable()</code> 또는 <code class=\"language-plaintext highlighter-rouge\">add_library()</code> 호출 이후에 위치하며, 만약 <code class=\"language-plaintext highlighter-rouge\">ros is not found</code> 라는 오류가 확인되면 <code class=\"language-plaintext highlighter-rouge\">${catkin_LIBRARIES}</code>를 추가한다.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>target_link_libraries<span class=\"o\">(</span>&lt;executableTargetName&gt;, &lt;lib1&gt;, &lt;lib2&gt;, ... &lt;libN&gt;<span class=\"o\">)</span>\n</code></pre>  </div></div>\n<p>여기서 <code class=\"language-plaintext highlighter-rouge\">&lt;executableTargetName&gt;</code>은 <code class=\"language-plaintext highlighter-rouge\">add_executable()</code> 또는 <code class=\"language-plaintext highlighter-rouge\">add_library()</code> 함수의 첫 번째 인자(<code class=\"language-plaintext highlighter-rouge\">executable name</code> or <code class=\"language-plaintext highlighter-rouge\">library name</code>)과 같다.</p>\n\n<h3 id=\"87-add_dependencies\">8.7 add_dependencies()</h3>\n<p>빌드하려는 패키지가 타겟하는 의존성 패키지에서 <code class=\"language-plaintext highlighter-rouge\">messages/services/actions</code>을 사용한다면, <code class=\"language-plaintext highlighter-rouge\">catkin_EXPORTED_TARGETS</code>에 대한 의존성을 추가해주어야 한다.(예시에서 <code class=\"language-plaintext highlighter-rouge\">some_target</code>은 <code class=\"language-plaintext highlighter-rouge\">add_executable()</code>로 설정한 실행 파일 타겟 이름이다)</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>add_dependencies<span class=\"o\">(</span>some_target <span class=\"k\">${</span><span class=\"nv\">catkin_EXPORTED_TARGETS</span><span class=\"k\">}</span><span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<p>또한 빌드하려는 패키지가 <code class=\"language-plaintext highlighter-rouge\">message/services/actions</code>을 사용한다면 역시 다음과 같이 의존성을 추가해주어야 한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>add_dependencies<span class=\"o\">(</span>some_target <span class=\"k\">${${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"k\">}</span><span class=\"nv\">_EXPORTED_TARGETS</span><span class=\"k\">}</span><span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<p>만약 두 가지의 경우 모두 해당한다면, 다음과 같이 사용하며, 대부분의 <code class=\"language-plaintext highlighter-rouge\">ROS</code> 패키지에서는 해당 함수를 사용하게 된다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>add_dependencies<span class=\"o\">(</span>some_target <span class=\"k\">${${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"k\">}</span><span class=\"nv\">_EXPORTED_TARGETS</span><span class=\"k\">}</span> <span class=\"k\">${</span><span class=\"nv\">catkin_EXPORTED_TARGETS</span><span class=\"k\">}</span><span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<h2 id=\"9-install\">9. install</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">workspace</code> 내의 <code class=\"language-plaintext highlighter-rouge\">build</code> 영역에 설치할 디렉토리를 설정한다. <code class=\"language-plaintext highlighter-rouge\">DIRECTORY</code> 인자 뒤에 설치할 디렉토리들을 선정하고, <code class=\"language-plaintext highlighter-rouge\">DESTINATION</code> 인자 뒤에는 설치 경로, 즉 공유할 경로를 설정하면 된다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">install</span><span class=\"o\">(</span>DIRECTORY launch rviz ...\n\tDESTINATION <span class=\"k\">${</span><span class=\"nv\">CATKIN_PACKAGE_SHARE_DESTINATION</span><span class=\"k\">}</span>\n<span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<p>실행 가능한 <code class=\"language-plaintext highlighter-rouge\">Python</code> 스크립트를 설치하는 경우에는 <code class=\"language-plaintext highlighter-rouge\">catkin_install_python()</code>을 사용한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>catkin_install_python<span class=\"o\">(</span>PROGRAMS scripts/test_script\n     DESTINATION <span class=\"k\">${</span><span class=\"nv\">CATKIN_PACKAGE_BIN_DESTINATION</span><span class=\"k\">}</span>\n<span class=\"o\">)</span>\n</code></pre>  </div></div>\n","dir":"/ROS1/Basic/","name":"0003CMakeList.md","path":"ROS1/Basic/0003CMakeList.md","url":"/ROS1/Basic/0003CMakeList.html"},{"sort":3,"layout":"default","title":"CMakeLists.txt","content":"<h1 id=\"cmakeliststxt\">CMakeLists.txt</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- <a href=\"https://docs.ros.org/en/foxy/Guides/Ament-CMake-Documentation.html\">ROS 2.0 foxy Ament CMake Documentation</a></em></p>\n\n<p><em>- <a href=\"https://cmake.org/\">CMake Main page</a></em></p>\n\n<p><em>- <a href=\"https://docs.ros.org/en/foxy/Contributing/Migration-Guide.html\">Migration Guide from ROS 1.0 to ROS 2.0</a></em></p>\n\n<h2 id=\"1-cmakeliststxt란\">1. CMakeLists.txt란?</h2>\n\n<p>해당 페이지는 ROS 1.0의 <code class=\"language-plaintext highlighter-rouge\">CMakeLists.txt</code>와 비교하며, <code class=\"language-plaintext highlighter-rouge\">ROS 2.0</code>의 <code class=\"language-plaintext highlighter-rouge\">CMakeLists.txt</code>의 특징과 세부사항에대해 기술하였다.</p>\n\n<h2 id=\"2-cmake-버전\">2. CMake 버전</h2>\n<p>패키지를 빌드하기 위해 최소로 필요한 <code class=\"language-plaintext highlighter-rouge\">CMake</code> 버전을 입력한다. <code class=\"language-plaintext highlighter-rouge\">ROS 1.0</code>의 <code class=\"language-plaintext highlighter-rouge\">catkin</code>에서는 최소 <code class=\"language-plaintext highlighter-rouge\">2.8.3</code> 이상을 필요로 하며, <code class=\"language-plaintext highlighter-rouge\">ROS 2.0</code>에서는 그보다 더 높은 버전인 <code class=\"language-plaintext highlighter-rouge\">3.5.0</code> 버전을 사용한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>cmake_minimum_required<span class=\"o\">(</span>VERSION 3.5.0<span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<h2 id=\"3-package-name\">3. Package Name</h2>\n<p>패키지 명을 <code class=\"language-plaintext highlighter-rouge\">project</code> 함수를 통해 전달한다. 현재 패키지의 폴더 명과 동일해야 한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>project<span class=\"o\">([</span>PACKAGE_NAME]<span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<h2 id=\"4-set-c-version\">4. Set C++ version</h2>\n\n<p>해당 명령은 <code class=\"language-plaintext highlighter-rouge\">ROS 1.0</code>보다는 <code class=\"language-plaintext highlighter-rouge\">ROS 2.0</code> 버전에서 고려되는 점으로, <code class=\"language-plaintext highlighter-rouge\">ROS 2.0</code>은 최소 <code class=\"language-plaintext highlighter-rouge\">C++ 14 standard</code> 를 기반으로 하기 때문에, 컴파일러가 <code class=\"language-plaintext highlighter-rouge\">C++ 14</code> 또는 그 이상의 버전으로 컴파일하도록 설정해주어야 한다.\n다음은 <code class=\"language-plaintext highlighter-rouge\">C++ 14 standard</code>로 컴파일되도록 설정하는 부분이다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span><span class=\"o\">(</span>NOT CMAKE_CXX_STANDARD<span class=\"o\">)</span>\n  <span class=\"nb\">set</span><span class=\"o\">(</span>CMAKE_CXX_STANDARD 14<span class=\"o\">)</span>\nendif<span class=\"o\">()</span>\n<span class=\"k\">if</span><span class=\"o\">(</span>CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES <span class=\"s2\">\"Clang\"</span><span class=\"o\">)</span>\n  add_compile_options<span class=\"o\">(</span><span class=\"nt\">-Wall</span> <span class=\"nt\">-Wextra</span> <span class=\"nt\">-Wpedantic</span><span class=\"o\">)</span>\nendif<span class=\"o\">()</span>\n</code></pre>  </div></div>\n\n<h2 id=\"5-빌드에-필요한-cmake-패키지-찾기\">5. 빌드에 필요한 CMake 패키지 찾기</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">find_package()</code> 함수를 이용하여 패키지 빌드를 위해 필요한 다른 의존 패키지들을 입력한다.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">ROS 2.0</code>의 경우 <code class=\"language-plaintext highlighter-rouge\">ament_cmake</code> 패키지를 통해 빌드되므로, <code class=\"language-plaintext highlighter-rouge\">ament_cmake</code> 패키지를 추가한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>find_package<span class=\"o\">(</span>ament_cmake REQUIRED<span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<p>또한, <code class=\"language-plaintext highlighter-rouge\">ROS 2.0</code>의 경우, <code class=\"language-plaintext highlighter-rouge\">ROS 1.0</code>과 다르게 <code class=\"language-plaintext highlighter-rouge\">COMPONENTS</code> 인자를 사용하지 않고, 각각의 패키지들을 다음 예시처럼 <code class=\"language-plaintext highlighter-rouge\">find_package()</code> 함수로 명시해주어야 한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>find_package<span class=\"o\">(</span>ament_cmake REQUIRED<span class=\"o\">)</span>\nfind_package<span class=\"o\">(</span>sensor_msgs REQUIRED<span class=\"o\">)</span>\nfind_package<span class=\"o\">(</span>tf2 REQUIRED<span class=\"o\">)</span>\n...\n</code></pre>  </div></div>\n\n<p>그 이외의 추가적으로 필요한 다른 의존성 패키지들을 추가하면 된다.</p>\n\n<h2 id=\"6-메세지-서비스-액션-타겟\">6. 메세지, 서비스, 액션 타겟</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">ROS 2.0</code>에서는 메세지, 서비스, 액션 타겟을 생성하기 위해서 <code class=\"language-plaintext highlighter-rouge\">rosidl_generate_interfaces()</code> 함수를 이용한다. 아래는 <code class=\"language-plaintext highlighter-rouge\">set()</code>함수를 이용해서 <code class=\"language-plaintext highlighter-rouge\">msg_files</code>, <code class=\"language-plaintext highlighter-rouge\">srv_files</code>, <code class=\"language-plaintext highlighter-rouge\">action_files</code>를 생성하여 추가하고, 다른 필요한 <code class=\"language-plaintext highlighter-rouge\">DEPENDENCIES</code>를 추가한 예제이다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># msg_files</span>\n<span class=\"nb\">set</span><span class=\"o\">(</span>msg_files\n  <span class=\"s2\">\"msg/[MessageName1].msg\"</span>\n  <span class=\"s2\">\"msg/[MessageName2].msg\"</span>\n  <span class=\"s2\">\"msg/[MessageName3].msg\"</span>\n  ...\n<span class=\"o\">)</span>\n<span class=\"c\"># srv_files</span>\n<span class=\"nb\">set</span><span class=\"o\">(</span>srv_files\n  <span class=\"s2\">\"srv/[ServiceName1].srv\"</span>\n  <span class=\"s2\">\"srv/[ServiceName2].srv\"</span>\n  <span class=\"s2\">\"srv/[ServiceName2].srv\"</span>\n  ...\n<span class=\"o\">)</span>\n<span class=\"c\"># action_files</span>\n<span class=\"nb\">set</span><span class=\"o\">(</span>action_files\n  <span class=\"s2\">\"action/[ActionName1].action\"</span>\n  <span class=\"s2\">\"action/[ActionName2].action\"</span>\n  <span class=\"s2\">\"action/[ActionName3].action\"</span>\n  ...\n<span class=\"o\">)</span>\n\nrosidl_generate_interfaces<span class=\"o\">(</span><span class=\"k\">${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"k\">}</span>\n  <span class=\"k\">${</span><span class=\"nv\">msg_files</span><span class=\"k\">}</span>\n  <span class=\"k\">${</span><span class=\"nv\">srv_files</span><span class=\"k\">}</span>\n  <span class=\"k\">${</span><span class=\"nv\">action_files</span><span class=\"k\">}</span>\n  DEPENDENCIES std_msgs ...\n<span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<p>또한, <code class=\"language-plaintext highlighter-rouge\">find_package()</code>함수를 이용하여 <code class=\"language-plaintext highlighter-rouge\">rosidl_default_generators</code>를 추가해야 한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>find_package<span class=\"o\">(</span>rosidl_default_generators REQUIRED<span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<h2 id=\"7-빌드-타겟-정의\">7. 빌드 타겟 정의</h2>\n<p>빌드 타겟은 라이브러리와 실행 파일을 빌드 타겟으로 정의할 수 있다. 라이브러리는 <code class=\"language-plaintext highlighter-rouge\">add_library()</code>함수로 정의하며, 실행 파일은 <code class=\"language-plaintext highlighter-rouge\">add_executable()</code>함수르 정의한다.</p>\n\n<h3 id=\"71-실행-파일-추가\">7.1 실행 파일 추가</h3>\n<p>빌드할 대상인 실행 파일을 추가하기 위해 <code class=\"language-plaintext highlighter-rouge\">add_executable()</code> 함수를 사용한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>add_executable<span class=\"o\">(</span>myProgram src/main.cpp src/위 예제는 3 개의 소스 파일<span class=\"o\">(</span>src/main.cpp, src/some_file.cpp, src/another_file.cpp<span class=\"o\">)</span>을 빌드하여 <span class=\"sb\">`</span>myProgram이라는 이름의 실행 파일을 만들어낸다.\n</code></pre>  </div></div>\n<p>위 예제는 3 개의 소스 파일(src/main.cpp, src/some_file.cpp, src/another_file.cpp)을 빌드하여 myProgram이라는 이름의 실행 파일을 만들어낸다.</p>\n\n<h3 id=\"72-라이브러리-타겟-추가\">7.2 라이브러리 타겟 추가</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">add_library()</code> 함수를 이용하여 빌드할 라이브러리를 기술한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>add_library<span class=\"o\">(</span><span class=\"k\">${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"k\">}</span> <span class=\"k\">${${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"k\">}</span><span class=\"nv\">_SRCS</span><span class=\"k\">}</span><span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<h3 id=\"73-헤더파일-추가\">7.3 헤더파일 추가</h3>\n<p>아래의 명령으로 빌드에 필요한 헤더파일들을 추가할 수 있으며, 그 이외에도 앞서 <code class=\"language-plaintext highlighter-rouge\">find_package()</code> 호출 시 생성된 <code class=\"language-plaintext highlighter-rouge\">*_INCLUDE_DIRS</code> 환경 변수를 통해 추가적인 헤더파일들을 추가할 수 있다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>target_include_directories<span class=\"o\">(</span>my_target\n  PUBLIC\n    <span class=\"nv\">$&lt;</span>BUILD_INTERFACE:<span class=\"k\">${</span><span class=\"nv\">CMAKE_CURRENT_SOURCE_DIR</span><span class=\"k\">}</span>/include&gt;\n    <span class=\"nv\">$&lt;</span>INSTALL_INTERFACE:include&gt;<span class=\"o\">)</span>\n    <span class=\"k\">${</span><span class=\"p\">[PACKAGE_NAME]_INCLUDE_DIRS</span><span class=\"k\">}</span>\n    ...\n</code></pre>  </div></div>\n\n<h3 id=\"74-dependencies-추가\">7.4 DEPENDENCIES 추가</h3>\n<p>의존성 추가 방법에는 <code class=\"language-plaintext highlighter-rouge\">ament_target_dependencies()</code> 함수를 이용하는 방법과 <code class=\"language-plaintext highlighter-rouge\">target_link_libraries()</code> 함수를 이용하는 방법이 있다. 의존성 추가를 위해, 앞서 <code class=\"language-plaintext highlighter-rouge\">find_package()</code>를 통해 의존성을 추가할 패키지를 추가해야 한다.</p>\n\n<p>우선, <code class=\"language-plaintext highlighter-rouge\">ament</code> 매크로인 <code class=\"language-plaintext highlighter-rouge\">ament_target_dependencies()</code>는 의존성이 필요한 헤더, 라이브러리 및 그와 관련된 <code class=\"language-plaintext highlighter-rouge\">dependencies</code>들을 가져온다. 다음은 <code class=\"language-plaintext highlighter-rouge\">my_target</code>이라는 <code class=\"language-plaintext highlighter-rouge\">link</code> 이름에 <code class=\"language-plaintext highlighter-rouge\">Eigen3</code>의 의존성을 추가하는 방법이다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>find_package<span class=\"o\">(</span>Eigen3 REQUIRED<span class=\"o\">)</span>\nament_target_dependencies<span class=\"o\">(</span>my_target Eigen3<span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<p>다음으로 <code class=\"language-plaintext highlighter-rouge\">target_link_libraries()</code>는 라이브러리의 <code class=\"language-plaintext highlighter-rouge\">namespace</code>를 명명한다. 다음은 <code class=\"language-plaintext highlighter-rouge\">my_target</code>이라는 <code class=\"language-plaintext highlighter-rouge\">link</code> 이름에 <code class=\"language-plaintext highlighter-rouge\">Eigen3</code>의 의존성을 추가하는 방법이다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>find_package<span class=\"o\">(</span>Eigen3 REQUIRED<span class=\"o\">)</span>\ntarget_link_libraries<span class=\"o\">(</span>my_target Eigen3::Eigen<span class=\"o\">)</span>\n</code></pre>  </div></div>\n<p><code class=\"language-plaintext highlighter-rouge\">ament_target_dependencies()</code>는 모든 <code class=\"language-plaintext highlighter-rouge\">dependency</code>의 순서가 올바르게 지정되지만, <code class=\"language-plaintext highlighter-rouge\">target_link_libraries()</code>는 <code class=\"language-plaintext highlighter-rouge\">dependency</code>의 순서가 올바르지 않을 수도 있다.</p>\n\n<p>그리고, <code class=\"language-plaintext highlighter-rouge\">ament package</code>가 아닌 경우에는 <code class=\"language-plaintext highlighter-rouge\">target_link_libraries()</code>를 이용해 라이브러리를 추가해야 한다. 물론, <code class=\"language-plaintext highlighter-rouge\">ament package</code>가 있는 경우에도, <code class=\"language-plaintext highlighter-rouge\">ROS 1.0</code>에서처럼 다음의 방법으로 추가할 수 있다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>target_link_libraries<span class=\"o\">(</span>target <span class=\"k\">${</span><span class=\"nv\">Boost_LIBRARIES</span><span class=\"k\">}</span><span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<h2 id=\"8-install\">8. install</h2>\n<p>다음 예시는 <code class=\"language-plaintext highlighter-rouge\">workspace</code> 내의 <code class=\"language-plaintext highlighter-rouge\">install</code> 폴더에 설치할 디렉토리를 설정한다. <code class=\"language-plaintext highlighter-rouge\">DIRECTORY</code> 인자 뒤에 설치할 디렉토리들을 선정하고, <code class=\"language-plaintext highlighter-rouge\">DESTINATION</code> 인자 뒤에는 설치 경로, 즉 공유할 경로를 설정하면 된다.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">install</span><span class=\"o\">(</span>\n  DIRECTORY include/\n  DESTINATION include\n<span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<p>다음 예시는 <code class=\"language-plaintext highlighter-rouge\">install</code> 함수를 이용하여 라이브러리를 설치하는 명령이다. <code class=\"language-plaintext highlighter-rouge\">ARCHIVE</code> 및 <code class=\"language-plaintext highlighter-rouge\">LIBRARY</code> 파일은 <code class=\"language-plaintext highlighter-rouge\">lib</code> 폴더에 설치되고, <code class=\"language-plaintext highlighter-rouge\">RUNTIME binary</code> 파일은 <code class=\"language-plaintext highlighter-rouge\">bin</code> 폴더에 설치되며, 설치된 헤더의 경로가 포함된다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">install</span><span class=\"o\">(</span>\n  TARGETS my_library\n  EXPORT export_my_library\n  LIBRARY DESTINATION lib\n  ARCHIVE DESTINATION lib\n  RUNTIME DESTINATION bin\n  INCLUDES DESTINATION include\n<span class=\"o\">)</span>\n</code></pre>  </div></div>\n","dir":"/ROS2/Basic/","name":"0003CMakeList.md","path":"ROS2/Basic/0003CMakeList.md","url":"/ROS2/Basic/0003CMakeList.html"},{"sort":4,"layout":"default","title":"initializer_list","content":"<h1 id=\"initializer_list\">initializer_list</h1>\n\n<ul>\n <li>참고문헌 : 전문가를 위한 C++(마크 그레고리 / 한빛미디어)</li>\n</ul>\n\n<p>이니셜라이저 리스트(<code class=\"language-plaintext highlighter-rouge\">initializer_list</code>)는 <code class=\"language-plaintext highlighter-rouge\">&lt;initializer_list&gt;</code> 헤더 파일에 정의되어 있으며, 이를 활용하여 여러 인수를 받는 함수를 작성할 수 있음.</p>\n\n<p>다음 예제는 <code class=\"language-plaintext highlighter-rouge\">makeSum()</code> 함수가 정수에 대한 이니셜라이저 리스트를 인수로 받는다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;initializer_list&gt;\n</span>\n<span class=\"kt\">int</span> <span class=\"nf\">makeSum</span><span class=\"p\">(</span><span class=\"n\">initializer_list</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">lst</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">lst</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">total</span> <span class=\"o\">+=</span> <span class=\"n\">value</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">total</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<p>위에서 정의한 <code class=\"language-plaintext highlighter-rouge\">makeSum()</code> 함수를 호출하는 방법은 다음과 같다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">makeSum</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">});</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>이니셜라이저 리스트는 타입에 안전하다.</li>\n <li>이니셜라이저 리스트를 정의할 때는 지정한 타입만 허용한다.</li>\n</ul>\n","dir":"/C++/Grammer/","name":"0004Initializer-list.md","path":"C++/Grammer/0004Initializer-list.md","url":"/C++/Grammer/0004Initializer-list.html"},{"sort":4,"permalink":"/Github/","layout":"default","title":"GITHUB","content":"<h1 id=\"github\">GITHUB</h1>\n\n","dir":"/Github/","name":"README.md","path":"Github/README.md","url":"/Github/"},{"sort":4,"layout":"default","title":"Package.xml","content":"<h1 id=\"packagexml\">Package.xml</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- Programming Robots with ROS(Morgan Quigley, Brian Gerkey, William D. Smart)</em></p>\n\n<p><em>- <a href=\"https://wiki.ros.org/catkin/conceptual_overview\">catkin overview ros wiki pages</a></em></p>\n\n<h2 id=\"1-catkin-이란\">1. Catkin 이란?</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">catkin</code>은 <code class=\"language-plaintext highlighter-rouge\">ROS</code>에 사용되는 실행 프로그램, 라이브러리, 스크립트 및 다른 코드에서 사용할 인터페이스를 생성할 수 있도록 하는 <code class=\"language-plaintext highlighter-rouge\">ROS</code> 빌드 시스템이다. <code class=\"language-plaintext highlighter-rouge\">catkin</code>은 <code class=\"language-plaintext highlighter-rouge\">CMake</code> 매크로들과 일반적인 <code class=\"language-plaintext highlighter-rouge\">CMake</code> workflow에 추가적인 기능을 제공하기 위한 전용 파이썬 스크립트로 구성된다.</p>\n\n<h2 id=\"2-ros-프로젝트를-진행하며-자주-사용한-catkin-cli\">2. ROS 프로젝트를 진행하며 자주 사용한 catkin CLI</h2>\n<p>다음은 <code class=\"language-plaintext highlighter-rouge\">ROS</code> 프로젝트를 진행하면서 주로 사용되는 <code class=\"language-plaintext highlighter-rouge\">command line arguments</code>를 정리하였다.</p>\n\n<ul>\n <li>\n <p><code class=\"language-plaintext highlighter-rouge\">catkin_create_pkg [package_name] [dependency_package1] [dependency_package2] ...</code>\n<code class=\"language-plaintext highlighter-rouge\">ROS</code> 패키지를 생성하는 명령으로, <code class=\"language-plaintext highlighter-rouge\">package_name</code>으로 패키지를 생성하며, <code class=\"language-plaintext highlighter-rouge\">CMakeLists.txt</code>와 <code class=\"language-plaintext highlighter-rouge\">package.xml</code>을 포함한 패키지 폴더를 생성한다. 이 때, 패키지 이름은 모두 소문자를 사용해야하며, 공백이 있으면 안된다.</p>\n </li>\n <li>\n <p><code class=\"language-plaintext highlighter-rouge\">catkin_make</code>\n<code class=\"language-plaintext highlighter-rouge\">catkin</code> 빌드 명령어로, <code class=\"language-plaintext highlighter-rouge\">workspace</code> 위치에서 해당 명령어로 <code class=\"language-plaintext highlighter-rouge\">workspace</code> 내부에 있는 패키지들을 빌드할 수 있다.</p>\n </li>\n</ul>\n","dir":"/ROS1/Basic/","name":"0004Package-xml.md","path":"ROS1/Basic/0004Package-xml.md","url":"/ROS1/Basic/0004Package-xml.html"},{"sort":4,"layout":"default","title":"Package.xml","content":"<h1 id=\"packagexml\">Package.xml</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- <a href=\"https://docs.ros.org/en/foxy/Tutorials/Creating-Your-First-ROS2-Package.html\">ROS 2.0 package creating tutorials</a></em></p>\n\n<p><em>- <a href=\"https://www.ros.org/reps/rep-0149.html\">REP 149</a></em></p>\n\n<h2 id=\"1-packagexml\">1. package.xml</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">package.xml</code> 파일은 패키지의 정보를 담은 <code class=\"language-plaintext highlighter-rouge\">XML</code> 파일이다. 패키지의 이름, 저작자, 라이선스, 의존성 패키지 등의 정보를 담고 있다.</p>\n\n<h2 id=\"2-packagexml-포맷\">2. package.xml 포맷</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">ROS 2.0</code>에서 포맷 3을 사용한다. 다음은 포맷 3의 기본적인 형태이다.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;?xml <span class=\"nv\">version</span><span class=\"o\">=</span><span class=\"s2\">\"1.0\"</span>?&gt;\n&lt;?xml-model\n  <span class=\"nv\">href</span><span class=\"o\">=</span><span class=\"s2\">\"http://download.ros.org/schema/package_format3.xsd\"</span>\n  <span class=\"nv\">schematypens</span><span class=\"o\">=</span><span class=\"s2\">\"http://www.w3.org/2001/XMLSchema\"</span>?&gt;\n&lt;package <span class=\"nv\">format</span><span class=\"o\">=</span><span class=\"s2\">\"3\"</span><span class=\"o\">&gt;</span>\n&lt;name&gt;my_package&lt;/name&gt;\n&lt;version&gt;0.0.0&lt;/version&gt;\n&lt;description&gt;TODO: Package description&lt;/description&gt;\n&lt;maintainer <span class=\"nv\">email</span><span class=\"o\">=</span><span class=\"s2\">\"user@todo.todo\"</span><span class=\"o\">&gt;</span>user&lt;/maintainer&gt;\n&lt;license&gt;TODO: License declaration&lt;/license&gt;\n\n&lt;buildtool_depend&gt;ament_cmake&lt;/buildtool_depend&gt;\n\n&lt;test_depend&gt;ament_lint_auto&lt;/test_depend&gt;\n&lt;test_depend&gt;ament_lint_common&lt;/test_depend&gt;\n\n&lt;<span class=\"nb\">export</span><span class=\"o\">&gt;</span>\n  &lt;build_type&gt;ament_cmake&lt;/build_type&gt;\n&lt;/export&gt;\n&lt;/package&gt;\n</code></pre>  </div></div>\n\n<h2 id=\"3-패키지-정보\">3. 패키지 정보</h2>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;?xm version=\"1.0?&gt;</code> : <code class=\"language-plaintext highlighter-rouge\">xml</code> 버전을 명시. 보통 <code class=\"language-plaintext highlighter-rouge\">1.0</code>을 사용한다.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;package format=\"3\"&gt;</code>: <code class=\"language-plaintext highlighter-rouge\">format 3</code>형태의 <code class=\"language-plaintext highlighter-rouge\">ROS</code> 패키지 설정 부분</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;name&gt;</code> : 패키지 이름 명시</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;version&gt;</code> : 패키지의 버전. 패키지를 release 하게 된다면, 버전 관리도 중요하다.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;description&gt;</code> : 패키지에 대한 간략한 설명</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;maintainer&gt;</code> : 패키지 관리자의 이름과 이메일 주소 기재</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;license&gt;</code> : 패키지의 라이센스 기재.(BSD, MIT, Apache, …)</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;url&gt;</code> : 패키지와 관련된 url 기재.(깃북, 저장소, 웹페이지, …)</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;author&gt;</code> : 패키지 개발에 참여한 개발자들의 이름과 이메일 주소 기재</li>\n</ul>\n\n<h2 id=\"4-dependency\">4. Dependency</h2>\n<p>패키지의 의존성과 관련된 사항을 명시하는 부분이다.</p>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;buildtool_depend&gt;</code> : 빌드 시스템의 의존성 기술. <code class=\"language-plaintext highlighter-rouge\">ROS 2.0</code>은 <code class=\"language-plaintext highlighter-rouge\">ament_cmake</code> 빌드 시스템을 사용하므로, <code class=\"language-plaintext highlighter-rouge\">ament_cmake</code> 입력</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;depend&gt;</code> : 반복을 피하기위해 사용되며, <code class=\"language-plaintext highlighter-rouge\">&lt;build_depend&gt;</code>, <code class=\"language-plaintext highlighter-rouge\">&lt;build_export_depend&gt;</code>, <code class=\"language-plaintext highlighter-rouge\">&lt;exec_depend&gt;</code>의 기능을 모두 합친 명령으로, 반복적으로 같은 패키지를 명시하는 것을 피하기 위해 사용된다.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;build_depend&gt;</code> : 패키지 빌드 시 필요한 의존성 패키지 추가</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;build_export_depend&gt;</code> : 현재 패키지의 의존성 패키지가 다른 패키지의 빌드시 필요한 의존성 패키지인 경우 추가</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;exec_depend&gt;</code> : 패키지 실행 시 필요한 의존성 패키지 추가</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;test_depend&gt;</code> : 패키지 테스트 시 필요한 의존성 패키지 추가</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;doc_depend&gt;</code> : 문서 파일을 빌드하는데 필요한 의존성 패키지 추가</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;conflict&gt;</code> : 패키지와 충돌하는 패키지 추가</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;replace&gt;</code> : 현재 패키지로 대체할 수 있는 패키지 명시</li>\n</ul>\n\n<h2 id=\"5-export\">5. export</h2>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;export&gt;</code> : ROS에서 명시하지 않은 태그명을 사용할 때 사용, 다양한 패키지 및 서브시스템의 추가 정보를 명시한다. 이 때, 태그의 이름이 해당 태그를 처리하는 패키지와 동일해야 한다. 특히, ROS 2.0 에서는 <code class=\"language-plaintext highlighter-rouge\">&lt;build_type&gt;</code>을 항상 명시한다.</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># build_type</span>\n&lt;<span class=\"nb\">export</span><span class=\"o\">&gt;</span>\n  &lt;build_type&gt;ament_cmake&lt;/build_type&gt;\n&lt;/export&gt;\n\n<span class=\"c\"># rviz 태그의 plugin 명시</span>\n&lt;<span class=\"nb\">export</span><span class=\"o\">&gt;</span>\n  &lt;rviz <span class=\"nv\">plugin</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">prefix</span><span class=\"k\">}</span><span class=\"s2\">/plugin_description.xml\"</span>/&gt;\n&lt;/export&gt;\n\n<span class=\"c\"># gazebo_ros 태그의 모델 경로 명시</span>\n&lt;<span class=\"nb\">export</span><span class=\"o\">&gt;</span>\n  &lt;gazebo_ros <span class=\"nv\">gazebo_model_path</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">prefix</span><span class=\"k\">}</span><span class=\"s2\">/models\"</span>/&gt;\n&lt;/export&gt;\n</code></pre>  </div></div>\n","dir":"/ROS2/Basic/","name":"0004Package-xml.md","path":"ROS2/Basic/0004Package-xml.md","url":"/ROS2/Basic/0004Package-xml.html"},{"sort":5,"layout":"default","title":"범위 기반 for 문","content":"<h1 id=\"범위-기반-for-문\">범위 기반 for 문</h1>\n\n<ul>\n <li>참고문헌 : 전문가를 위한 C++(마크 그레고리 / 한빛미디어)</li>\n</ul>\n\n<p>범위 기반 <code class=\"language-plaintext highlighter-rouge\">for</code>문(range-based for statement)은 컨테이너에 담긴 원소에 대해 반복문을 실행하는데 주로 사용된다. <code class=\"language-plaintext highlighter-rouge\">C</code> 스타일의 루프, <a href=\"/c++/Cpp-switch-initializer/\">이니셜라이저 리스트(<code class=\"language-plaintext highlighter-rouge\">initializer_list</code>)</a>, <code class=\"language-plaintext highlighter-rouge\">std::array</code>, <code class=\"language-plaintext highlighter-rouge\">std::vector</code>, 표준 라이브러리에서 제공하는 컨테이너처럼 반복자를 리턴하는 <code class=\"language-plaintext highlighter-rouge\">begin()</code>/<code class=\"language-plaintext highlighter-rouge\">end()</code> 메서드가 정의된 모든 타입에 적용할 수 있다.</p>\n\n<p>다음 예제는 범위 기반 for문을 돌면서 배열의 모든 원소에 대한 복제본을 출력한다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">array</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"o\">&gt;</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">};</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">arr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n","dir":"/C++/Grammer/","name":"0005Range-based-for-statement.md","path":"C++/Grammer/0005Range-based-for-statement.md","url":"/C++/Grammer/0005Range-based-for-statement.html"},{"sort":5,"permalink":"/Linux/","layout":"default","title":"Linux","content":"<h1 id=\"linux\">Linux</h1>\n\n<ul>\n <li><a href=\"/Linux/Command/\">Command</a>\n <ul>\n <li><a href=\"/Linux/Command/Command.html\">Command</a></li>\n </ul>\n </li>\n</ul>\n","dir":"/Linux/","name":"README.md","path":"Linux/README.md","url":"/Linux/"},{"sort":5,"layout":"default","title":"Launch System","content":"<h1 id=\"launch-system\">Launch System</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- ROS 로봇 프로그래밍(표윤석, 조한철, 정려운, 임태훈)</em></p>\n\n<p><em>- <a href=\"http://wiki.ros.org/roslaunch/Commandline%20Tools\">ROS wiki (roslaunch / Commandline Tools)</a></em></p>\n\n<p><em>- <a href=\"http://wiki.ros.org/roslaunch/XML\">ROS wiki (roslaunch / XML)</a></em></p>\n\n<h2 id=\"1-launch-system\">1. Launch system</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">Launch</code>는 복수의 노드를 함께 실행시키도록 하며, 노드 간의 메시지를 주고받을 수 있게 한다. 이 때, 노드를 실행할 때 패키지의 매개변수나 노드 이름, 노드 네임스페이스, 환경변수 변경 등을 설정할 수 있다.</p>\n\n<h2 id=\"2-launch-파일의-종류\">2. Launch 파일의 종류</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">ROS 1.0</code>에서는 <code class=\"language-plaintext highlighter-rouge\">XML</code> 형태를 기반으로 한 <code class=\"language-plaintext highlighter-rouge\">.launch</code> 파일을 사용한다.</p>\n\n<h2 id=\"3-launch-태그\">3. Launch 태그</h2>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;launch&gt;</code> : roslaunch 구분의 시작과 끝을 나타냄</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;node&gt;</code> : 노드 실행에 대한 태그. 패키지(<code class=\"language-plaintext highlighter-rouge\">pkg</code>), 실행 시 노드명(<code class=\"language-plaintext highlighter-rouge\">name</code>), 패키지 내 실행 파일의 이름(<code class=\"language-plaintext highlighter-rouge\">type</code>, <code class=\"language-plaintext highlighter-rouge\">exec</code>), 로그 출력(<code class=\"language-plaintext highlighter-rouge\">output</code>) 등을 설정</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;machine&gt;</code> : 노드를 실행하는 PC의 이름. address, ros-root, ros-package-path 등 설정</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;include&gt;</code> : 다른 패키지나 같은 패키지에 속해 있는 다른 launch를 불러옴</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;remap&gt;</code> : 노드 이름, 토픽 이름 등의 노드에서 사용 중인 ROS 변수의 이름 변경</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;env&gt;</code> : 경로, IP 등의 환경변수를 설정</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;param&gt;</code> : 파라미터 이름, 타이프, 값 등을 설정</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;rosparam&gt;</code> : rosparam 명령과 같이, load, dump, delete 등 파라미터 정보를 확인 및 수정</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;group&gt;</code> : 노드 그룹화</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;test&gt;</code> : 노드 테스트할 때 사용</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;arg&gt;</code> : launch 파일 내 변수 정의</li>\n</ul>\n","dir":"/ROS1/Basic/","name":"0005Launch-System.md","path":"ROS1/Basic/0005Launch-System.md","url":"/ROS1/Basic/0005Launch-System.html"},{"sort":5,"layout":"default","title":"Launch System","content":"<h1 id=\"launch-system\">Launch System</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- ROS 2로 시작하는 로봇 프로그래밍(표윤석, 임태훈)</em></p>\n\n<p><em>- <a href=\"https://docs.ros.org/en/foxy/Tutorials/Launch-Files/Creating-Launch-Files.html\">ROS 2.0 foxy Doc(Creating a launch file)</a></em></p>\n\n<p><em>- <a href=\"https://docs.ros.org/en/foxy/Guides/Launch-file-different-formats.html\">ROS 2.0 foxy Doc(Using Python, XML, and YAML for ROS 2 Launch Files)</a></em></p>\n\n<h2 id=\"1-launch-system\">1. Launch system</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">Launch</code>는 복수의 노드를 함께 실행시키도록 하며, 노드 간의 메시지를 주고받을 수 있게 한다. 이 때, 노드를 실행할 때 패키지의 매개변수나 노드 이름, 노드 네임스페이스, 환경변수 변경 등을 설정할 수 있다.</p>\n\n<h2 id=\"2-launch-파일의-종류\">2. Launch 파일의 종류</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">ROS 2.0</code>에서 사용하는 <code class=\"language-plaintext highlighter-rouge\">launch</code> 파일에는 <code class=\"language-plaintext highlighter-rouge\">.launch.py</code> 형태와 ROS 1.0과 같은 <code class=\"language-plaintext highlighter-rouge\">XML</code> 형태와 마지막으로 <code class=\"language-plaintext highlighter-rouge\">YAML</code> 형태가 있다.</p>\n\n<h2 id=\"3-launchpy-작성\">3. .launch.py 작성</h2>\n<p>다음은 turtlebot3의 <a href=\"https://github.com/ROBOTIS-GIT/turtlebot3/blob/foxy-devel/turtlebot3_navigation2/launch/navigation2.launch.py\">navigation2.launch.py</a>를 가져왔다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Copyright 2019 Open Source Robotics Foundation, Inc.</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># Licensed under the Apache License, Version 2.0 (the \"License\");</span>\n<span class=\"c\"># you may not use this file except in compliance with the License.</span>\n<span class=\"c\"># You may obtain a copy of the License at</span>\n<span class=\"c\">#</span>\n<span class=\"c\">#     http://www.apache.org/licenses/LICENSE-2.0</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># Unless required by applicable law or agreed to in writing, software</span>\n<span class=\"c\"># distributed under the License is distributed on an \"AS IS\" BASIS,</span>\n<span class=\"c\"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>\n<span class=\"c\"># See the License for the specific language governing permissions and</span>\n<span class=\"c\"># limitations under the License.</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># Author: Darby Lim</span>\n\nimport os\n\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch.actions import DeclareLaunchArgument\nfrom launch.actions import IncludeLaunchDescription\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nfrom launch.substitutions import LaunchConfiguration\nfrom launch_ros.actions import Node\n\nTURTLEBOT3_MODEL <span class=\"o\">=</span> os.environ[<span class=\"s1\">'TURTLEBOT3_MODEL'</span><span class=\"o\">]</span>\n\n\ndef generate_launch_description<span class=\"o\">()</span>:\n    use_sim_time <span class=\"o\">=</span> LaunchConfiguration<span class=\"o\">(</span><span class=\"s1\">'use_sim_time'</span>, <span class=\"nv\">default</span><span class=\"o\">=</span><span class=\"s1\">'false'</span><span class=\"o\">)</span>\n    map_dir <span class=\"o\">=</span> LaunchConfiguration<span class=\"o\">(</span>\n        <span class=\"s1\">'map'</span>,\n        <span class=\"nv\">default</span><span class=\"o\">=</span>os.path.join<span class=\"o\">(</span>\n            get_package_share_directory<span class=\"o\">(</span><span class=\"s1\">'turtlebot3_navigation2'</span><span class=\"o\">)</span>,\n            <span class=\"s1\">'map'</span>,\n            <span class=\"s1\">'turtlebot3_world.yaml'</span><span class=\"o\">))</span>\n\n    param_file_name <span class=\"o\">=</span> TURTLEBOT3_MODEL + <span class=\"s1\">'.yaml'</span>\n    param_dir <span class=\"o\">=</span> LaunchConfiguration<span class=\"o\">(</span>\n        <span class=\"s1\">'params_file'</span>,\n        <span class=\"nv\">default</span><span class=\"o\">=</span>os.path.join<span class=\"o\">(</span>\n            get_package_share_directory<span class=\"o\">(</span><span class=\"s1\">'turtlebot3_navigation2'</span><span class=\"o\">)</span>,\n            <span class=\"s1\">'param'</span>,\n            param_file_name<span class=\"o\">))</span>\n\n    nav2_launch_file_dir <span class=\"o\">=</span> os.path.join<span class=\"o\">(</span>get_package_share_directory<span class=\"o\">(</span><span class=\"s1\">'nav2_bringup'</span><span class=\"o\">)</span>, <span class=\"s1\">'launch'</span><span class=\"o\">)</span>\n\n    rviz_config_dir <span class=\"o\">=</span> os.path.join<span class=\"o\">(</span>\n        get_package_share_directory<span class=\"o\">(</span><span class=\"s1\">'nav2_bringup'</span><span class=\"o\">)</span>,\n        <span class=\"s1\">'rviz'</span>,\n        <span class=\"s1\">'nav2_default_view.rviz'</span><span class=\"o\">)</span>\n\n    <span class=\"k\">return </span>LaunchDescription<span class=\"o\">([</span>\n        DeclareLaunchArgument<span class=\"o\">(</span>\n            <span class=\"s1\">'map'</span>,\n            <span class=\"nv\">default_value</span><span class=\"o\">=</span>map_dir,\n            <span class=\"nv\">description</span><span class=\"o\">=</span><span class=\"s1\">'Full path to map file to load'</span><span class=\"o\">)</span>,\n\n        DeclareLaunchArgument<span class=\"o\">(</span>\n            <span class=\"s1\">'params_file'</span>,\n            <span class=\"nv\">default_value</span><span class=\"o\">=</span>param_dir,\n            <span class=\"nv\">description</span><span class=\"o\">=</span><span class=\"s1\">'Full path to param file to load'</span><span class=\"o\">)</span>,\n\n        DeclareLaunchArgument<span class=\"o\">(</span>\n            <span class=\"s1\">'use_sim_time'</span>,\n            <span class=\"nv\">default_value</span><span class=\"o\">=</span><span class=\"s1\">'false'</span>,\n            <span class=\"nv\">description</span><span class=\"o\">=</span><span class=\"s1\">'Use simulation (Gazebo) clock if true'</span><span class=\"o\">)</span>,\n\n        IncludeLaunchDescription<span class=\"o\">(</span>\n            PythonLaunchDescriptionSource<span class=\"o\">([</span>nav2_launch_file_dir, <span class=\"s1\">'/bringup_launch.py'</span><span class=\"o\">])</span>,\n            <span class=\"nv\">launch_arguments</span><span class=\"o\">={</span>\n                <span class=\"s1\">'map'</span>: map_dir,\n                <span class=\"s1\">'use_sim_time'</span>: use_sim_time,\n                <span class=\"s1\">'params_file'</span>: param_dir<span class=\"o\">}</span>.items<span class=\"o\">()</span>,\n        <span class=\"o\">)</span>,\n\n        Node<span class=\"o\">(</span>\n            <span class=\"nv\">package</span><span class=\"o\">=</span><span class=\"s1\">'rviz2'</span>,\n            <span class=\"nv\">executable</span><span class=\"o\">=</span><span class=\"s1\">'rviz2'</span>,\n            <span class=\"nv\">name</span><span class=\"o\">=</span><span class=\"s1\">'rviz2'</span>,\n            <span class=\"nv\">arguments</span><span class=\"o\">=[</span><span class=\"s1\">'-d'</span>, rviz_config_dir],\n            <span class=\"nv\">parameters</span><span class=\"o\">=[{</span><span class=\"s1\">'use_sim_time'</span>: use_sim_time<span class=\"o\">}]</span>,\n            <span class=\"nv\">output</span><span class=\"o\">=</span><span class=\"s1\">'screen'</span><span class=\"o\">)</span>,\n    <span class=\"o\">])</span>\n</code></pre>  </div></div>\n\n<h3 id=\"31-generate_launch_description\">3.1 generate_launch_description</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">launch</code> 파일을 작성하는데, <code class=\"language-plaintext highlighter-rouge\">generate_launch_description</code> 메소드를 기본적으로 사용한다. 해당 메소드는 <code class=\"language-plaintext highlighter-rouge\">LaunchConfiguration</code> 클래스를 이용하여 실행 관련 설정을 초기화하고, 리턴값으로 <code class=\"language-plaintext highlighter-rouge\">LaunchDescription</code> 클래스를 반환한다.</p>\n\n<h3 id=\"32-launchconfiguration\">3.2 LaunchConfiguration</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">LaunchConfiguration</code> 클래스는 <code class=\"language-plaintext highlighter-rouge\">LaunchDescription</code>에서 사용할 인자들을 생성하고 초기화시킨다.</p>\n\n<h3 id=\"33-declarelaunchargument\">3.3 DeclareLaunchArgument</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">DeclareLaunchArgument</code> 클래스는 <code class=\"language-plaintext highlighter-rouge\">LaunchConfiguration</code>으로 설정한 변수를 <code class=\"language-plaintext highlighter-rouge\">launch</code> 인자로 선언한다.</p>\n\n<h3 id=\"34-node\">3.4 Node</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">Node</code> 클래스는 실행할 노드를 설정한다. 기본적으로 <code class=\"language-plaintext highlighter-rouge\">package</code>, <code class=\"language-plaintext highlighter-rouge\">executable</code>, <code class=\"language-plaintext highlighter-rouge\">name</code>, <code class=\"language-plaintext highlighter-rouge\">parameters</code>, <code class=\"language-plaintext highlighter-rouge\">output</code>을 설정하며, 필요에 따라 <code class=\"language-plaintext highlighter-rouge\">remappings</code>, <code class=\"language-plaintext highlighter-rouge\">namespace</code>를 사용할 수 있다.</p>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">package</code> : 실행할 패키지 이름</li>\n <li><code class=\"language-plaintext highlighter-rouge\">executable</code> : 실행 가능한 노드의 이름</li>\n <li><code class=\"language-plaintext highlighter-rouge\">name</code> : 지정한 노드를 실행할 때 실제로 사용할 이름</li>\n <li><code class=\"language-plaintext highlighter-rouge\">parameters</code> : 특정 파라미터 값 또는 <code class=\"language-plaintext highlighter-rouge\">DeclareLaunchArgument</code>에서 지정한 변수 등 사용할 파라미터(파라미터가 여러 개일 때 <code class=\"language-plaintext highlighter-rouge\">{}</code> 단위로 구분)</li>\n <li><code class=\"language-plaintext highlighter-rouge\">output</code> : 로깅 설정. 기본적으로 특정 파일 이름(~/.ros/log/xxx/launch.log)에 로깅 정보가 기록되고, <code class=\"language-plaintext highlighter-rouge\">screen</code>으로 지정하면 터미널 창에 출력됨.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">remappings</code> : 토픽의 이름을 변경할 수 있음.\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>...\n      Node<span class=\"o\">(</span>\n        ...\n        <span class=\"nv\">remappings</span><span class=\"o\">=[</span>\n          <span class=\"o\">(</span><span class=\"s1\">'/cmd_vel'</span>, <span class=\"s1\">'/my_cmd_vel'</span><span class=\"o\">)</span>,\n        <span class=\"o\">]</span>\n        ...\n      <span class=\"o\">)</span>\n...\n</code></pre>  </div> </div>\n </li>\n <li>namespace : 노드, 토픽, 서비스, 액션, 파라미터 등의 접두사 추가\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>...\ndef generate_launch_description<span class=\"o\">()</span>:\n  my_robot <span class=\"o\">=</span> LaunchConfiguration<span class=\"o\">(</span><span class=\"s1\">'my_robot'</span><span class=\"o\">)</span>\n\n  <span class=\"k\">return </span>LaunchDescription<span class=\"o\">([</span>\n      ...\n      Node<span class=\"o\">(</span>\n        ...\n        <span class=\"nv\">namespace</span><span class=\"o\">=</span>my_robot,\n        ...\n      <span class=\"o\">)</span>\n      ...\n  <span class=\"o\">])</span>\n</code></pre>  </div> </div>\n </li>\n</ul>\n\n<h3 id=\"35-add_action\">3.5 add_action</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">Node</code>가 여러 개 이거나, 선언할 인자가 많아서 <code class=\"language-plaintext highlighter-rouge\">return</code>할 인자가 많을 때, <code class=\"language-plaintext highlighter-rouge\">add_action</code> 함수를 이용하여 <code class=\"language-plaintext highlighter-rouge\">return</code>을 간결하게 할 수 있다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>def generate_launch_description<span class=\"o\">()</span>:\n    ...\n\n    launch_description <span class=\"o\">=</span> LaunchDescription<span class=\"o\">()</span>\n\n    launch_description.add_action<span class=\"o\">(</span>launch.actions.DeclareLaunchArgument<span class=\"o\">(</span>\n      ...\n    <span class=\"o\">))</span>\n\n    first_node <span class=\"o\">=</span> Node<span class=\"o\">(</span> ... <span class=\"o\">)</span>\n\n    second_node <span class=\"o\">=</span> Node<span class=\"o\">(</span> ... <span class=\"o\">)</span>\n\n    launch_description.add_action<span class=\"o\">(</span>first_node<span class=\"o\">)</span>\n    launch_description.add_action<span class=\"o\">(</span>second_node<span class=\"o\">)</span>\n\n    <span class=\"k\">return </span>launch_description\n</code></pre>  </div></div>\n\n<h3 id=\"36-includelaunchdescription\">3.6 IncludeLaunchDescription</h3>\n<p>다른 <code class=\"language-plaintext highlighter-rouge\">.launch.py</code>을 불러올 때 사용하며, 다른 패키지의 <code class=\"language-plaintext highlighter-rouge\">.launch.py</code>를 불러올 때는 <code class=\"language-plaintext highlighter-rouge\">get_package_share_directory</code> 함수를 이용하여 불러올 수 있다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>...\n\ndef generate_launch_description<span class=\"o\">()</span>:\n\n    <span class=\"k\">return </span>LaunchDescription<span class=\"o\">([</span>\n        <span class=\"c\"># 같은 패키지의 X.launch.py를 불러올 때</span>\n        IncludeLaunchDescription<span class=\"o\">(</span>\n            PythonLaunchDescriptionSource<span class=\"o\">(</span>\n                <span class=\"o\">[</span>ThisLaunchFileDir<span class=\"o\">()</span>, <span class=\"s1\">'X.launch.py'</span><span class=\"o\">])</span>,\n        <span class=\"o\">)</span>,\n\n        <span class=\"c\"># 다른 패키지 B의 Y.launch.py를 불러올 때</span>\n        IncludeLaunchDescription<span class=\"o\">(</span>\n            PythonLaunchDescriptionSource<span class=\"o\">(</span>\n                <span class=\"o\">[</span>get_package_share_directory<span class=\"o\">(</span><span class=\"s1\">'B'</span><span class=\"o\">)</span>, <span class=\"s1\">'Y.launch.py'</span><span class=\"o\">])</span>,\n        <span class=\"o\">)</span>,\n    <span class=\"o\">])</span>\n</code></pre>  </div></div>\n","dir":"/ROS2/Basic/","name":"0005Launch-System.md","path":"ROS2/Basic/0005Launch-System.md","url":"/ROS2/Basic/0005Launch-System.html"},{"sort":6,"layout":"default","title":"스마트 포인터 기본","content":"<h1 id=\"스마트-포인터-기본\">스마트 포인터 기본</h1>\n\n<ul>\n <li>참고문헌 : 전문가를 위한 C++(마크 그레고리 / 한빛미디어)</li>\n</ul>\n\n<p>기존 <code class=\"language-plaintext highlighter-rouge\">C</code> 스타일의 포인터 대신 <code class=\"language-plaintext highlighter-rouge\">C++</code>에서는 스마트 포인터(<code class=\"language-plaintext highlighter-rouge\">smart pointer</code>) 사용하여 메모리와 관련된 문제들을 방지할 수 있다. 스마트 포인터로 지정한 객체가 스코프를 벗어나면 메모리가 자동으로 해제되기 때문이다.</p>\n\n<p>C++에서 가장 중요하게 사용되는 스마트 포인터 타입은 <code class=\"language-plaintext highlighter-rouge\">std::unique_ptr</code>과 <code class=\"language-plaintext highlighter-rouge\">std::shared_ptr</code>이다.</p>\n\n<h2 id=\"1-unique_ptr\">1. unique_ptr</h2>\n\n<h3 id=\"11-unique_ptr-개념\">1.1 unique_ptr 개념</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">unique_ptr</code>은 포인터로 가리키는 대상이 스코프를 벗어나거나 삭제될 때 할당된 메모리나 리소스도 자동으로 삭제된다는 점을 제외하면 일반 포인터와 같다. 또한, <code class=\"language-plaintext highlighter-rouge\">unique_ptr</code>는 <code class=\"language-plaintext highlighter-rouge\">return</code>문이 실행되거나 익셉션이 발생하더라도 항상 할당된 메모리나 리소스를 해제할 수 있으며, 이는 함수를 간결하게 한다.(리소스 해제 코드를 작성하지 않아도 되기 때문)</p>\n\n<h3 id=\"12-unique_ptr-생성\">1.2 unique_ptr 생성</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">unique_ptr</code>를 생성할 때는 반드시 <code class=\"language-plaintext highlighter-rouge\">std::make_unique&lt;&gt;()</code>를 사용해야 한다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">auto</span> <span class=\"n\">anEmployee</span> <span class=\"o\">=</span> <span class=\"n\">make_unique</span><span class=\"o\">&lt;</span><span class=\"n\">Empolyee</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n</code></pre>  </div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">make_unique()</code>는 <code class=\"language-plaintext highlighter-rouge\">C++14</code>부터 추가되었는데, 만약 컴파일러가 <code class=\"language-plaintext highlighter-rouge\">C++14</code>를 지원하지 않는다면 다음의 방법으로 <code class=\"language-plaintext highlighter-rouge\">unique_ptr</code>를 만든다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">unique_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">Employee</span><span class=\"o\">&gt;</span> <span class=\"n\">anEmployee</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">Employee</span><span class=\"p\">);</span>\n</code></pre>  </div></div>\n\n<p>스마트 포인터로 지정한 <code class=\"language-plaintext highlighter-rouge\">anEmployee</code>의 사용법은 일반 포인터와 같다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">anEmployee</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Salary: \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">anEmployee</span><span class=\"o\">-&gt;</span><span class=\"n\">salary</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">unique_ptr</code>은 C 스타일의 배열을 저장하는 데도 활용할 수 있다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">auto</span> <span class=\"n\">employees</span> <span class=\"o\">=</span> <span class=\"n\">make_unique</span><span class=\"o\">&lt;</span><span class=\"n\">Employee</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">);</span>\n<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Salary: \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">employees</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">salary</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n</code></pre>  </div></div>\n\n<h2 id=\"2-shared_ptr\">2. shared_ptr</h2>\n\n<h3 id=\"21-shared_ptr-개념\">2.1 shared_ptr 개념</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">shared_ptr</code>를 사용하면 데이터를 공유할 수 있다. <code class=\"language-plaintext highlighter-rouge\">shared_ptr</code>에 대한 대입 연산이 발생할 때마다 레퍼런스 카운트가 증가하며, 이는 <code class=\"language-plaintext highlighter-rouge\">shared_ptr</code>이 가리키는 데이터를 레퍼런스 카운트 만큼 소유하고 있다는 것이다.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">shared_ptr</code> 역시 스코프를 벗어나면 레퍼런스 카운트가 감소하고, 레퍼런스 카운트가 0이 되면 포인터로 가리키던 객체를 해제한다.</p>\n\n<h3 id=\"22-shared_ptr-생성\">2.2 shared_ptr 생성</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">shared_ptr</code>는 <code class=\"language-plaintext highlighter-rouge\">std::make_shared&lt;&gt;()</code>로 생성한다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">auto</span> <span class=\"n\">anEmployee</span> <span class=\"o\">=</span> <span class=\"n\">make_shared</span><span class=\"o\">&lt;</span><span class=\"n\">Employee</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">anEmployee</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Salary: \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">anEmployee</span><span class=\"o\">-&gt;</span><span class=\"n\">salary</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">C++17</code>부터 shared_ptr에 배열도 저장할 수 있다. 단, 이 경우에는 <code class=\"language-plaintext highlighter-rouge\">make_shared&lt;&gt;()</code>를 사용할 수 없고, 다음과 같이 작성해야 한다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">Employee</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span> <span class=\"n\">employees</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">Employee</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]);</span>\n<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Salary: \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">employees</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">salary</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n</code></pre>  </div></div>\n\n<h2 id=\"3-unique_ptr과-shared_ptr\">3. unique_ptr과 shared_ptr</h2>\n\n<p>일반적으로 <code class=\"language-plaintext highlighter-rouge\">unique_ptr</code>을 기본적으로 사용하며, 소유권을 공유할 필요가 있다면 <code class=\"language-plaintext highlighter-rouge\">shared_ptr</code>을 사용한다.</p>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">auto_ptr</code>은 <code class=\"language-plaintext highlighter-rouge\">C++17</code>부터 완전 삭제 되었다.</li>\n</ul>\n","dir":"/C++/Grammer/","name":"0006Smart-pointer-basic.md","path":"C++/Grammer/0006Smart-pointer-basic.md","url":"/C++/Grammer/0006Smart-pointer-basic.html"},{"sort":6,"permalink":"/C++/","layout":"default","title":"C++","content":"<h1 id=\"c\">C++</h1>\n\n<ul>\n <li><a href=\"/C++/Grammer/\">Grammer</a>\n <ul>\n <li><a href=\"/C++/Grammer/0001If-initializer.html\">If Initializer</a></li>\n <li><a href=\"/C++/Grammer/0002Switch-initializer.html\">Switch Initializer</a></li>\n <li><a href=\"/C++/Grammer/0003vector.html\">vector 기초</a></li>\n <li><a href=\"/C++/Grammer/0004Initializer-list.html\">initializer_list</a></li>\n <li><a href=\"/C++/Grammer/0005Range-based-for-statement.html\">범위 기반 for 문</a></li>\n <li><a href=\"/C++/Grammer/0006Smart-pointer-basic.html\">스마트 포인터 기본</a></li>\n <li><a href=\"/C++/Grammer/0007Exception.html\">Exception</a></li>\n <li><a href=\"/C++/Grammer/0008Type-inference.html\">타입 추론</a></li>\n <li><a href=\"/C++/Grammer/0009Class_definition.html\">Class 정의</a></li>\n <li><a href=\"/C++/Grammer/0010Uniform-initialization.html\">유니폼 이니셜라이저</a></li>\n </ul>\n </li>\n</ul>\n","dir":"/C++/","name":"README.md","path":"C++/README.md","url":"/C++/"},{"sort":7,"layout":"default","title":"Exception","content":"<h1 id=\"exception\">Exception</h1>\n\n<ul>\n <li>참고문헌 : 전문가를 위한 C++(마크 그레고리 / 한빛미디어)</li>\n</ul>\n\n<p><code class=\"language-plaintext highlighter-rouge\">exception</code>은 예상하지 못한 상황을 표현하는 클랙스/객체이다. 익셉션을 활용하면 문제가 발생했을 때 융통성 있게 대처할 수 있다.</p>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">throw</code> : 익셉션을 발생시킴</li>\n <li><code class=\"language-plaintext highlighter-rouge\">catch</code> : 익셉션을 처리함</li>\n</ul>\n\n<p>다음 예제는 분모의 인수가 0이면 익셉션을 발생시킨다. <code class=\"language-plaintext highlighter-rouge\">std::invalid_argument</code> 익셉션을 사용하였는데, 이는 <code class=\"language-plaintext highlighter-rouge\">&lt;stdexcept&gt;</code> 헤더파일을 불러와야 한다.</p>\n<blockquote>\n <p><code class=\"language-plaintext highlighter-rouge\">exception</code> 타입은 발생할 수 있는 상황에 맞게 직접 정의해서 사용하는 것이 좋다.</p>\n</blockquote>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">double</span> <span class=\"nf\">divideNumbers</span><span class=\"p\">(</span><span class=\"kt\">double</span> <span class=\"n\">numerator</span><span class=\"p\">,</span> <span class=\"kt\">double</span> <span class=\"n\">denominator</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">denominator</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">throw</span> <span class=\"n\">invalid_argument</span><span class=\"p\">(</span><span class=\"s\">\"Denoominator cannot be 0.\"</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">numerator</span> <span class=\"o\">/</span> <span class=\"n\">denominator</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">throw</code> 문장이 실행되면 함수에서 값을 리턴하지 않고 실행을 즉시 중단하며, <code class=\"language-plaintext highlighter-rouge\">try/catch</code> 블록으로 감싸서 <code class=\"language-plaintext highlighter-rouge\">exception</code>을 처리할 수 있다.</p>\n<blockquote>\n <p><code class=\"language-plaintext highlighter-rouge\">exception</code>이 발생하게 되면, 바로 <code class=\"language-plaintext highlighter-rouge\">catch</code>블록으로 넘어가게 되기 때문에, 예제에서 세 번째 호출 문장은 실행되지 않는다.</p>\n</blockquote>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">try</span><span class=\"p\">{</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">divideNumbers</span><span class=\"p\">(</span><span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">divideNumbers</span><span class=\"p\">(</span><span class=\"mf\">2.3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">divideNumbers</span><span class=\"p\">(</span><span class=\"mf\">4.5</span><span class=\"p\">,</span> <span class=\"mf\">2.5</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">invalid_argument</span><span class=\"o\">&amp;</span> <span class=\"n\">exception</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Exception caught: \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">exception</span><span class=\"p\">.</span><span class=\"n\">what</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n","dir":"/C++/Grammer/","name":"0007Exception.md","path":"C++/Grammer/0007Exception.md","url":"/C++/Grammer/0007Exception.html"},{"sort":7,"permalink":"/Python/","layout":"default","title":"Python","content":"<h1 id=\"python\">Python</h1>\n\n","dir":"/Python/","name":"README.md","path":"Python/README.md","url":"/Python/"},{"sort":8,"permalink":"/Algorithm/","layout":"default","title":"Algorithm","content":"<h1 id=\"algorithm\">Algorithm</h1>\n\n","dir":"/Algorithm/","name":"README.md","path":"Algorithm/README.md","url":"/Algorithm/"},{"sort":8,"layout":"default","title":"타입 추론","content":"<h1 id=\"타입-추론\">타입 추론</h1>\n\n<ul>\n <li>참고문헌 : 전문가를 위한 C++(마크 그레고리 / 한빛미디어)</li>\n</ul>\n\n<p>타입 추론(<code class=\"language-plaintext highlighter-rouge\">type inference</code>)는 표현식의 타입을 컴파일러가 스스로 알아내는 기능이다.</p>\n\n<h2 id=\"1-auto\">1. auto</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">C++14</code>부터 함수의 리턴 타입을 컴파일러가 알아서 지정하도록 하는 <code class=\"language-plaintext highlighter-rouge\">auto</code>키워드를 사용할 수 있음.</p>\n\n<p>다음은 <code class=\"language-plaintext highlighter-rouge\">auto</code>를 사용하게 되는 상황들이다.</p>\n\n<ul>\n <li>함수의 리턴 타입 추론</li>\n <li>구조적 바인딩에 사용</li>\n <li>표현식의 타입 추론</li>\n <li>비타입(<code class=\"language-plaintext highlighter-rouge\">non-type</code>) 템플릿 매개변수의 타입 추론</li>\n <li><code class=\"language-plaintext highlighter-rouge\">decltype</code> (<code class=\"language-plaintext highlighter-rouge\">auto</code>) 에서 사용</li>\n <li>함수에 대한 또 다른 문법으로 사용</li>\n <li>제네릭 람다 표현식에서 사용</li>\n</ul>\n\n<p>다음은 함수의 리턴 타입을 추론에 대한 예시이다.</p>\n\n<ul>\n <li>컴파일러는 <code class=\"language-plaintext highlighter-rouge\">return</code>문에 나온 표현식의 타입에 따라 리턴 타입을 추론함.</li>\n <li>함수 내에 여러 개의 <code class=\"language-plaintext highlighter-rouge\">return</code> 문이 있는 경우, 각 타입은 모두 같아야 함.</li>\n</ul>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">auto</span> <span class=\"nf\">addNumbers</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">number1</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">number2</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"n\">number1</span> <span class=\"o\">+</span> <span class=\"n\">number2</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">auto</code> 키워드는 복잡한 타입에 적용할 때 편리하다. 또한 함수의 리턴 타입을 변경하더라도 코드에서 그 함수가 나온 모든 지점을 고칠 필요 없이 간단히 수정할 수 있다.</p>\n\n<p>하지만 <code class=\"language-plaintext highlighter-rouge\">auto</code>로 표현식의 타입을 추론하면 <strong>함수에 지정된 레퍼런스나 <code class=\"language-plaintext highlighter-rouge\">const</code> 한정자가 제거된다.</strong> <code class=\"language-plaintext highlighter-rouge\">const</code> 레퍼런스 타입으로 지정하려면 auto 키워드 앞뒤에 레퍼런스 타입과 <code class=\"language-plaintext highlighter-rouge\">const</code> 키워드를 붙여야 한다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">const</span> <span class=\"k\">auto</span><span class=\"o\">&amp;</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">foo</span><span class=\"p\">();</span>\n</code></pre>  </div></div>\n\n<h2 id=\"2-decltype\">2. decltype</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">decltype</code> 키워드는 인수로 지정한 표현식의 타입을 알아낸다. 다음 예제는 y의 타입이 x의 타입인 <code class=\"language-plaintext highlighter-rouge\">int</code> 라고 추론한다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">123</span><span class=\"p\">;</span>\n<span class=\"k\">decltype</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">456</span><span class=\"p\">;</span>\n</code></pre>  </div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">decltype</code>은 <code class=\"language-plaintext highlighter-rouge\">auto</code>와 다르게 레퍼런스나 <code class=\"language-plaintext highlighter-rouge\">const</code> 키워드를 삭제하지 않는다. 이러한 <code class=\"language-plaintext highlighter-rouge\">decltype</code>은 템플릿을 사용할 때 효과적이다.</p>\n","dir":"/C++/Grammer/","name":"0008Type-inference.md","path":"C++/Grammer/0008Type-inference.md","url":"/C++/Grammer/0008Type-inference.html"},{"sort":9,"layout":"default","title":"Class 정의","content":"<h1 id=\"class-정의\">Class 정의</h1>\n\n<ul>\n <li>참고문헌 : 전문가를 위한 C++(마크 그레고리 / 한빛미디어)</li>\n</ul>\n\n<h2 id=\"1-class\">1. class</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">class</code>는 객체의 특성을 정의한 것이다. <code class=\"language-plaintext highlighter-rouge\">C++</code>에서 클래스를 선언하는 코드는 주로 헤더 파일에 작성하고, 구체적으로 구현하는 코드는 소스 파일에 작성한다.</p>\n\n<p>클래스 안에는 데이터 멤버와 메서드(동작)를 선언한다. 각각의 데이터 멤버와 메서드마다 <code class=\"language-plaintext highlighter-rouge\">public</code>, <code class=\"language-plaintext highlighter-rouge\">protected</code>, <code class=\"language-plaintext highlighter-rouge\">private</code> 등으로 접근 수준을 지정한다.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">public</code>은 클래스 밖에서 접근이 가능하다. 반면, <code class=\"language-plaintext highlighter-rouge\">private</code>는 클래스 외부에서 접근할 수 없다. 따라서 값을 가져오는 <code class=\"language-plaintext highlighter-rouge\">getter</code>와 값을 설정하는 <code class=\"language-plaintext highlighter-rouge\">setter</code>를 정의하고 이를 <code class=\"language-plaintext highlighter-rouge\">public</code>으로 지정한다. 따라서 일반적으로 데이터 멤버는 <code class=\"language-plaintext highlighter-rouge\">private</code>로 지정하고, 메서드는 <code class=\"language-plaintext highlighter-rouge\">public</code>에 선언한다.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">protected</code>는 상속과 관련해서 사용한다….</p>\n\n<h2 id=\"2-생성자와-소멸자\">2. 생성자와 소멸자</h2>\n\n<p>생성자(<code class=\"language-plaintext highlighter-rouge\">constructor</code>)는 클래스와 이름이 같고, 리턴 타입이 없는 메서드이다. 이 메서드는 해당 클래스 객체를 생성할 때 자동으로 호출된다.</p>\n\n<p>소멸자(<code class=\"language-plaintext highlighter-rouge\">destructor</code>)는 생성자와 형태는 같지만 앞에 <code class=\"language-plaintext highlighter-rouge\">~</code>를 붙인 메서드이다. 이 메서드는 해당 클래스 객체가 제거될 때 자동으로 호출된다.</p>\n\n<h3 id=\"21-데이터-멤버-초기화-방법\">2.1. 데이터 멤버 초기화 방법</h3>\n\n<p>생성자로 데이터 멤버를 초기화 하는 방법은 두 가지다.</p>\n\n<p>첫 번째 방법은 생성자 이니셜라이저를 사용하는 것으로, 권장되는 방법이다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">AirlineTicket</span><span class=\"o\">::</span><span class=\"n\">AirlineTicket</span><span class=\"p\">()</span>\n  <span class=\"o\">:</span> <span class=\"n\">mPassengerName</span><span class=\"p\">(</span><span class=\"s\">\"Unknown Passenger\"</span><span class=\"p\">)</span>\n  <span class=\"p\">,</span> <span class=\"n\">mNumberOfMiles</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">,</span> <span class=\"n\">mHasEliteSuperRewardsStatus</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<p>두 번째 방법은 생성자의 본문에서 초기화하는 방법이다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">AirlineTicket</span><span class=\"o\">::</span><span class=\"n\">AirlineTicket</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">mPassengerName</span> <span class=\"o\">=</span> <span class=\"s\">\"Unknown Passenger\"</span><span class=\"p\">;</span>\n  <span class=\"n\">mNumberOfMiles</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"n\">mHasEliteSuperRewardsStatus</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h2 id=\"3-스택--힙-기반의-클래스-생성\">3. 스택 / 힙 기반의 클래스 생성</h2>\n\n<p>클래스를 생성하는 예로 스택 기반으로 생성하는 방법과, 힙 기반으로 생성하는 방법이 있다.</p>\n\n<p>다음은 AirlineTicket 객체를 스택 기반으로 생성하는 예시이다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">AirlineTicket</span> <span class=\"n\">myyTicket</span><span class=\"p\">;</span>\n<span class=\"n\">myTicket</span><span class=\"p\">.</span><span class=\"n\">setPassengerName</span><span class=\"p\">(</span><span class=\"s\">\"Sherman T. Socketwrench\"</span><span class=\"p\">);</span>\n<span class=\"n\">myTicket</span><span class=\"p\">.</span><span class=\"n\">setNumberOfMiles</span><span class=\"p\">(</span><span class=\"mi\">700</span><span class=\"p\">);</span>\n<span class=\"p\">...</span>\n</code></pre>  </div></div>\n\n<p>다음은 AirlineTicket 객체를 힙 기반으로 생성하는 예시이다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 스마트 포인터 기반</span>\n<span class=\"k\">auto</span> <span class=\"n\">myTicket</span> <span class=\"o\">=</span> <span class=\"n\">make_unique</span><span class=\"o\">&lt;</span><span class=\"n\">AirlineTicket</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n<span class=\"n\">myTicket</span><span class=\"o\">-&gt;</span><span class=\"n\">setPassengerName</span><span class=\"p\">(</span><span class=\"s\">\"Sherman T. Socketwrench\"</span><span class=\"p\">);</span>\n<span class=\"n\">myTicket</span><span class=\"o\">-&gt;</span><span class=\"n\">setNumberOfMiles</span><span class=\"p\">(</span><span class=\"mi\">700</span><span class=\"p\">);</span>\n<span class=\"p\">...</span>\n\n<span class=\"c1\">// 스마트 포인터를 사용하지 않는 경우</span>\n<span class=\"n\">AirlineTicket</span><span class=\"o\">*</span> <span class=\"n\">myTicket</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nf\">AirlineTicket</span><span class=\"p\">();</span>\n<span class=\"p\">...</span>\n<span class=\"k\">delete</span> <span class=\"n\">myTicket</span><span class=\"p\">;</span> <span class=\"c1\">// 이 경우에는 delete 키워드로 힙 객체를 삭제</span>\n</code></pre>  </div></div>\n","dir":"/C++/Grammer/","name":"0009Class_definition.md","path":"C++/Grammer/0009Class_definition.md","url":"/C++/Grammer/0009Class_definition.html"},{"sort":9,"permalink":"/Words/","layout":"default","title":"Words","content":"<h1 id=\"words\">Words</h1>\n\n","dir":"/Words/","name":"README.md","path":"Words/README.md","url":"/Words/"},{"sort":10,"layout":"default","title":"유니폼 이니셜라이저","content":"<h1 id=\"유니폼-이니셜라이저\">유니폼 이니셜라이저</h1>\n\n<ul>\n <li>참고문헌 : 전문가를 위한 C++(마크 그레고리 / 한빛미디어)</li>\n</ul>\n\n<p><code class=\"language-plaintext highlighter-rouge\">C++11</code> 이전에는 구조체나 클래스 등의 타입별로 초기화 방식이 일정하지 않았다. 구조체의 경우 <code class=\"language-plaintext highlighter-rouge\">{...}</code> 문법을 적용한 반면, 클래스의 경우 <code class=\"language-plaintext highlighter-rouge\">(...)</code> 문멉을 이용하여 생성자를 호출하였다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">ExampleStruct</span> <span class=\"n\">myExample1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">};</span> <span class=\"c1\">// 구조체의 초기화</span>\n<span class=\"n\">ExampleClass</span> <span class=\"nf\">myExample2</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">);</span> <span class=\"c1\">// 클래스의 초기화</span>\n</code></pre>  </div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">C++11</code> 부터 타입을 초기화 할 때 <code class=\"language-plaintext highlighter-rouge\">{...}</code> 문법을 사용하는 유니폼 초기화를 따르도록 통일됐다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">ExampleStruct</span> <span class=\"n\">myExample1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">};</span> <span class=\"c1\">// 구조체의 초기화</span>\n<span class=\"n\">ExampleClass</span> <span class=\"n\">myExample2</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">};</span> <span class=\"c1\">// 클래스의 초기화</span>\n</code></pre>  </div></div>\n\n<p>또한 등호를 생략해도 된다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">ExampleStruct</span> <span class=\"n\">myExample1</span><span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">};</span> <span class=\"c1\">// 구조체의 초기화</span>\n<span class=\"n\">ExampleClass</span> <span class=\"n\">myExample2</span><span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">};</span> <span class=\"c1\">// 클래스의 초기화</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>유니폼 이니셜라이저는 구조체나 클래스 뿐만 아니라 C++에 있는 모든 대상을 초기화 하는데 사용된다. 다음의 예시는 네 변수를 모두 3으로 초기화된다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"nf\">b</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n<span class=\"kt\">int</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">};</span>\n<span class=\"kt\">int</span> <span class=\"n\">d</span><span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">};</span>\n</code></pre>  </div> </div>\n </li>\n <li>유니폼 초기화는 제로 초기화에도 적용할 수 있다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"n\">e</span><span class=\"p\">{};</span>\n</code></pre>  </div> </div>\n </li>\n <li>유니폼 초기화는 동작으로 할당되는 배열을 초기화할 때도 적용할 수 있다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span><span class=\"o\">*</span> <span class=\"n\">pArray</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">};</span>\n</code></pre>  </div> </div>\n </li>\n</ul>\n","dir":"/C++/Grammer/","name":"0010Uniform-initialization.md","path":"C++/Grammer/0010Uniform-initialization.md","url":"/C++/Grammer/0010Uniform-initialization.html"},{"sort":10,"permalink":"/ToDo/","layout":"default","title":"To Do","content":"<h1 id=\"to-do\">To Do</h1>\n\n<ul>\n <li><a href=\"/ToDo/list.html\">To Do List</a></li>\n</ul>\n","dir":"/ToDo/","name":"README.md","path":"ToDo/README.md","url":"/ToDo/"}]
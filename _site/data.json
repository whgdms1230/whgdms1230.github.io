[{"permalink":"//","layout":"default","title":"Profile","content":"## 1. Profile\n\n<img src=\"/assets/images/picture.jpg\" width=\"150\" height=\"200\">\n\n### Jiyong Kim\n\n#### Manager / Platform Business Team, [CLOBOT Co., Ltd.](https://www.clobot.co.kr)\n\nI am currently a manager at the CLOBOT Co., Ltd since 2021. I received a B.S and M.S degrees in Department of Mechanical Design and Robot Enginnering from Seoul National University of Science and Technology, Seoul, South Korea in 2017 and 2021, respectively. I am interested in scheduling of multi mobile robots, dynamics control of manipulators, and service robot platform based on the open source.\n\n## 2. Experience\n* 2021.5. ~ PRESENT - Manager, CLOBOT Co., Ltd.\n\n## 3. Education\n* 2019.3. ~ 2021.8. - M.S, Department of Mechanical Design and Robot Engineering, Seoul National University of Science and Technology, South Korea.\n* 2013.3. ~ 2017.2. - B.S, Department of Mechanical System Design Engineering, Seoul National University of Science and Technology, South Korea.\n\n## 4. Journals\n* [Ji-Yong Kim, Jung-Yup Kim, \"Gait training algorithm based on inverse dynamics of walking rehabilitation robot, DDgo Pro,\" Intelligent Service Robotics, Vol. 14, pp. 143-155, 2021.](https://doi.org/10.1007/s11370-021-00357-8)\n* [Jung‑Yup Kim, Ji‑Yong Kim, Hyeong‑Sic Kim, Kiwon Park, \"Development and Evaluation of a Hybrid Walking Rehabilitation Robot, DDgo Pro,\" International Journal of Precision Engineering and Manufacturing, Vol. 21, pp. 2105–2115, 2020.](https://doi.org/10.1007/s12541-020-00404-x)\n\n## 5. International Conference\n* Ji-Yong Kim, Jae-Wong Cho, Ji-Hyeon Kwon, \"Multi-robot traffic management using MIP path negotiation scheduler,\" International Conference on Control, Automation and Systems, 2021.\n\n## 6. Domestic Conference\n* [김지용, 김정엽, \"역동역학 기반의 보행 재활 로봇의 수동 모드 보행 훈련 알고리즘\", 한국정밀공학회 학술발표대회 논문집, 21-22, 2020.](https://www.dbpia.co.kr/journal/articleDetail?nodeId=NODE10489383)\n\n## 7. Research and Development\n\n### RMF\n\n### CLOBER\n\n### DDgo Pro\n\n### Quadcopter","dir":"/","name":"README.md","path":"README.md","url":"/"},{"sort":1,"layout":"default","title":"Install","content":"<h1 id=\"install\">Install</h1>\n\n<blockquote>\n <p>noetic 버전은 <a href=\"http://releases.ubuntu.com/20.04/\">ubuntu 20.04</a>에서 사용되므로, 버전에 유의할 것.</p>\n</blockquote>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- <a href=\"http://wiki.ros.org/Installation/Ubuntu\">ROS 1.0 설치 관련 위키 페이지</a></em></p>\n\n<h2 id=\"1-sourcelist-설정\">1. source.list 설정</h2>\n<p>쉘 스크립트를 이용. /etc/apt/source.list.d에 ros-latest.list를 추가하여 ROS 패키지의 <code class=\"language-plaintext highlighter-rouge\">binary release</code>를 받을 수 있는 저장소를 추가.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>sh <span class=\"nt\">-c</span> <span class=\"s1\">'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" &gt; /etc/apt/sources.list.d/ros-latest.list'</span>\n</code></pre>  </div></div>\n\n<h2 id=\"2-key-설정\">2. key 설정</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">curl</code> 설치 (curl 설치가 되어있다면 넘어가도 된다.)</p>\n<blockquote>\n <p>여기서 curl은 서버와 통신할 수 있는 커맨드 툴로서, 다양한 프로토콜을 지원한다.</p>\n</blockquote>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt <span class=\"nb\">install </span>curl\n</code></pre>  </div></div>\n<p>curl 명령을 통해 가져온 gpg key를 apt-key 명령을 통해 추가한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">-s</span> https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | <span class=\"nb\">sudo </span>apt-key add -\n</code></pre>  </div></div>\n\n<h2 id=\"3-설치\">3. 설치</h2>\n<p>설치하기 전, <code class=\"language-plaintext highlighter-rouge\">debian package</code>를 업데이트 한 후, <code class=\"language-plaintext highlighter-rouge\">noetic</code> 버전을 설치한다.(풀버전 설치)</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt update\n<span class=\"nb\">sudo </span>apt <span class=\"nb\">install </span>ros-noetic-desktop-full\n</code></pre>  </div></div>\n\n<h2 id=\"4-설치-확인\">4. 설치 확인</h2>\n<p>설치가 되었는지 확인</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>apt search ros-noetic\n</code></pre>  </div></div>\n","dir":"/0001ROS/0001ROS1/0001Basic/","name":"0001Install.md","path":"0001ROS/0001ROS1/0001Basic/0001Install.md","url":"/0001ROS/0001ROS1/0001Basic/0001Install.html"},{"sort":1,"permalink":"/0001ROS/0001ROS1/0001Basic/","layout":"default","title":"BASIC","content":"<h1 id=\"basic\">BASIC</h1>\n\n<ul>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0001Install.html\">Install</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0002Catkin.html\">Catkin</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0003CMakeList.html\">CMakeLists.txt</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0004Package-xml.html\">Package.xml</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0005Launch-System.html\">Launch System</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0006Package.html\">ROS 1 Package Structure</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0007CLI.html\">Command Line Interface</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0008Topic.html\">Topic</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0009Service.html\">Service</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0010Action.html\">Action</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0011Parameter.html\">Parameter</a></li>\n</ul>\n","dir":"/0001ROS/0001ROS1/0001Basic/","name":"README.md","path":"0001ROS/0001ROS1/0001Basic/README.md","url":"/0001ROS/0001ROS1/0001Basic/"},{"sort":1,"layout":"default","title":"actionlib","content":"<h1 id=\"actionlib\">actionlib</h1>\n\n<p><em>- <a href=\"http://wiki.ros.org/actionlib\">actionlib 위키 페이지</a></em></p>\n\n<h2 id=\"1-actionlib\">1. actionlib</h2>\n<p>ROS service는 어떤 작업을 수행하기 위해 노드에 request하고, 그에 대한 response를 받을 수 있는 인터페이스이다. 그러나, 서비스를 실행하는 데 시간이 오래걸리는 경우 실행 중에 취소를 요청하거나 그 실행 방식에 대해 주기적으로 피드백을 받고자 할 때, action을 사용한다. actionlib 패키지는 이러한 action을 사용할 수 있는 서버를 생성하는 tool를 제공하고, 서버에 요청을 보내기 위한 클라이언트 인터페이스를 제공한다.</p>\n\n<ul>\n <li>actionlib의 구현 방식의 세부 정보는 <a href=\"http://wiki.ros.org/actionlib/DetailedDescription\">다음</a>에서 확인할 수 있다.</li>\n</ul>\n\n<h2 id=\"2-client-server-interaction\">2. Client-Server Interaction</h2>\n<p>ActionClient와 ActionServer는 <code class=\"language-plaintext highlighter-rouge\">ROS Action Protocol</code>을 통해 통신한다. client와 server는 간단한 API를 제공하는데, client가 server에 request를 하거나, server에서 해당 request를 function call 또는 callback 함수를 통해 execute를 하는 역할을 한다.</p>\n\n<p><img src=\"client_server_interaction.png\" width=\"900\" height=\"350\" /></p>\n\n<h2 id=\"3-action-specification-goal-feedback--result\">3. Action Specification: Goal, Feedback, &amp; Result</h2>\n\n<p>client와 server가 통신할 수 있도록 다음의 구성을 가진 메세지를 정의해야 한다.</p>\n<ul>\n <li>Goal : client에서 server에 요청하는 goal</li>\n <li>Feedback : server가 client가 요청한 goal의 진행 상황을 알려주는 방법을 제공하며,</li>\n <li>Result : server가 client에 요청받은 goal에 대한 결과를 제공하며, 마지막에 일회성으로 제공됨.</li>\n</ul>\n\n<h2 id=\"4-action-file\">4. .action file</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">.action</code>에 action 메세지에 필요한 goal, feedback, result가 정의되며, 각각은 <code class=\"language-plaintext highlighter-rouge\">---</code>으로 구분된다.</p>\n<div class=\"language-text highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Define the goal\nuint32 dishwasher_id  # Specify which dishwasher we want to use\n---\n# Define the result\nuint32 total_dishes_cleaned\n---\n# Define a feedback message\nfloat32 percent_complete\n</code></pre>  </div></div>\n\n<h3 id=\"41-build-a-package-by-catkin\">4.1 Build a package by Catkin</h3>\n<h4 id=\"411-build-a-package-that-contains-action-file\">4.1.1 Build a package that contains .action file</h4>\n<p>패키지가 <code class=\"language-plaintext highlighter-rouge\">.action</code> 파일을 포함하고 있는 경우에는 다음과 같이 패키지를 구성한다.</p>\n\n<p>메세지를 정의하는 catkin package의 CmakeLists.txt에 다음 사항을 추가한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">find_package</span><span class=\"p\">(</span>catkin REQUIRED genmsg actionlib_msgs<span class=\"p\">)</span>\n<span class=\"nf\">add_action_files</span><span class=\"p\">(</span>DIRECTORY action FILES DoDishes.action<span class=\"p\">)</span>\n<span class=\"nf\">generate_messages</span><span class=\"p\">(</span>DEPENDENCIES actionlib_msgs<span class=\"p\">)</span>\n</code></pre>  </div></div>\n<p>다음으로 package.xml 파일에도 다음의 사항을 추가해야 한다.</p>\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;build_depend&gt;</span>actionlib_msgs<span class=\"nt\">&lt;/build_depend&gt;</span>\n<span class=\"nt\">&lt;exec_depend&gt;</span>actionlib_msgs<span class=\"nt\">&lt;/exec_depend&gt;</span>\n</code></pre>  </div></div>\n<p>만약 package.xml의 format이 2버전이라면 다음처럼 추가한다.</p>\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;depend&gt;</span>actionlib<span class=\"nt\">&lt;/depend&gt;</span>\n<span class=\"nt\">&lt;depend&gt;</span>actionlib_msgs<span class=\"nt\">&lt;/depend&gt;</span>\n</code></pre>  </div></div>\n\n<h4 id=\"412-build-a-package-that-depends-on-actionlib-api\">4.1.2 Build a package that depends on actionlib API</h4>\n<p>만약 actionlib API에 대한 의존성이 있다면 다음과 같이 패키지를 구성한다.</p>\n<ul>\n <li>CMakeLists.txt</li>\n</ul>\n\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">find_package</span><span class=\"p\">(</span>catkin REQUIRED genmsg actionlib_msgs actionlib<span class=\"p\">)</span>\n<span class=\"nf\">add_action_files</span><span class=\"p\">(</span>DIRECTORY action FILES DoDishes.action<span class=\"p\">)</span>\n<span class=\"nf\">generate_messages</span><span class=\"p\">(</span>DEPENDENCIES actionlib_msgs<span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>package.xml</li>\n</ul>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;build_depend&gt;</span>actionlib<span class=\"nt\">&lt;/build_depend&gt;</span>\n<span class=\"nt\">&lt;build_depend&gt;</span>actionlib_msgs<span class=\"nt\">&lt;/build_depend&gt;</span>\n<span class=\"nt\">&lt;exec_depend&gt;</span>actionlib<span class=\"nt\">&lt;/exec_depend&gt;</span>\n<span class=\"nt\">&lt;exec_depend&gt;</span>actionlib_msgs<span class=\"nt\">&lt;/exec_depend&gt;</span>\n</code></pre>  </div></div>\n\n<h3 id=\"42-results\">4.2 Results</h3>\n<p>그 결과 빌드하면 다음과 같은 msg 파일이 생성되며, 이는 actionlib 내부적으로 사용된다.</p>\n<ul>\n <li>DoDishesAction.msg</li>\n <li>DoDishesActionGoal.msg</li>\n <li>DoDishesActionResult.msg</li>\n <li>DoDishesActionFeedback.msg</li>\n <li>DoDishesGoal.msg</li>\n <li>DoDishesResult.msg</li>\n <li>DoDishesFeedback.msg</li>\n</ul>\n\n<h2 id=\"5-using-the-actionclient\">5. Using the ActionClient</h2>\n<p>다음은 정의된 DoDishes.action 파일을 이용하여 client에서 server로 <code class=\"language-plaintext highlighter-rouge\">do_dishes</code>라는 action 이름으로 goal을 요청하는 예제이다.</p>\n\n<h3 id=\"51-c-simpleactionclient\">5.1 C++ SimpleActionClient</h3>\n<ul>\n <li><a href=\"https://docs.ros.org/en/api/actionlib/html/classactionlib_1_1SimpleActionClient.html\">C++ SimpleActionClien API</a></li>\n</ul>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;chores/DoDishesAction.h&gt; // Note: \"Action\" is appended\n#include &lt;actionlib/client/simple_action_client.h&gt;\n</span>\n<span class=\"k\">typedef</span> <span class=\"n\">actionlib</span><span class=\"o\">::</span><span class=\"n\">SimpleActionClient</span><span class=\"o\">&lt;</span><span class=\"n\">chores</span><span class=\"o\">::</span><span class=\"n\">DoDishesAction</span><span class=\"o\">&gt;</span> <span class=\"n\">Client</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">**</span> <span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">,</span> <span class=\"s\">\"do_dishes_client\"</span><span class=\"p\">);</span>\n  <span class=\"n\">Client</span> <span class=\"n\">client</span><span class=\"p\">(</span><span class=\"s\">\"do_dishes\"</span><span class=\"p\">,</span> <span class=\"nb\">true</span><span class=\"p\">);</span> <span class=\"c1\">// true -&gt; don't need ros::spin()</span>\n  <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">waitForServer</span><span class=\"p\">();</span>\n  <span class=\"n\">chores</span><span class=\"o\">::</span><span class=\"n\">DoDishesGoal</span> <span class=\"n\">goal</span><span class=\"p\">;</span>\n  <span class=\"c1\">// Fill in goal here</span>\n  <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">sendGoal</span><span class=\"p\">(</span><span class=\"n\">goal</span><span class=\"p\">);</span>\n  <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">waitForResult</span><span class=\"p\">(</span><span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">Duration</span><span class=\"p\">(</span><span class=\"mf\">5.0</span><span class=\"p\">));</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">getState</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">actionlib</span><span class=\"o\">::</span><span class=\"n\">SimpleClientGoalState</span><span class=\"o\">::</span><span class=\"n\">SUCCEEDED</span><span class=\"p\">)</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"Yay! The dishes are now clean\"</span><span class=\"p\">);</span>\n  <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"Current State: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">getState</span><span class=\"p\">().</span><span class=\"n\">toString</span><span class=\"p\">().</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h3 id=\"52-python-simpleactionclient\">5.2 Python SimpleActionClient</h3>\n<ul>\n <li><a href=\"https://docs.ros.org/en/api/actionlib/html/classactionlib_1_1simple__action__client_1_1SimpleActionClient.html\">Python SimpleActionClien API</a></li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#! /usr/bin/env python\n</span>\n<span class=\"kn\">import</span> <span class=\"nn\">roslib</span>\n<span class=\"n\">roslib</span><span class=\"p\">.</span><span class=\"n\">load_manifest</span><span class=\"p\">(</span><span class=\"s\">'my_pkg_name'</span><span class=\"p\">)</span>\n<span class=\"kn\">import</span> <span class=\"nn\">rospy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">actionlib</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">chores.msg</span> <span class=\"kn\">import</span> <span class=\"n\">DoDishesAction</span><span class=\"p\">,</span> <span class=\"n\">DoDishesGoal</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">init_node</span><span class=\"p\">(</span><span class=\"s\">'do_dishes_client'</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">actionlib</span><span class=\"p\">.</span><span class=\"n\">SimpleActionClient</span><span class=\"p\">(</span><span class=\"s\">'do_dishes'</span><span class=\"p\">,</span> <span class=\"n\">DoDishesAction</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">wait_for_server</span><span class=\"p\">()</span>\n\n    <span class=\"n\">goal</span> <span class=\"o\">=</span> <span class=\"n\">DoDishesGoal</span><span class=\"p\">()</span>\n    <span class=\"c1\"># Fill in the goal here\n</span>    <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">send_goal</span><span class=\"p\">(</span><span class=\"n\">goal</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">wait_for_result</span><span class=\"p\">(</span><span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">Duration</span><span class=\"p\">.</span><span class=\"n\">from_sec</span><span class=\"p\">(</span><span class=\"mf\">5.0</span><span class=\"p\">))</span>\n</code></pre>  </div></div>\n\n<h2 id=\"6-implementing-an-actionserver\">6. Implementing an ActionServer</h2>\n<p>다음은 정의된 DoDishes.action 파일을 이용하여 client에서 <code class=\"language-plaintext highlighter-rouge\">do_dishes</code> action 요청을 받았을 때, goal에 대한 response를 하는 예제이다.</p>\n\n<h3 id=\"61-c-simpleactionserver\">6.1 C++ SimpleActionServer</h3>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;chores/DoDishesAction.h&gt;  // Note: \"Action\" is appended\n#include &lt;actionlib/server/simple_action_server.h&gt;\n</span>\n<span class=\"k\">typedef</span> <span class=\"n\">actionlib</span><span class=\"o\">::</span><span class=\"n\">SimpleActionServer</span><span class=\"o\">&lt;</span><span class=\"n\">chores</span><span class=\"o\">::</span><span class=\"n\">DoDishesAction</span><span class=\"o\">&gt;</span> <span class=\"n\">Server</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">chores</span><span class=\"o\">::</span><span class=\"n\">DoDishesGoalConstPtr</span><span class=\"o\">&amp;</span> <span class=\"n\">goal</span><span class=\"p\">,</span> <span class=\"n\">Server</span><span class=\"o\">*</span> <span class=\"n\">as</span><span class=\"p\">)</span>  <span class=\"c1\">// Note: \"Action\" is not appended to DoDishes here</span>\n<span class=\"p\">{</span>\n  <span class=\"c1\">// Do lots of awesome groundbreaking robot stuff here</span>\n  <span class=\"n\">as</span><span class=\"o\">-&gt;</span><span class=\"n\">setSucceeded</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">**</span> <span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">,</span> <span class=\"s\">\"do_dishes_server\"</span><span class=\"p\">);</span>\n  <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">NodeHandle</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n  <span class=\"n\">Server</span> <span class=\"n\">server</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"s\">\"do_dishes\"</span><span class=\"p\">,</span> <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">execute</span><span class=\"p\">,</span> <span class=\"n\">_1</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">server</span><span class=\"p\">),</span> <span class=\"nb\">false</span><span class=\"p\">);</span>\n  <span class=\"n\">server</span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"p\">();</span>\n  <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">spin</span><span class=\"p\">();</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n<h3 id=\"62-python-simpleactionserver\">6.2 Python SimpleActionServer</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#! /usr/bin/env python\n</span>\n<span class=\"kn\">import</span> <span class=\"nn\">roslib</span>\n<span class=\"n\">roslib</span><span class=\"p\">.</span><span class=\"n\">load_manifest</span><span class=\"p\">(</span><span class=\"s\">'my_pkg_name'</span><span class=\"p\">)</span>\n<span class=\"kn\">import</span> <span class=\"nn\">rospy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">actionlib</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">chores.msg</span> <span class=\"kn\">import</span> <span class=\"n\">DoDishesAction</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">DoDishesServer</span><span class=\"p\">:</span>\n  <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">actionlib</span><span class=\"p\">.</span><span class=\"n\">SimpleActionServer</span><span class=\"p\">(</span><span class=\"s\">'do_dishes'</span><span class=\"p\">,</span> <span class=\"n\">DoDishesAction</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">execute</span><span class=\"p\">,</span> <span class=\"bp\">False</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">server</span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">goal</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Do lots of awesome groundbreaking robot stuff here\n</span>    <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">server</span><span class=\"p\">.</span><span class=\"n\">set_succeeded</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n  <span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">init_node</span><span class=\"p\">(</span><span class=\"s\">'do_dishes_server'</span><span class=\"p\">)</span>\n  <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">DoDishesServer</span><span class=\"p\">()</span>\n  <span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">spin</span><span class=\"p\">()</span>\n</code></pre>  </div></div>\n","dir":"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/","name":"0001actionlib.md","path":"0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0001actionlib.md","url":"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0001actionlib.html"},{"sort":1,"permalink":"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/","layout":"default","title":"Actionlib","content":"<h1 id=\"actionlib\">Actionlib</h1>\n\n<ul>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0001actionlib.html\">actionlib</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0002actionlibBeginnerTutorials_cpp.html\">actionlib beginner tutorials(c++)</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0003actionlibBeginnerTutorials_python.html\">actionlib beginner tutorials(python)</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0004actionlibIntermediateTutorials.html\">actionlib intermediate tutorials</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0005actionlibAdvancedTutorials.html\">actionlib advanced tutorials</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0006DynamicReconfigure.html\">dynamic reconfigure</a></li>\n</ul>\n","dir":"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/","name":"README.md","path":"0001ROS/0001ROS1/0002Intermediate/0001Actionlib/README.md","url":"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/"},{"sort":1,"layout":"default","title":"TF","content":"<h1 id=\"tf\">TF</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n\n<p><em>- <a href=\"http://wiki.ros.org/tf\">tf 위키 페이지</a></em></p>\n\n<p><em>- <a href=\"http://wiki.ros.org/navigation/Tutorials/RobotSetup/TF\">Setting up your robot using tf</a></em></p>\n","dir":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/","name":"0001TF.md","path":"0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0001TF.md","url":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0001TF.html"},{"sort":1,"permalink":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/","layout":"default","title":"RobotSetup","content":"<h1 id=\"robotsetup\">RobotSetup</h1>\n\n<p><img src=\"RobotSetup.png\" width=\"900\" height=\"400\" /></p>\n\n<p>위 다이어그램은 Navigation 구성 요소들을 나타낸다. 따라서 Navigation을 운용하기 위해서는 기본적으로 다음을 필요로 한다.</p>\n\n<ul>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0001TF.html\">TF</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0002SensorStream.html\">SensorStream</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0003Odometry.html\">Odometry</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0004BaseController.html\">BaseController</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0005Mapping.html\">Mapping</a></li>\n</ul>\n\n<h2 id=\"하드웨어-요구사항\">하드웨어 요구사항</h2>\n<ol>\n <li>Differential Drive 형태의 로봇 전용</li>\n <li>Laser 또는 Lidar 등 Mapping과 Localization에 사용될 수 있는 센서</li>\n <li>직사각형 또는 원형의 단순한 모형으로 단순화하여 제어되므로, 공간에 비해 로봇의 크기가 크면 제한됨</li>\n</ol>\n","dir":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/","name":"README.md","path":"0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/README.md","url":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/"},{"sort":1,"layout":"default","title":"nav_core","content":"<h1 id=\"nav_core\">nav_core</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n\n<p><em>- <a href=\"http://wiki.ros.org/nav_core\">nav_core 위키 페이지</a></em></p>\n\n<h2 id=\"1-nav_core-개요\">1. nav_core 개요</h2>\n<p><img src=\"NavCore.png\" width=\"450\" height=\"400\" /></p>\n\n<p>nav_core는 navigation을 구현하기 위한 기본 인터페이스를 제공한다.\nnav_core에서 제공하는 인터페이스는 다음과 같다.</p>\n\n<ul>\n <li>BaseGlobalPlanner</li>\n <li>BaseLocalPlanner</li>\n <li>RecoveryBehavior</li>\n</ul>\n\n<p>이 인터페이스를 기반으로 move_base 노드에 새로운 글로벌 플래너, 로컬플래너, 리커버리를 구현할 수 있다.</p>\n\n<h2 id=\"2-baseglobalplanner\">2. BaseGlobalPlanner</h2>\n<p>nav_core::BaseGlobalPlanner는 글로벌 플래너를 위한 기본 인터페이스를 제공한다. nav_core::BaseGlobalPlanner 인터페이스로 구현되어 제공되는 글로버 플래너는 다음과 같다.</p>\n\n<ul>\n <li><a href=\"http://wiki.ros.org/carrot_planner\">carrot_planner/CarrotPlanner</a> : 가장 단순한 플래너로 목표지점과 가장 가까이 이동하도록 만드는 플래너로, 목표 지점에 장애물이 있는 경우에도 동작한다.</li>\n <li><a href=\"http://wiki.ros.org/navfn\">navfn/NavfnROS</a> : 탐색 함수를 이용한 그리드 기반 글로벌 플래너</li>\n <li><a href=\"http://wiki.ros.org/global_planner\">global_planner/GloberPlanner</a> : navfn을 보다 유연하게 구현한 플래너로, 기본적인 글로벌 플래너 중에서 가장 많이 사용된다.</li>\n</ul>\n\n<blockquote>\n <p><a href=\"https://docs.ros.org/en/api/nav_core/html/classnav__core_1_1BaseGlobalPlanner.html\">BaseGlobalPlanner C++ API doc</a></p>\n</blockquote>\n\n<h2 id=\"3-baselocalplanner\">3. BaseLocalPlanner</h2>\n<p>nav_core::BaseLocalPlanner는 로컬 플래너를 위한 기본 인터페이스를 제공한다. nav_core::BaseLocalPlanner 인터페이스로 구현되어 제공되는 대표적인 로컬 플래너는 다음과 같다.</p>\n\n<ul>\n <li><a href=\"http://wiki.ros.org/base_local_planner\">base_local_planner</a> : Dynamic Window Approach(DWA) 및 Trajectory Rollout Approach 구현을 제공한다.</li>\n <li><a href=\"http://wiki.ros.org/dwa_local_planner\">dwa_local_planner</a> : base_local_planner의 DWA 보다 구현이 깔끔하고, 쉬운 인터페이스를 제공하고, y축 변수를 가짐으로서 더 유연한 형태의 플래너</li>\n <li>그 이외의 로컬 플래너 : <a href=\"http://wiki.ros.org/eband_local_planner\">eband_local_planner</a>, <a href=\"http://wiki.ros.org/teb_local_planner\">teb_local_planner</a>, <a href=\"http://wiki.ros.org/mpc_local_planner\">mpc_local_planner</a></li>\n</ul>\n\n<blockquote>\n <p><a href=\"https://docs.ros.org/en/api/nav_core/html/classnav__core_1_1BaseLocalPlanner.html\">BaseLocalPlanner C++ API doc</a></p>\n</blockquote>\n\n<h2 id=\"4-recoverybehavior\">4. RecoveryBehavior</h2>\n<p>nav_core::RecoveryBehavior는 탐색 복구 동작을 위한 기본 인터페이스를 제공한다. nav_core::RecoveryBehavior 인터페이스로 구현되어 제공되는 recovery behavior는 다음과 같다.</p>\n\n<ul>\n <li><a href=\"http://wiki.ros.org/clear_costmap_recovery\">clear_costmap_recovery</a> : cost map을 static map으로 되돌린다.</li>\n <li><a href=\"http://wiki.ros.org/rotate_recovery\">rotate_recovery</a> : 로봇을 360도 회전시켜 현재 공간의 cost를 비운다.</li>\n</ul>\n","dir":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/","name":"0001NavCore.md","path":"0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0001NavCore.md","url":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0001NavCore.html"},{"sort":1,"permalink":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/","layout":"default","title":"NAVIGATION","content":"<h1 id=\"navigation\">NAVIGATION</h1>\n\n<p><em>- <a href=\"http://wiki.ros.org/navigation\">ROS navigation 위키 페이지</a></em></p>\n\n<ul>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/\">RobotSetup</a>\n <ul>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0001TF.html\">TF</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0002SensorStream.html\">SensorStream</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0003Odometry.html\">Odometry</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0004BaseController.html\">BaseController</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0005Mapping.html\">Mapping</a></li>\n </ul>\n </li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/\">NavigationStackSetup</a>\n <ul>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0001NavCore.html\">nav_core</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0002MoveBase.html\">move_base</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0003DWALocalPlanner.html\">dwa_local_planner</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0004GlobalPlanner.html\">global_planner</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0005DefaultRecoveryBehavior.html\">DefaultRecoveryBehavior</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0006Costmap.html\">Costmap</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0007AMCL.html\">amcl</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0008MapServer.html\">map_server</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0009NavigationTunning.html\">Navigation Tunning Guide</a></li>\n </ul>\n </li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/03MoveBaseFlex/\">MoveBaseFlex</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/04CustomPlanner/\">CustomPlanner</a></li>\n</ul>\n","dir":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/","name":"README.md","path":"0001ROS/0001ROS1/0003Advanced/0001Navigation/README.md","url":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/"},{"sort":1,"layout":"default","title":"Installation","content":"<h1 id=\"installation\">Installation</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n\n<p><em>- <a href=\"http://philserver.bplaced.net/fbe/\">FlexBe 홈페이지</a></em></p>\n\n<p><em>- <a href=\"http://wiki.ros.org/flexbe\">FlexBe ROS 위키 페이지</a></em></p>\n\n<p><em>- <a href=\"https://github.com/team-vigir/flexbe_behavior_engine\">FlexBe Behavior Engine Github</a></em></p>\n\n<p><em>- <a href=\"https://github.com/FlexBE/flexbe_app\">FlexBe App Github</a></em></p>\n\n<p><em>- <a href=\"https://github.com/FlexBE/generic_flexbe_states\">FlexBe States Github</a></em></p>\n\n<p><em>- <a href=\"https://github.com/team-vigir/vigir_behaviors/tree/master/vigir_flexbe_launch\">FlexBe example Github</a></em></p>\n\n<h2 id=\"1-flexbe-설치\">1. FlexBe 설치</h2>\n<p>catkin_ws를 만들고, flexbe behavior engine, flebe app, flexbe states 레포지토리를 각각 클론하여 받아온다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cd</span> ~/catkin_ws/src\n\n<span class=\"c\"># CLONE</span>\ngit clone https://github.com/team-vigir/flexbe_behavior_engine.git\ngit clone https://github.com/FlexBE/flexbe_app.git\ngit clone https://github.com/FlexBE/generic_flexbe_states.git\n\n<span class=\"c\"># BUILD</span>\n<span class=\"nb\">cd</span> ~/catkin_ws\ncatkin_make\n</code></pre>  </div></div>\n\n<h2 id=\"2-flexbe-repository-생성\">2. FlexBe Repository 생성</h2>\n<p>아래의 예시는 <code class=\"language-plaintext highlighter-rouge\">your_project_name_behaviors</code> 이름으로 repository 생성하는 것으로, repo 생성 시 생성 위치가 src 폴더 아래에 잘 생성되있는지 확인 필요하다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cd</span> ~/catkin_ws/src\nrosrun flexbe_widget create_repo <span class=\"o\">[</span>your_project_name]\n\n<span class=\"c\"># BUILD</span>\n<span class=\"nb\">cd</span> ~/catkin_ws\ncatkin_make\n</code></pre>  </div></div>\n\n<p>FlexBe Repository를 생성하면 다음과 같이 생성된다.\n<img src=\"flexbe_created_repo.png\" width=\"200\" height=\"350\" /></p>\n\n<h2 id=\"3-flexbe-app-실행\">3. FlexBe App 실행</h2>\n<p>다음의 실행 명령으로 flexbe app을 실행할 수 있다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>rosrun flexbe_app run_app\n</code></pre>  </div></div>\n\n<p>최초 실행 시 다음과 같은 flexbe app 화면을 볼 수 있다.\n<img src=\"flexbe_app_init.png\" width=\"1000\" height=\"600\" /></p>\n\n<p>처음 실행하게 되면 앞서 생성한 behavior repository가 나타나지 않는데, [Configuration] 탭에서 [Workspace] 패널의 [Force Discover]를 누르면 현재 workspace에 생성되어 있는 behavior repository를 가져온다.</p>\n\n<p><img src=\"flexbe_app_configuration.png\" width=\"1000\" height=\"600\" /></p>\n\n<p><img src=\"flexbe_app_configuration2.png\" width=\"1000\" height=\"600\" /></p>\n","dir":"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/","name":"0001Installation.md","path":"0001ROS/0001ROS1/0003Advanced/0002FlexBe/0001Installation.md","url":"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/0001Installation.html"},{"sort":1,"permalink":"/0001ROS/0001ROS1/","layout":"default","title":"ROS 1.0","content":"<h1 id=\"ros-10\">ROS 1.0</h1>\n\n<ul>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/\">BASIC</a>\n <ul>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0001Install.html\">Install</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0002Catkin.html\">Catkin</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0003CMakeList.html\">CMakeLists.txt</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0004Package-xml.html\">Package.xml</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0005Launch-System.html\">Launch System</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0006Package.html\">ROS 1 Package Structure</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0007CLI.html\">Command Line Interface</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0008Topic.html\">Topic</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0009Service.html\">Service</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0010Action.html\">Action</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0011Parameter.html\">Parameter</a></li>\n </ul>\n </li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/\">INTERMEDIATE</a>\n <ul>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/\">Actionlib</a>\n <ul>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0001actionlib.html\">actionlib</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0002actionlibBeginnerTutorials_cpp.html\">actionlib beginner tutorials(c++)</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0003actionlibBeginnerTutorials_python.html\">actionlib beginner tutorials(python)</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0004actionlibIntermediateTutorials.html\">actionlib intermediate tutorials</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0005actionlibAdvancedTutorials.html\">actionlib advanced tutorials</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0006DynamicReconfigure.html\">dynamic reconfigure</a></li>\n </ul>\n </li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0002Gazebo/\">GAZEBO</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0003rosdistro/\">rosdistro</a></li>\n </ul>\n </li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/\">ADVANCED</a>\n <ul>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/\">NAVIGATION</a>\n <ul>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/\">RobotSetup</a>\n <ul>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0001TF.html\">TF</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0002SensorStream.html\">SensorStream</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0003Odometry.html\">Odometry</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0004BaseController.html\">BaseController</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0005Mapping.html\">Mapping</a></li>\n </ul>\n </li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/\">NavigationStackSetup</a>\n <ul>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0001NavCore.html\">nav_core</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0002MoveBase.html\">move_base</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0003DWALocalPlanner.html\">dwa_local_planner</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0004GlobalPlanner.html\">global_planner</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0005DefaultRecoveryBehavior.html\">DefaultRecoveryBehavior</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0006Costmap.html\">Costmap</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0007AMCL.html\">amcl</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0008MapServer.html\">map_server</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0009NavigationTunning.html\">Navigation Tunning Guide</a></li>\n </ul>\n </li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/03MoveBaseFlex/\">MoveBaseFlex</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/04CustomPlanner/\">CustomPlanner</a></li>\n </ul>\n </li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/\">FlexBe</a>\n <ul>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/0001Installation.html\">Installation</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/0002Tutorials.html\">FlexBe Tutorials</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/0003DevelopingBasicStates.html\">Developing Basic States</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/0004RunningBehaviors.html\">Running Behaviors Without Operator</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/0005FlexBe_MBF_Example.html\">FlexBe Example for MoveBaseFlex</a></li>\n </ul>\n </li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0003Moveit/\">Moveit</a></li>\n </ul>\n </li>\n</ul>\n","dir":"/0001ROS/0001ROS1/","name":"README.md","path":"0001ROS/0001ROS1/README.md","url":"/0001ROS/0001ROS1/"},{"sort":1,"layout":"default","title":"Install","content":"<h1 id=\"install\">Install</h1>\n\n<blockquote>\n <p>foxy 버전은 <a href=\"http://releases.ubuntu.com/20.04/\">ubuntu 20.04</a>에서 사용되므로, 버전에 유의할 것.</p>\n</blockquote>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em><a href=\"https://docs.ros.org/en/foxy/Installation/Ubuntu-Install-Debians.html\">ROS 2.0 foxy 설치 페이지(debian 패키지 이용)</a></em></p>\n\n<h2 id=\"1-locale-설정\">1. Locale 설정</h2>\n<p>설치를 위해 설정된 <code class=\"language-plaintext highlighter-rouge\">locale</code>이 <code class=\"language-plaintext highlighter-rouge\">UTF-8</code>을 지원애햐 한다. 따라서 <code class=\"language-plaintext highlighter-rouge\">locale</code>을 다음과 같이 설정한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt update <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">sudo </span>apt <span class=\"nb\">install </span>locales\n<span class=\"nb\">sudo </span>locale-gen en_US en_US.UTF-8\n<span class=\"nb\">sudo </span>update-locale <span class=\"nv\">LC_ALL</span><span class=\"o\">=</span>en_US.UTF-8 <span class=\"nv\">LANG</span><span class=\"o\">=</span>en_US.UTF-8\n<span class=\"nb\">export </span><span class=\"nv\">LANG</span><span class=\"o\">=</span>en_US.UTF-8\n</code></pre>  </div></div>\n\n<h2 id=\"2-source-추가\">2. Source 추가</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">curl</code> 명령을 이용하여 <code class=\"language-plaintext highlighter-rouge\">gpg key</code>를 가져온다.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt update <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">sudo </span>apt <span class=\"nb\">install </span>curl gnupg2 lsb-release\n<span class=\"nb\">sudo </span>curl <span class=\"nt\">-sSL</span> https://raw.githubusercontent.com/ros/rosdistro/master/ros.key  <span class=\"nt\">-o</span> /usr/share/keyrings/ros-archive-keyring.gpg\n</code></pre>  </div></div>\n\n<p>그 이후, <code class=\"language-plaintext highlighter-rouge\">sources.list.d</code>에 <code class=\"language-plaintext highlighter-rouge\">ROS 2.0</code> 설치하기 위해 <code class=\"language-plaintext highlighter-rouge\">repository</code>를 추가한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">echo</span> <span class=\"s2\">\"deb [arch=</span><span class=\"si\">$(</span>dpkg <span class=\"nt\">--print-architecture</span><span class=\"si\">)</span><span class=\"s2\"> signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu </span><span class=\"si\">$(</span>lsb_release <span class=\"nt\">-cs</span><span class=\"si\">)</span><span class=\"s2\"> main\"</span> | <span class=\"nb\">sudo tee</span> /etc/apt/sources.list.d/ros2.list <span class=\"o\">&gt;</span> /dev/null\n</code></pre>  </div></div>\n\n<h2 id=\"3-설치\">3. 설치</h2>\n<p>설치하기 전, <code class=\"language-plaintext highlighter-rouge\">debian package</code>를 업데이트 한 후, <code class=\"language-plaintext highlighter-rouge\">foxy</code> 버전을 설치한다.(풀버전 설치)</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt update\n<span class=\"nb\">sudo </span>apt <span class=\"nb\">install </span>ros-foxy-desktop\n<span class=\"nb\">sudo </span>apt <span class=\"nb\">install </span>ros-foxy-ros-base\n</code></pre>  </div></div>\n\n<h2 id=\"4-개발-및-ros-tool-설치\">4. 개발 및 ROS tool 설치</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">ROS 2.0</code> 개발에 필요한 패키지들을 설치한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt update <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">sudo </span>apt <span class=\"nb\">install</span> <span class=\"nt\">-y</span> <span class=\"se\">\\</span>\n  build-essential <span class=\"se\">\\</span>\n  cmake <span class=\"se\">\\</span>\n  git <span class=\"se\">\\</span>\n  libbullet-dev <span class=\"se\">\\</span>\n  python3-colcon-common-extensions <span class=\"se\">\\</span>\n  python3-flake8 <span class=\"se\">\\</span>\n  python3-pip <span class=\"se\">\\</span>\n  python3-pytest-cov <span class=\"se\">\\</span>\n  python3-rosdep <span class=\"se\">\\</span>\n  python3-setuptools <span class=\"se\">\\</span>\n  python3-vcstool <span class=\"se\">\\</span>\n  wget\n<span class=\"c\"># install some pip packages needed for testing</span>\npython3 <span class=\"nt\">-m</span> pip <span class=\"nb\">install</span> <span class=\"nt\">-U</span> <span class=\"se\">\\</span>\n  argcomplete <span class=\"se\">\\</span>\n  flake8-blind-except <span class=\"se\">\\</span>\n  flake8-builtins <span class=\"se\">\\</span>\n  flake8-class-newline <span class=\"se\">\\</span>\n  flake8-comprehensions <span class=\"se\">\\</span>\n  flake8-deprecated <span class=\"se\">\\</span>\n  flake8-docstrings <span class=\"se\">\\</span>\n  flake8-import-order <span class=\"se\">\\</span>\n  flake8-quotes <span class=\"se\">\\</span>\n  pytest-repeat <span class=\"se\">\\</span>\n  pytest-rerunfailures <span class=\"se\">\\</span>\n  pytest\n<span class=\"c\"># install Fast-RTPS dependencies</span>\n<span class=\"nb\">sudo </span>apt <span class=\"nb\">install</span> <span class=\"nt\">--no-install-recommends</span> <span class=\"nt\">-y</span> <span class=\"se\">\\</span>\n  libasio-dev <span class=\"se\">\\</span>\n  libtinyxml2-dev\n<span class=\"c\"># install Cyclone DDS dependencies</span>\n<span class=\"nb\">sudo </span>apt <span class=\"nb\">install</span> <span class=\"nt\">--no-install-recommends</span> <span class=\"nt\">-y</span> <span class=\"se\">\\</span>\n  libcunit1-dev\n</code></pre>  </div></div>\n\n<p>작업 공간을 만들고, 저장소들을 불러온다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">mkdir</span> <span class=\"nt\">-p</span> ~/ros2_foxy/src\n<span class=\"nb\">cd</span> ~/ros2_foxy\nwget https://raw.githubusercontent.com/ros2/ros2/foxy/ros2.repos\nvcs import src &lt; ros2.repos\n</code></pre>  </div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">rosdep</code> 명령어를 이용하여 의존성 패키지들을 설치한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>rosdep init\nrosdep update\nrosdep <span class=\"nb\">install</span> <span class=\"nt\">--from-paths</span> src <span class=\"nt\">--ignore-src</span> <span class=\"nt\">--rosdistro</span> foxy <span class=\"nt\">-y</span> <span class=\"nt\">--skip-keys</span> <span class=\"s2\">\"console_bridge fastcdr fastrtps rti-connext-dds-5.3.1 urdfdom_headers\"</span>\n</code></pre>  </div></div>\n\n<p>작업공간에 설치된 패키지들을 빌드하면, <code class=\"language-plaintext highlighter-rouge\">ROS</code> 작업에 필요한 기본 패키지들을 설치할 수 있다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cd</span> ~/ros2_foxy/\ncolcon build <span class=\"nt\">--symlink-install</span>\n</code></pre>  </div></div>\n\n<h2 id=\"5-설치-확인\">5. 설치 확인</h2>\n<p>설치 확인을 위해 다음과 같은 예제를 실행한다.</p>\n\n<ul>\n <li>C++ talker\n터미널창을 열어 <code class=\"language-plaintext highlighter-rouge\">C++ talker</code>를 실행한다.\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">source</span> /opt/ros/foxy/setup.bash\nros2 run demo_nodes_cpp talker\n</code></pre>  </div> </div>\n </li>\n <li>Python listener\n또 다른 터미널창을 열어 <code class=\"language-plaintext highlighter-rouge\">Python listener</code>를 실행한다.\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">source</span> /opt/ros/foxy/setup.bash\nros2 run demo_nodes_py listener\n</code></pre>  </div> </div>\n </li>\n</ul>\n\n<p>그 결과, <code class=\"language-plaintext highlighter-rouge\">talker</code>에서 <code class=\"language-plaintext highlighter-rouge\">publish</code>하는 <code class=\"language-plaintext highlighter-rouge\">message</code>를 <code class=\"language-plaintext highlighter-rouge\">listener</code>의 터미널창에서 <code class=\"language-plaintext highlighter-rouge\">subscribe</code>하는 것을 볼 수 있다.</p>\n","dir":"/0001ROS/0002ROS2/0001Basic/","name":"0001Install.md","path":"0001ROS/0002ROS2/0001Basic/0001Install.md","url":"/0001ROS/0002ROS2/0001Basic/0001Install.html"},{"sort":1,"permalink":"/0001ROS/0002ROS2/0002Intermediate/0001RQT/","layout":"default","title":"RQT","content":"<h1 id=\"rqt\">RQT</h1>\n\n","dir":"/0001ROS/0002ROS2/0002Intermediate/0001RQT/","name":"README.md","path":"0001ROS/0002ROS2/0002Intermediate/0001RQT/README.md","url":"/0001ROS/0002ROS2/0002Intermediate/0001RQT/"},{"sort":1,"permalink":"/0001ROS/0002ROS2/0003Advanced/0001Navigation2/","layout":"default","title":"NAVIGATION2","content":"<h1 id=\"navigation2\">NAVIGATION2</h1>\n\n","dir":"/0001ROS/0002ROS2/0003Advanced/0001Navigation2/","name":"README.md","path":"0001ROS/0002ROS2/0003Advanced/0001Navigation2/README.md","url":"/0001ROS/0002ROS2/0003Advanced/0001Navigation2/"},{"sort":1,"permalink":"/0001ROS/","layout":"default","title":"ROS","content":"<h1 id=\"ros\">ROS</h1>\n\n<ul>\n <li><a href=\"/0001ROS/0001ROS1/\">ROS 1.0</a>\n <ul>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/\">BASIC</a>\n <ul>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0001Install.html\">Install</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0002Catkin.html\">Catkin</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0003CMakeList.html\">CMakeLists.txt</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0004Package-xml.html\">Package.xml</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0005Launch-System.html\">Launch System</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0006Package.html\">ROS 1 Package Structure</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0007CLI.html\">Command Line Interface</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0008Topic.html\">Topic</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0009Service.html\">Service</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0010Action.html\">Action</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0001Basic/0011Parameter.html\">Parameter</a></li>\n </ul>\n </li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/\">INTERMEDIATE</a>\n <ul>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/\">Actionlib</a>\n <ul>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0001actionlib.html\">actionlib</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0002actionlibBeginnerTutorials_cpp.html\">actionlib beginner tutorials(c++)</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0003actionlibBeginnerTutorials_python.html\">actionlib beginner tutorials(python)</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0004actionlibIntermediateTutorials.html\">actionlib intermediate tutorials</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0005actionlibAdvancedTutorials.html\">actionlib advanced tutorials</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0006DynamicReconfigure.html\">dynamic reconfigure</a></li>\n </ul>\n </li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0002Gazebo/\">GAZEBO</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0003rosdistro/\">rosdistro</a></li>\n </ul>\n </li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/\">ADVANCED</a>\n <ul>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/\">NAVIGATION</a>\n <ul>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/\">RobotSetup</a>\n <ul>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0001TF.html\">TF</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0002SensorStream.html\">SensorStream</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0003Odometry.html\">Odometry</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0004BaseController.html\">BaseController</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0005Mapping.html\">Mapping</a></li>\n </ul>\n </li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/\">NavigationStackSetup</a>\n <ul>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0001NavCore.html\">nav_core</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0002MoveBase.html\">move_base</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0003DWALocalPlanner.html\">dwa_local_planner</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0004GlobalPlanner.html\">global_planner</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0005DefaultRecoveryBehavior.html\">DefaultRecoveryBehavior</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0006Costmap.html\">Costmap</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0007AMCL.html\">amcl</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0008MapServer.html\">map_server</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0009NavigationTunning.html\">Navigation Tunning Guide</a></li>\n </ul>\n </li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/03MoveBaseFlex/\">MoveBaseFlex</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/04CustomPlanner/\">CustomPlanner</a></li>\n </ul>\n </li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/\">FlexBe</a>\n <ul>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/0001Installation.html\">Installation</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/0002Tutorials.html\">FlexBe Tutorials</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/0003DevelopingBasicStates.html\">Developing Basic States</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/0004RunningBehaviors.html\">Running Behaviors Without Operator</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/0005FlexBe_MBF_Example.html\">FlexBe Example for MoveBaseFlex</a></li>\n </ul>\n </li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0003Moveit/\">Moveit</a></li>\n </ul>\n </li>\n </ul>\n </li>\n <li><a href=\"/0001ROS/0002ROS2/\">ROS 2.0</a>\n <ul>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/\">BASIC</a>\n <ul>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0001Install.html\">Install</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0002Colcon.html\">Colcon</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0003CMakeList.html\">CMakeLists.txt</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0004Package-xml.html\">Package.xml</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0005Setup.html\">setup.py</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0006Launch-System.html\">Launch System</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0007Package.html\">ROS 2 Package Structure</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0008CLI.html\">Command Line Interface</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0009InterfacePackage.html\">Interface Package</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0010Topic.html\">Topic</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0011Service.html\">Service</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0012Action.html\">Action</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0013Parameter.html\">Parameter</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0014Log.html\">Log</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0015DDS.html\">DDS</a></li>\n </ul>\n </li>\n <li><a href=\"/0001ROS/0002ROS2/0002Intermediate/\">INTERMEDIATE</a>\n <ul>\n <li><a href=\"/0001ROS/0002ROS2/0002Intermediate/0001RQT/\">RQT</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0002Intermediate/0002Ignition/\">IGNITION</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0002Intermediate/0003rosdistro/\">rosdistro</a></li>\n </ul>\n </li>\n <li><a href=\"/0001ROS/0002ROS2/0003Advanced/\">ADVANCED</a>\n <ul>\n <li><a href=\"/0001ROS/0002ROS2/0003Advanced/0001Navigation2/\">NAVIGATION2</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0003Advanced/0002RMF/\">RMF</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0003Advanced/0003Moveit2/\">Moveit2</a></li>\n </ul>\n </li>\n </ul>\n </li>\n</ul>\n","dir":"/0001ROS/","name":"README.md","path":"0001ROS/README.md","url":"/0001ROS/"},{"sort":1,"layout":"default","title":"Homogeneous Transformations","content":"<h1 id=\"homogeneous-transformations\">Homogeneous Transformations</h1>\n\n<p><em>- <a href=\"https://books.google.co.kr/books?id=DdjNDwAAQBAJ&amp;printsec=frontcover&amp;dq=Robot+Modeling+and+Control&amp;hl=ko&amp;sa=X&amp;redir_esc=y#v=onepage&amp;q=Robot%20Modeling%20and%20Control&amp;f=false\">Robot Modeling and Control(M. W. Spong, ‎Seth Hutchinson, ‎M. Vidyasagar)</a></em></p>\n\n<p><em>- <a href=\"https://books.google.co.kr/books?id=6SoQRAAACAAJ&amp;dq=Robot+Dynamics+and+Control+2nd+Edition&amp;hl=ko&amp;sa=X&amp;redir_esc=y\">Robot Dynamics and Control 2nd Edition(M. W. Spong, M. Vidyasagar)</a></em></p>\n\n","dir":"/0002ROBOTICS/0001RobotDynamics/","name":"0001HomogeneousTransformations.md","path":"0002ROBOTICS/0001RobotDynamics/0001HomogeneousTransformations.md","url":"/0002ROBOTICS/0001RobotDynamics/0001HomogeneousTransformations.html"},{"sort":1,"permalink":"/0002ROBOTICS/0001RobotDynamics/","layout":"default","title":"Robot Dynamics","content":"<h1 id=\"robot-dynamics\">Robot Dynamics</h1>\n\n<ul>\n <li><a href=\"/0002ROBOTICS/0001RobotDynamics/0001HomogeneousTransformations.html\">Homogeneous Transformations</a></li>\n <li><a href=\"/0002ROBOTICS/0001RobotDynamics/0002ForwardKinematics.html\">Forward Kinematics</a></li>\n <li><a href=\"/0002ROBOTICS/0001RobotDynamics/0003InverseKinematics.html\">Inverse Kinematics</a></li>\n <li><a href=\"/0002ROBOTICS/0001RobotDynamics/0004VelocityKinematics.html\">Velocity Kinematics</a></li>\n <li><a href=\"/0002ROBOTICS/0001RobotDynamics/0005Dynamics.html\">Dynamics</a></li>\n <li><a href=\"/0002ROBOTICS/0001RobotDynamics/0006TrajectoryPlanning.html\">Trajectory Planning</a></li>\n <li><a href=\"/0002ROBOTICS/0001RobotDynamics/0007IndependentJointControl.html\">Independent Joint Control</a></li>\n <li><a href=\"/0002ROBOTICS/0001RobotDynamics/0008ForceControl.html\">Force Control</a></li>\n</ul>\n","dir":"/0002ROBOTICS/0001RobotDynamics/","name":"README.md","path":"0002ROBOTICS/0001RobotDynamics/README.md","url":"/0002ROBOTICS/0001RobotDynamics/"},{"sort":1,"layout":"default","title":"If Initializer","content":"<h1 id=\"if-initializer\">If Initializer</h1>\n\n<ul>\n <li>참고문헌 : 전문가를 위한 C++(마크 그레고리 / 한빛미디어)</li>\n</ul>\n\n<p><code class=\"language-plaintext highlighter-rouge\">C++17</code>부터 <code class=\"language-plaintext highlighter-rouge\">if</code> 문 안에 이니셜라이저를 넣는 기능이 추가되었음.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"err\">이니셜라이저</span><span class=\"o\">&gt;</span> <span class=\"p\">;</span> <span class=\"o\">&lt;</span><span class=\"err\">조건문</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"o\">&lt;</span><span class=\"err\">본문</span><span class=\"o\">&gt;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">&lt;이니셜라이저&gt;</code>에서 정의한 변수는 <code class=\"language-plaintext highlighter-rouge\">&lt;조건문&gt;</code>과 <code class=\"language-plaintext highlighter-rouge\">&lt;본문&gt;</code> 안에서만 사용할 수 있고, <code class=\"language-plaintext highlighter-rouge\">if</code> 문 밖에서는 사용할 수 없음.</p>\n\n<p>다음 예시는 <code class=\"language-plaintext highlighter-rouge\">&lt;이니셜라이저&gt;</code>로 직원 정보를 가져와서, <code class=\"language-plaintext highlighter-rouge\">&lt;조건문&gt;</code>에서 그 직원의 급여가 1000 이상인지 확인하고, 참이라면 <code class=\"language-plaintext highlighter-rouge\">&lt;본문&gt;</code>을 실행</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">Employee</span> <span class=\"n\">employee</span> <span class=\"o\">=</span> <span class=\"n\">GetEmployee</span><span class=\"p\">()</span> <span class=\"p\">;</span> <span class=\"n\">employee</span><span class=\"p\">.</span><span class=\"n\">salary</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"p\">...</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n","dir":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/","name":"0001If-initializer.md","path":"0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0001If-initializer.md","url":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0001If-initializer.html"},{"sort":1,"permalink":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/","layout":"default","title":"Chapter 1. A Crash Course in C++ and the Standard Library","content":"<h1 id=\"chapter-1-a-crash-course-in-c-and-the-standard-library\">Chapter 1. A Crash Course in C++ and the Standard Library</h1>\n\n<ul>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0001If-initializer.html\">If Initializer</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0002Switch-initializer.html\">Switch Initializer</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0003vector.html\">vector 기초</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0004Initializer-list.html\">initializer_list</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0005Range-based-for-statement.html\">범위 기반 for 문</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0006Smart-pointer-basic.html\">스마트 포인터 기본</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0007Exception.html\">Exception</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0008Type-inference.html\">타입 추론</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0009Class_definition.html\">Class 정의</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0010Uniform-initialization.html\">유니폼 이니셜라이저</a></li>\n</ul>\n","dir":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/","name":"README.md","path":"0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/README.md","url":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/"},{"sort":1,"layout":"default","title":"C style String","content":"<h1 id=\"c-style-string\">C style String</h1>\n\n<ul>\n <li>참고문헌 : 전문가를 위한 C++(마크 그레고리 / 한빛미디어)</li>\n</ul>\n\n<h2 id=\"nul\">NUL</h2>\n<p>C 스트링은 스트링의 마지막에 널(NUL) 문자 <code class=\"language-plaintext highlighter-rouge\">\\0</code>를 붙여서 스트링이 끝났음을 표한한다. 예를 들어, ‘hello’란 스트링을 구성하는 문자는 다섯 개이지만, 메모리에 저장할 때는 문자 여섯 개의 공간이 필요하다.</p>\n\n<h2 id=\"cstring\">cstring</h2>\n<p>C++에서 C언어세서 사용하는 스트링 연산 함수를 사용하기 위해서 <code class=\"language-plaintext highlighter-rouge\">&lt;cstring&gt;</code> 헤더를 사용한다.</p>\n\n<p>C 언어에서 사용되는 스트링 함수 몇 가지를 살펴보자</p>\n\n<h2 id=\"strcpy\">strcpy()</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">strcpy()</code> 함수는 스트링 타입 매개변수 두 개를 받아서 두 번째 스트링을 첫 번째 스트링에 복사한다. 이 때 두 스트링의 길이가 같은지 확인하지 않는다.</p>\n\n<h2 id=\"strlen\">strlen()</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">strlen()</code> 함수는 스트링의 길이를 리턴한다. 이 때, 널 값을 포함하지 않은 길이만큼 리턴한다.</p>\n\n<p>다음은 <code class=\"language-plaintext highlighter-rouge\">strcpy()</code>와 <code class=\"language-plaintext highlighter-rouge\">strlen()</code>함수를 이용하여 스트링을 복사하여 리턴하는 <code class=\"language-plaintext highlighter-rouge\">copyString()</code> 함수의 구현 예제이다.</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"nf\">copyString</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">str</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">new</span> <span class=\"kt\">char</span><span class=\"p\">[</span><span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n  <span class=\"n\">strcpy</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">sizeof()</code> 함수는 데이터 타입이나 변수의 크기를 구하는데 사용되므로, <code class=\"language-plaintext highlighter-rouge\">strlen()</code> 함수와 다른 결과가 나온다. <code class=\"language-plaintext highlighter-rouge\">sizeof()</code>의 경우 널 값을 포함하여 리턴하는 반면, <code class=\"language-plaintext highlighter-rouge\">strlen()</code>는 널 값을 포함하지 않기 때문에 <code class=\"language-plaintext highlighter-rouge\">char[]</code> 변수에 대한 리턴값이 다르게 된다. 또한, <code class=\"language-plaintext highlighter-rouge\">char*</code>로 저장된 변수에 대한 리턴값은 <code class=\"language-plaintext highlighter-rouge\">sizeof()</code>의 경우 포인터의 크기를 리턴하고, <code class=\"language-plaintext highlighter-rouge\">strlen</code>의 경우에는 널 값을 제외한 길이를 리턴하므로 그 값에 차이가 발생한다.</li>\n</ul>\n\n<h2 id=\"strcat\">strcat()</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">strcat()</code> 함수는 스트링 매개변수 두 개를 받아서 첫 번째 스트링에 두 번째 스트링을 이어붙이는 함수이다. 다음은 <code class=\"language-plaintext highlighter-rouge\">strcat()</code> 함수를 이용하여 여러 개의 스트링 매개변수들을 이어 붙여 리턴하는 <code class=\"language-plaintext highlighter-rouge\">appendStrings()</code> 함수의 구현 예제이다.</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"nf\">appendStrings</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">str1</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">shar</span><span class=\"o\">*</span> <span class=\"n\">str2</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">str3</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">new</span> <span class=\"kt\">char</span><span class=\"p\">[</span><span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">str1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">str2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">str3</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n  <span class=\"n\">strcpy</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">str1</span><span class=\"p\">);</span>\n  <span class=\"n\">strcat</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">str2</span><span class=\"p\">);</span>\n  <span class=\"n\">strcat</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">str3</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n","dir":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/","name":"0001C_string.md","path":"0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/0001C_string.md","url":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/0001C_string.html"},{"sort":1,"permalink":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/","layout":"default","title":"Part 1. Introduction to Professional C++","content":"<h1 id=\"part-1-introduction-to-professional-c\">Part 1. Introduction to Professional C++</h1>\n\n<ul>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/\">Chapter 1. A Crash Course in C++ and the Standard Library</a>\n <ul>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0001If-initializer.html\">If Initializer</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0002Switch-initializer.html\">Switch Initializer</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0003vector.html\">vector 기초</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0004Initializer-list.html\">initializer_list</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0005Range-based-for-statement.html\">범위 기반 for 문</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0006Smart-pointer-basic.html\">스마트 포인터 기본</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0007Exception.html\">Exception</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0008Type-inference.html\">타입 추론</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0009Class_definition.html\">Class 정의</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0010Uniform-initialization.html\">유니폼 이니셜라이저</a></li>\n </ul>\n </li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/\">Chapter 2. Working with Strings and String Views</a>\n <ul>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/0001C_string.html\">C style String</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/0002StringLiteral.html\">String Literal</a></li>\n </ul>\n </li>\n</ul>\n","dir":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/","name":"README.md","path":"0003Software/0001Languages/0001C++/0001Professional_C++/Part1/README.md","url":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/"},{"sort":1,"permalink":"/0003Software/0001Languages/0001C++/0001Professional_C++/","layout":"default","title":"Professional C++","content":"<h1 id=\"professional-c\">Professional C++</h1>\n\n<p>본 페이지는 Marc Gregoire 의 <a href=\"https://books.google.co.kr/books?id=YnAUEAAAQBAJ&amp;printsec=frontcover&amp;dq=professional+c%2B%2B&amp;hl=ko&amp;sa=X&amp;redir_esc=y#v=onepage&amp;q=professional%20c%2B%2B&amp;f=false\">Professional C++</a>(번역본 - 전문가를 위한 C++(마크 그레고리 / 한빛미디어))의 내용 중 일부를 정리한 페이지이다.</p>\n\n<ul>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/\">Part 1. Introduction to Professional C++</a>\n <ul>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/\">Chapter 1. A Crash Course in C++ and the Standard Library</a>\n <ul>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0001If-initializer.html\">If Initializer</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0002Switch-initializer.html\">Switch Initializer</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0003vector.html\">vector 기초</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0004Initializer-list.html\">initializer_list</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0005Range-based-for-statement.html\">범위 기반 for 문</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0006Smart-pointer-basic.html\">스마트 포인터 기본</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0007Exception.html\">Exception</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0008Type-inference.html\">타입 추론</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0009Class_definition.html\">Class 정의</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0010Uniform-initialization.html\">유니폼 이니셜라이저</a></li>\n </ul>\n </li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/\">Chapter 2. Working with Strings and String Views</a>\n <ul>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/0001C_string.html\">C style String</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/0002StringLiteral.html\">String Literal</a></li>\n </ul>\n </li>\n </ul>\n </li>\n</ul>\n","dir":"/0003Software/0001Languages/0001C++/0001Professional_C++/","name":"README.md","path":"0003Software/0001Languages/0001C++/0001Professional_C++/README.md","url":"/0003Software/0001Languages/0001C++/0001Professional_C++/"},{"sort":1,"permalink":"/0003Software/0001Languages/0001C++/","layout":"default","title":"C++","content":"<h1 id=\"c\">C++</h1>\n\n<ul>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/\">Professional C++</a>\n <ul>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/\">Part 1. Introduction to Professional C++</a>\n <ul>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/\">Chapter 1. A Crash Course in C++ and the Standard Library</a>\n <ul>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0001If-initializer.html\">If Initializer</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0002Switch-initializer.html\">Switch Initializer</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0003vector.html\">vector 기초</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0004Initializer-list.html\">initializer_list</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0005Range-based-for-statement.html\">범위 기반 for 문</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0006Smart-pointer-basic.html\">스마트 포인터 기본</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0007Exception.html\">Exception</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0008Type-inference.html\">타입 추론</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0009Class_definition.html\">Class 정의</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0010Uniform-initialization.html\">유니폼 이니셜라이저</a></li>\n </ul>\n </li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/\">Chapter 2. Working with Strings and String Views</a>\n <ul>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/0001C_string.html\">C style String</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/0002StringLiteral.html\">String Literal</a></li>\n </ul>\n </li>\n </ul>\n </li>\n </ul>\n </li>\n</ul>\n","dir":"/0003Software/0001Languages/0001C++/","name":"README.md","path":"0003Software/0001Languages/0001C++/README.md","url":"/0003Software/0001Languages/0001C++/"},{"sort":1,"permalink":"/0003Software/0001Languages/","layout":"default","title":"Programming Languages","content":"<h1 id=\"programming-languages\">Programming Languages</h1>\n\n<ul>\n <li><a href=\"/0003Software/0001Languages/0001C++/\">C++</a>\n <ul>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/\">Professional C++</a>\n <ul>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/\">Part 1. Introduction to Professional C++</a>\n <ul>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/\">Chapter 1. A Crash Course in C++ and the Standard Library</a>\n <ul>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0001If-initializer.html\">If Initializer</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0002Switch-initializer.html\">Switch Initializer</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0003vector.html\">vector 기초</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0004Initializer-list.html\">initializer_list</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0005Range-based-for-statement.html\">범위 기반 for 문</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0006Smart-pointer-basic.html\">스마트 포인터 기본</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0007Exception.html\">Exception</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0008Type-inference.html\">타입 추론</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0009Class_definition.html\">Class 정의</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0010Uniform-initialization.html\">유니폼 이니셜라이저</a></li>\n </ul>\n </li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/\">Chapter 2. Working with Strings and String Views</a>\n <ul>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/0001C_string.html\">C style String</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/0002StringLiteral.html\">String Literal</a></li>\n </ul>\n </li>\n </ul>\n </li>\n </ul>\n </li>\n </ul>\n </li>\n <li><a href=\"/0003Software/0001Languages/0002Python/\">Python</a></li>\n</ul>\n","dir":"/0003Software/0001Languages/","name":"README.md","path":"0003Software/0001Languages/README.md","url":"/0003Software/0001Languages/"},{"sort":1,"permalink":"/0003Software/0002Computer/0001Algorithm/","layout":"default","title":"Algorithm","content":"<h1 id=\"algorithm\">Algorithm</h1>\n\n","dir":"/0003Software/0002Computer/0001Algorithm/","name":"README.md","path":"0003Software/0002Computer/0001Algorithm/README.md","url":"/0003Software/0002Computer/0001Algorithm/"},{"sort":1,"layout":"default","title":"OS","content":"<h1 id=\"os\">OS</h1>\n","dir":"/0003Software/0002Computer/0004Knowledges/","name":"0001OS.md","path":"0003Software/0002Computer/0004Knowledges/0001OS.md","url":"/0003Software/0002Computer/0004Knowledges/0001OS.html"},{"sort":1,"layout":"default","title":"Command","content":"<h1 id=\"command\">Command</h1>\n\n<p>git을 사용하면서 주로 사용되는 명령어 정리</p>\n\n<h2 id=\"init\">init</h2>\n<p>현재 디렉토리 git 저장소로 초기화</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git init\n</code></pre>  </div></div>\n\n<h2 id=\"clone\">clone</h2>\n<p>원격 저장소의 git 복제</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git clone &lt;remote_repository_url&gt;\n\n<span class=\"c\"># 특정 브랜치 clone</span>\ngit clone &lt;remote_repository_url&gt; <span class=\"nt\">-b</span> &lt;branch_name&gt;\n</code></pre>  </div></div>\n\n<h2 id=\"remote\">remote</h2>\n<p>원격 저장소 추가</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git remote add &lt;remote_repository_name&gt; &lt;remote_repository_url&gt;\n</code></pre>  </div></div>\n\n<h2 id=\"config\">config</h2>\n<p>저장소 설정</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 전역 사용자/이메일 설정</span>\ngit conifg <span class=\"nt\">--global</span> user.name <span class=\"s2\">\"name\"</span>\ngit config <span class=\"nt\">--global</span> user.email <span class=\"s2\">\"email\"</span>\n\n<span class=\"c\"># 로컬 사용자/이메일 설정</span>\ngit config user.name <span class=\"s2\">\"name\"</span>\ngit config user.email <span class=\"s2\">\"email\"</span>\n\n<span class=\"c\"># 전역 정보 조회</span>\ngit config <span class=\"nt\">--global</span> <span class=\"nt\">--list</span>\n\n<span class=\"c\"># 로컬 정보 조회</span>\ngit config <span class=\"nt\">--list</span>\n</code></pre>  </div></div>\n\n<h2 id=\"add\">add</h2>\n<p>변경된 사항 stage 상태로 바꾸기</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 전체 변경 사항 스테이징</span>\ngit add <span class=\"nt\">-A</span>\n\n<span class=\"c\"># 특정 파일 스테이징</span>\ngit add &lt;file_name&gt;\n</code></pre>  </div></div>\n\n<h2 id=\"commit\">commit</h2>\n<p>stage에 있는 변경사항들 커밋하기</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git commit\n\n<span class=\"c\"># 커밋 메시지 한번에 포함하여 커밋하기</span>\ngit commit <span class=\"nt\">-m</span> <span class=\"s2\">\"commit message\"</span>\n\n<span class=\"c\"># 마지막 커밋 고치기</span>\ngit commit <span class=\"nt\">-m</span> <span class=\"s2\">\"commit message\"</span> <span class=\"nt\">--amend</span>\n</code></pre>  </div></div>\n\n<h2 id=\"branch\">branch</h2>\n<p>새로운 branch를 생성하고, branch 관리</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 브랜치 목록 보기</span>\ngit branch\n\n<span class=\"c\"># 원격 브랜치 목록 보기</span>\ngit branch <span class=\"nt\">-r</span>\n\n<span class=\"c\"># 로컬 및 원격 브랜치 목록 보기</span>\ngit branch <span class=\"nt\">-a</span>\n\n<span class=\"c\"># 새로운 브랜치 생성하기</span>\ngit branch &lt;branch_name&gt;\n\n<span class=\"c\"># 브랜치 삭제하기</span>\ngit branch <span class=\"nt\">-d</span> &lt;branch_name&gt;\n</code></pre>  </div></div>\n\n<h2 id=\"checkout\">checkout</h2>\n<p>다른 브렌치로 체크아웃</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git checkout &lt;branch_name&gt;\n</code></pre>  </div></div>\n\n<h2 id=\"merge\">merge</h2>\n<p>다른 브랜치를 현재 브랜치로 머지</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git merge &lt;branch_name&gt;\n\n<span class=\"c\"># 커밋하지 않고 머지</span>\ngit merge <span class=\"nt\">--no-commit</span> &lt;branch_name&gt;\n\n<span class=\"c\"># 브랜치 이력을 살린 상태로 머지</span>\ngit merge <span class=\"nt\">--squash</span> &lt;branch_name&gt;\n</code></pre>  </div></div>\n\n<h2 id=\"rebase\">rebase</h2>\n<p>브랜치의 분기점을 특정 브랜치로 옮기는 작업</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 특정 branch의 base를 base branch라는 branch로 베이스를 바꾸기</span>\ngit branch &lt;base branch&gt; &lt;branch_name&gt;\n</code></pre>  </div></div>\n\n<h2 id=\"log\">log</h2>\n<p>깃 이력 확인</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git log\n\n<span class=\"c\"># 패치와 함께 로그 표시</span>\ngit log <span class=\"nt\">-p</span>\n\n<span class=\"c\"># 로그의 항목 개수 N개로 설정</span>\ngit log <span class=\"nt\">-N</span>\n</code></pre>  </div></div>\n\n<h2 id=\"diff\">diff</h2>\n<p>파일의 변경내용 확인</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 최신 commit과 현재 수정상태 비교</span>\ngit diff\n\n<span class=\"c\"># 최신 commit과 스테이징된 파일 비교</span>\ngit diff <span class=\"nt\">--staged</span>\n\n<span class=\"c\"># commit 간 비교</span>\ngit diff &lt;commit1_hash&gt; &lt;commit2_hash&gt;\n\n<span class=\"c\"># 브랜치 간 비교</span>\ngit diff &lt;branch_name_1&gt; &lt;branch_name_2&gt;\n</code></pre>  </div></div>\n\n<h2 id=\"fetch\">fetch</h2>\n<p>원격 저장소의 변경 사항 가져오기(merge 안됨)</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git fetch\n\n<span class=\"c\"># 특정 원격 저장소의 변경 사항 가져오기</span>\ngit fetch &lt;remote_repository_name&gt;\n</code></pre>  </div></div>\n\n<h2 id=\"pull\">pull</h2>\n<p>원격 저장소의 변경 사항 가져오기(merge 됨)</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git pull\n\n<span class=\"c\"># 특정 원격 저장소의 변경 사항 가져오기</span>\ngit pull &lt;remote_repository_name&gt;\n</code></pre>  </div></div>\n\n<h2 id=\"push\">push</h2>\n<p>원격 저장소에 로컬 저장소 내용 푸시하기</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 특정 원격 저장소의 로컬과 동일한 브랜치 이름에 푸시하기</span>\ngit push &lt;remote_repository_name&gt; &lt;branch_name&gt;\n\n<span class=\"c\"># 특정 원격 저장소의 특정 브랜치 이름에 푸시하기</span>\ngit push &lt;remote_repository_name&gt; &lt;local_branch_name&gt;:&lt;remote_branch_name&gt;\n\n<span class=\"c\"># 원격 저장소 브랜치 삭제</span>\ngit push &lt;remote_repository_name&gt; <span class=\"nt\">--delete</span> &lt;remote_branch_name&gt;\n</code></pre>  </div></div>\n\n<h2 id=\"reset\">reset</h2>\n<p>특정 커밋 상태로 돌아가며, 그 이후에 생성된 커밋은 삭제함</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># commit ID로 돌아가며, 변경된 내용은 모두 stage에 올라감</span>\ngit reset <span class=\"nt\">--soft</span> &lt;commit ID&gt;\n\n<span class=\"c\"># commit ID로 돌아가며, 변경된 내용은 모두 유지됨</span>\ngit reset <span class=\"nt\">--mixed</span> &lt;commit ID&gt;\n\n<span class=\"c\"># commit ID로 돌아가며, 변경된 내용은 모두 삭제됨</span>\ngit reset <span class=\"nt\">--hard</span> &lt;commit ID&gt;\n\n<span class=\"c\"># 가장 최근 커밋 취소</span>\ngit reset HEAD^\n\n<span class=\"c\"># 현재 커밋부터 N 번째 이전의 커밋으로 돌아감</span>\ngit reset HEAD~N\n</code></pre>  </div></div>\n\n<h2 id=\"revert\">revert</h2>\n<p>특정 커밋 상태로 돌아가며, 그 이후의 생성된 커밋은 모두 보존됨</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git revert &lt;commit ID&gt;\n</code></pre>  </div></div>\n\n<h2 id=\"stash\">stash</h2>\n<p>현재 작업 중인 내용을 커밋하지 않고 임시 저장하고, 변경 내용을 초기화하는데 사용</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 현재 작업 중인 내용 stash</span>\ngit stash\n\n<span class=\"c\"># stash 목록 보기</span>\ngit stash <span class=\"nt\">-list</span>\n\n<span class=\"c\"># stash에 저장된 최신 내용 가져오고, 해당 내용 삭제</span>\ngit stash pop\n\n<span class=\"c\"># stash에 저장된 내용 중 특정 내용 가져오고, 해당 내용 삭제</span>\ngit stash pop stash@<span class=\"o\">{</span>&lt;stash number&gt;<span class=\"o\">}</span>\n\n<span class=\"c\"># stash에 저장된 최신 내용을 삭제</span>\ngit stash drop\n\n<span class=\"c\"># stash에 저장된 내용 중 특정 내용을 삭제</span>\ngit stash drop stash@<span class=\"o\">{</span>&lt;stash number&gt;<span class=\"o\">}</span>\n\n<span class=\"c\"># stash 내용 전체 삭제</span>\ngit stash clear\n</code></pre>  </div></div>\n\n<h2 id=\"status\">status</h2>\n<p>현재 git의 상태정보를 불러옴</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git status\n</code></pre>  </div></div>\n","dir":"/0004Tools/0001DevelopmentTool/0001Git/","name":"0001Command.md","path":"0004Tools/0001DevelopmentTool/0001Git/0001Command.md","url":"/0004Tools/0001DevelopmentTool/0001Git/0001Command.html"},{"sort":1,"permalink":"/0004Tools/0001DevelopmentTool/0001Git/","layout":"default","title":"GIT","content":"<h1 id=\"git\">GIT</h1>\n\n<ul>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0001Command.html\">Command</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0002Git.html\">Git</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0003Commit.html\">Commit</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0004Merge.html\">Merge &amp; Rebase</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0005Branch.html\">Branch</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0006ISSUE.html\">PR &amp; ISSUE</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0007Fork.html\">Fork &amp; Pull Request</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0008License.html\">License</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0009Linter.html\">Linter &amp; Action</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0010Submodule.html\">Submodule</a></li>\n</ul>\n","dir":"/0004Tools/0001DevelopmentTool/0001Git/","name":"README.md","path":"0004Tools/0001DevelopmentTool/0001Git/README.md","url":"/0004Tools/0001DevelopmentTool/0001Git/"},{"sort":1,"layout":"default","title":"Command","content":"<h1 id=\"command\">Command</h1>\n<p>Linux 환경에서 사용되는 기본적인 명령어들의 모음</p>\n\n<h2 id=\"a\">A</h2>\n\n<ul>\n <li>alias : 명령어를 간소화하여 다른 이름으로 사용할 수 있도록 해주는 쉘 내부 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 현재 등록되어 있는 alias 목록 </span>\n<span class=\"nb\">alias</span>\n\n<span class=\"c\"># alias 등록</span>\n<span class=\"nb\">alias</span> <span class=\"o\">[</span>alias_name]<span class=\"o\">=</span><span class=\"s1\">'[command_name]'</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>apt-cache : 패키지 검색 도구</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 패키지 검색</span>\napt-cache search <span class=\"o\">[</span>package_name]\n\n<span class=\"c\"># 패키지 정보 보기</span>\napt-cache show <span class=\"o\">[</span>package_name]\n\n<span class=\"c\"># 패키지 의존성 확인</span>\napt-cache depends <span class=\"o\">[</span>package_name]\n\n<span class=\"c\"># 패키지 역 의존성 확인</span>\napt-cache rdepends <span class=\"o\">[</span>package_name]\n</code></pre>  </div></div>\n\n<ul>\n <li>apt, apt-get : 데비안 계열의 리눅스에서 쓰이는 패키지 관리 명령어 도구</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 패키지 인덱스 업데이트(/etc/apt/source.list의 인덱스 정보 이용)</span>\n<span class=\"nb\">sudo </span>apt-get update\n\n<span class=\"c\"># 설치된 패키지 업그레이드</span>\n<span class=\"nb\">sudo </span>apt-get upgrade\n<span class=\"nb\">sudo </span>apt-get upgrade <span class=\"o\">[</span>package_name]\n\n<span class=\"c\"># 패키지 설치</span>\n<span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install</span> <span class=\"o\">[</span>package_name]\n\n<span class=\"c\"># 패키지 재설치</span>\n<span class=\"nb\">sudo </span>apt-get <span class=\"nt\">--reinstall</span> <span class=\"nb\">install</span> <span class=\"o\">[</span>package_name]\n\n<span class=\"c\"># 패키지 삭제</span>\n<span class=\"nb\">sudo </span>apt-get remove <span class=\"o\">[</span>package_name]\n\n<span class=\"c\"># 패키지 완전 삭제(구성 파일 포함)</span>\n<span class=\"nb\">sudo </span>apt-get purge <span class=\"o\">[</span>package_name]\n\n<span class=\"c\"># 패키지 소스코드 다운로드</span>\n<span class=\"nb\">sudo </span>apt-get <span class=\"nb\">source</span> <span class=\"o\">[</span>package_name]\n</code></pre>  </div></div>\n\n<h2 id=\"b\">B</h2>\n\n<ul>\n <li>bg : “background”를 나타내며, 작업을 백그라운드로 보내는 명령어, “foreground”에 해당하는 fg와 반대되는 명령어</li>\n</ul>\n\n<h2 id=\"c\">C</h2>\n\n<ul>\n <li>cal : 캘린더를 띄우는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 서버시간 기준의 연,월,일이 표시된 해당 월의 달력 표시</span>\ncal\n\n<span class=\"c\"># 해당 연도의 모든 월의 달력 표시</span>\ncal <span class=\"nt\">-y</span>\n\n<span class=\"c\"># 특정 연 월 출력</span>\ncal 8 2021\n</code></pre>  </div></div>\n\n<ul>\n <li>cat : 파일의 내용을 화면에 출력하거나 파일을 만듦</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 파일의 내용 출력</span>\n<span class=\"nb\">cat</span> <span class=\"o\">[</span>fileName]\n<span class=\"nb\">cat</span> <span class=\"o\">[</span>fileName1] <span class=\"o\">[</span>fileName2] <span class=\"o\">[</span>fileName3] ...\n\n<span class=\"c\"># 파일의 내용 합치기(1,2,3번을 합쳐서 4번 파일을 만듦)</span>\n<span class=\"nb\">cat</span> <span class=\"o\">[</span>fileName1] <span class=\"o\">[</span>fileName2] <span class=\"o\">[</span>fileName3] <span class=\"o\">&gt;</span> <span class=\"o\">[</span>fileName4]\n\n<span class=\"c\"># 파일 내용 덧붙이기(2번의 끝에 1번을 덧붙임)</span>\n<span class=\"nb\">cat</span> <span class=\"o\">[</span>fileName1] <span class=\"o\">&gt;&gt;</span> <span class=\"o\">[</span>fileName2]\n\n<span class=\"c\"># 새로운 파일을 만들기</span>\n<span class=\"nb\">cat</span> <span class=\"o\">&gt;</span> <span class=\"o\">[</span>new_file]\n</code></pre>  </div></div>\n\n<ul>\n <li>cd : 해당 경로의 디렉토리로 이동함.</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># path에 해당하는 위치로 이동</span>\n<span class=\"nb\">cd</span> <span class=\"o\">[</span>path]\n\n<span class=\"c\"># 현재 디렉토리로 이동</span>\n<span class=\"nb\">cd</span> <span class=\"nb\">.</span>\n\n<span class=\"c\"># 한 단계 상위 디렉토리로 이동</span>\n<span class=\"nb\">cd</span> ..\n\n<span class=\"c\"># 최상위 디렉토리로 이동</span>\n<span class=\"nb\">cd</span> /\n</code></pre>  </div></div>\n\n<ul>\n <li>chmod : 파일의 권한 변경. 숫자로 변경하는 방법만 간단하게 정리</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 모든 사용자의 모든 권한 제거</span>\n<span class=\"nb\">chmod </span>000 FILE\n\n<span class=\"c\"># 사용자(읽기+쓰기), 그룹(읽기+쓰기), 그 외 사용자(읽기)</span>\n<span class=\"nb\">chmod </span>664 FILE\n\n<span class=\"c\"># 사용자에게 모든 권한 추가</span>\n<span class=\"nb\">chmod </span>700 FILE\n\n<span class=\"c\"># 사용자(읽기+쓰기+실행), 그룹(읽기), 그 외 사용자(읽기)</span>\n<span class=\"nb\">chmod </span>744 FILE\n\n<span class=\"c\"># 사용자(읽기+쓰기+실행), 그룹(읽기+실행), 그 외 사용자(읽기+실행)</span>\n<span class=\"nb\">chmod </span>755 FILE\n\n<span class=\"c\"># 모든 사용자에 모든 권한 추가.</span>\n<span class=\"nb\">chmod </span>777 FILE\n</code></pre>  </div></div>\n\n<ul>\n <li>chown : 파일이나 디렉터리의 소유자를 변경하는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 파일이나 디렉토리의 소유자 변경</span>\n<span class=\"nb\">chown </span>user /path/to/file_or_directory\n\n<span class=\"c\"># 파일이나 디렉토리의 소유자 및 그룹 변경</span>\n<span class=\"nb\">chown </span>user:group /path/to/file_or_directory\n\n<span class=\"c\"># symbolic link의 소유자 변경</span>\n<span class=\"nb\">chown</span> <span class=\"nt\">-h</span> user /path/to/symboli_link\n\n<span class=\"c\"># symbolic link를 포함한 파일이나 디렉토리의 소유자와 그룹 변경</span>\n<span class=\"nb\">chown</span> <span class=\"nt\">-hR</span> user:group /path/to/file_or_dir\n</code></pre>  </div></div>\n\n<ul>\n <li>cp : 파일을 복사하는 데 사용</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># filename1을 복사하여 filename2를 만듦</span>\n<span class=\"nb\">cp</span> <span class=\"o\">[</span>filename1] <span class=\"o\">[</span>filename2] \n\n<span class=\"c\"># filename을 복사하여 directory안에 filename을 만듦 (directory가 존재한다고 가정)</span>\n<span class=\"nb\">cp</span> <span class=\"o\">[</span>filename] <span class=\"o\">[</span>directory]\n</code></pre>  </div></div>\n\n<h2 id=\"d\">D</h2>\n\n<ul>\n <li>date : 날짜 출력 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 현재 시간 출력</span>\n<span class=\"nb\">date</span>\n\n<span class=\"c\"># 표준 시간 표시하기</span>\n<span class=\"nb\">date</span> <span class=\"nt\">-u</span>\n\n<span class=\"c\"># format 지정 출력(YYYY-MM-DD)</span>\n<span class=\"nb\">date</span> <span class=\"s2\">\"+%Y-%m-%d\"</span>\n\n<span class=\"c\"># format 지정 출력(YYYY-MM-DD 24시간 표시,분,초)</span>\n<span class=\"nb\">date</span> <span class=\"s2\">\"+%Y-%m-%d %H:%M:%S\"</span>\n\n<span class=\"c\"># format 지정 출력(12시간 표시,분,초 오전/오후 출력)</span>\n<span class=\"nb\">date</span> <span class=\"s2\">\"+%Y-%m-%d %I:%M:%S %p\"</span>\n\n<span class=\"c\"># unix time stamp</span>\ndata +%s\n\n<span class=\"c\"># 시스템 시간 설정</span>\n<span class=\"nb\">sudo date</span>  <span class=\"s2\">\"+%Y-%m-%d %H:%M:%S\"</span> <span class=\"nt\">-s</span> <span class=\"s2\">\"20200412-13:24:50\"</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>df : 시스템 전체의 디스크 여유 공간 확인</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 디스크 공간 확인</span>\n<span class=\"nb\">df</span>\n\n<span class=\"c\"># 모든 파일 시스템 출력</span>\n<span class=\"nb\">df</span> <span class=\"nt\">-a</span>\n\n<span class=\"c\"># total 추가</span>\n<span class=\"nb\">df</span> <span class=\"nt\">--total</span>\n\n<span class=\"c\"># 용량 크기로 출력</span>\n<span class=\"nb\">df</span> <span class=\"nt\">-h</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>dmesg : 시스템 부팅 메세지를 확인하는 명령어, 커널에서 출력되는 메세지를 일정 수준 기록하는 버퍼 역할을 수행, 커널 부팅 중에 에러가 났다면 어느 단계에서 에러가 났는지 범위를 좁히고 찾아내는데 사용</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 옵션 없이 커널의 로그 생성</span>\n<span class=\"nb\">sudo </span>dmesg\n\n<span class=\"c\"># 모든 메세지 삭제 및 새로운 로그 생성</span>\n<span class=\"nb\">sudo </span>dmesg <span class=\"nt\">-c</span>\n\n<span class=\"c\"># grep으로 특정 로그 검색</span>\n<span class=\"nb\">sudo </span>dmesg | <span class=\"nb\">grep</span> <span class=\"o\">[</span>message name]\n\n<span class=\"c\"># level별 로그 검색</span>\n<span class=\"nb\">sudo </span>dmesg <span class=\"nt\">--level</span> <span class=\"o\">[</span>level name]\n\n<span class=\"c\"># facility별 로그 검색</span>\n<span class=\"nb\">sudo </span>dmesg <span class=\"nt\">--f</span> <span class=\"o\">[</span>facility name]\n\n<span class=\"c\"># 변경 사항 대기</span>\n<span class=\"nb\">sudo </span>dmesg <span class=\"nt\">-w</span>\n\n<span class=\"c\"># timestamp 추가</span>\n<span class=\"nb\">sudo </span>dmesg <span class=\"nt\">-T</span>\n\n<span class=\"c\"># 가독성 높이기</span>\n<span class=\"nb\">sudo </span>dmesg <span class=\"nt\">-H</span>\n\n<span class=\"c\"># color 추가</span>\n<span class=\"nb\">sudo </span>dmesg <span class=\"nt\">-L</span>\n\n<span class=\"c\"># THL 추가</span>\n<span class=\"nb\">sudo </span>dmesg <span class=\"nt\">-THL</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>dpkg : deb 패키지의 설치, 삭제, 정보 제공을 위해 사용하는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 설치된 패키지 목록 확인</span>\ndpkg <span class=\"nt\">-l</span>\n\n<span class=\"c\"># 해당 패키지로부터 설치된 파일 목록 확인</span>\ndpkg <span class=\"nt\">-L</span> <span class=\"o\">[</span>package name]\n\n<span class=\"c\"># 해당 .deb 파일이 설치한 파일 목록 확인</span>\ndpkg <span class=\"nt\">-C</span> <span class=\"o\">[</span>.deb name]\n\n<span class=\"c\"># 해당 패키지 정보 확인</span>\ndpkg <span class=\"nt\">-s</span> <span class=\"o\">[</span>package name]\n\n<span class=\"c\"># 해당 .deb 파일의 정보 확인</span>\ndpkg <span class=\"nt\">-I</span> <span class=\"o\">[</span>.deb name]\n\n<span class=\"c\"># 해당 파일명 또는 경로가 포함된 패키지 검색</span>\ndpkg <span class=\"nt\">-S</span> <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 해당 패키지 삭제(설정파일은 남겨둠)</span>\n<span class=\"nb\">sudo </span>dpkg <span class=\"nt\">-r</span> <span class=\"o\">[</span>package name]\n\n<span class=\"c\"># 해당 패키지 삭제(설정파일 포함)</span>\n<span class=\"nb\">sudo </span>dpkg <span class=\"nt\">-P</span> <span class=\"o\">[</span>package name]\n\n<span class=\"c\"># .deb파일에 포함되어 있는 파일들을 지정된 디렉토리 초기화 후 압축해제</span>\n<span class=\"nb\">sudo </span>dpkg <span class=\"nt\">-x</span> <span class=\"o\">[</span>.deb name] <span class=\"o\">[</span>directory name]\n</code></pre>  </div></div>\n\n<ul>\n <li>du : 디렉토리별 디스크 사용량 확인</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 모든 디렉토리 및 그 하위의 모든 디렉토리의 용량 확인</span>\n<span class=\"nb\">du</span>\n\n<span class=\"c\"># 특정 디렉토리와 하위의 모든 디렉토리의 용량 확인</span>\n<span class=\"nb\">du</span> <span class=\"o\">[</span>directory name]\n\n<span class=\"c\"># 선택한 디렉토리의 용량만 확인</span>\n<span class=\"nb\">du</span> <span class=\"nt\">-s</span> <span class=\"o\">[</span>directory name]\n\n<span class=\"c\"># 읽기 편한 단위로 용량 확인</span>\n<span class=\"nb\">du</span> <span class=\"nt\">-h</span> <span class=\"o\">[</span>directory name]\n\n<span class=\"c\"># 디렉토리의 바로 아래 디렉토리까지의 용량을 확인</span>\n<span class=\"nb\">du</span> <span class=\"nt\">-sh</span> <span class=\"o\">[</span>directory name]/<span class=\"k\">*</span>\n\n<span class=\"c\"># N 단계의 하위 디렉토리까지의 용량 확인</span>\n<span class=\"nb\">du</span> <span class=\"nt\">-d</span> N <span class=\"o\">[</span>directory name]\n\n<span class=\"c\"># 파일의 용량까지 확인</span>\n<span class=\"nb\">du</span> <span class=\"nt\">-a</span> <span class=\"o\">[</span>directory name]\n</code></pre>  </div></div>\n\n<h2 id=\"e\">E</h2>\n\n<ul>\n <li>echo : 문자열을 컴퓨터 터미널에 출력하는 명령어이다. 일반적으로 셸 스크립트와 배치 파일에서 화면이나 파일로 상황을 알리는 문자열을 출력할 때에 사용</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 문자열 출력</span>\n<span class=\"nb\">echo</span> <span class=\"o\">[</span>string]\n\n<span class=\"c\"># 백슬래쉬 특수문자 인식</span>\n<span class=\"nb\">echo</span> <span class=\"nt\">-e</span> <span class=\"o\">[</span>string]\n\n<span class=\"c\"># 환경변수 출력</span>\n<span class=\"nb\">echo</span> <span class=\"nv\">$[</span><span class=\"nb\">env </span>var name]\n\n<span class=\"c\"># echo 결과 파일 저장</span>\n<span class=\"nb\">echo</span> <span class=\"o\">[</span>string] <span class=\"o\">&gt;&gt;</span> <span class=\"o\">[</span>file name]\n</code></pre>  </div></div>\n\n<ul>\n <li>\n <p>exit : 현재 세션 종료</p>\n </li>\n <li>\n <p>export : 환경 변수 목록 확인, 환경 변수 값 설정</p>\n </li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 환경 변수 목록 확인</span>\n<span class=\"nb\">export</span>\n\n<span class=\"c\"># 환경 변수 값 설정</span>\n<span class=\"nb\">export</span> <span class=\"o\">[</span><span class=\"nb\">env </span>var name]<span class=\"o\">=[</span>value]\n</code></pre>  </div></div>\n\n<h2 id=\"f\">F</h2>\n\n<ul>\n <li>\n <p>fg : “foreground”를 나타내며, 현재 백그라운드로 실행중인 명령어를 포그라운드작업으로 전환을 할때 사용하는 명령어</p>\n </li>\n <li>\n <p>find : 리눅스에서 파일 및 디렉토리를 검색할 때 사용하는 명령어</p>\n </li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 현재 디렉토리(.)의 파일 검색</span>\nfind <span class=\"nb\">.</span>\n\n<span class=\"c\"># 특정 디렉토리의 파일 검색</span>\nfind <span class=\"nb\">.</span> <span class=\"o\">[</span>directory name]\n\n<span class=\"c\"># 찾을 파일 이름 지정</span>\nfind <span class=\"nb\">.</span> <span class=\"nt\">-name</span> <span class=\"s2\">\"[file name]\"</span>\n\n<span class=\"c\"># 디렉토리만 검색</span>\nfind <span class=\"nb\">.</span> <span class=\"nt\">-type</span> d\n\n<span class=\"c\"># 파일만 검색</span>\nfind <span class=\"nb\">.</span> <span class=\"nt\">-type</span> f\n\n<span class=\"c\"># 파일 사이즈 지정</span>\n<span class=\"nb\">sudo </span>find <span class=\"nb\">.</span> <span class=\"nt\">-size</span> <span class=\"o\">[</span>file size]\n<span class=\"nb\">sudo </span>find <span class=\"nb\">.</span> <span class=\"nt\">-size</span> +10M\n\n<span class=\"c\"># 빈 파일 검색</span>\nfind <span class=\"nb\">.</span> <span class=\"nt\">-empty</span>\n\n<span class=\"c\"># 서브 디렉토리 검색 깊이 지정</span>\nfind <span class=\"nb\">.</span> <span class=\"nt\">-maxdepth</span>\n\n<span class=\"c\"># 해당 파일보다 최근에 변경된 파일 검색</span>\nfind <span class=\"nb\">.</span> <span class=\"nt\">-newer</span> <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 검색한 파일로 부가적인 작업 수행(검색된 파일이 {}위치에 입력되어 처리됨)</span>\n<span class=\"c\"># 빈파일 정리</span>\nfind <span class=\"nb\">.</span> <span class=\"nt\">-empty</span> <span class=\"nt\">-exec</span> <span class=\"nb\">rm</span> <span class=\"o\">{}</span> <span class=\"se\">\\;</span>\n\n<span class=\"c\"># permission denied 없애기</span>\nfind <span class=\"nb\">.</span> 2&gt;/dev/null\n</code></pre>  </div></div>\n\n<ul>\n <li>free : 메모리 상태 확인</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 메모리 상태 확인</span>\nfree\n\n<span class=\"c\"># KB 단위로 확인</span>\nfree <span class=\"nt\">-k</span>\n\n<span class=\"c\"># MB 단위로 확인</span>\nfree <span class=\"nt\">-m</span>\n\n<span class=\"c\"># GB 단위로 확인</span>\nfree <span class=\"nt\">-g</span>\n</code></pre>  </div></div>\n<h2 id=\"g\">G</h2>\n\n<ul>\n <li>grep : 입력으로 전달된 파일의 내용에서 특정 문자열을 찾고자할 때 사용하는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 대소문자 구분 없이 검색</span>\n<span class=\"nb\">grep</span> <span class=\"nt\">-i</span> <span class=\"s2\">\"[pattern]\"</span> <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 일치 횟수 표시</span>\n<span class=\"nb\">grep</span> <span class=\"nt\">-c</span> <span class=\"s2\">\"[pattern]\"</span> <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 패턴과 일치하는 파일 표시</span>\n<span class=\"nb\">grep</span> <span class=\"nt\">-l</span> <span class=\"s2\">\"[pattern]\"</span> <span class=\"k\">*</span>\n\n<span class=\"c\"># 전체 단어 단위로 검색</span>\n<span class=\"nb\">grep</span> <span class=\"nt\">-w</span> <span class=\"s2\">\"[pattern]\"</span> <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 일치하는 패턴만 표시</span>\n<span class=\"nb\">grep</span> <span class=\"nt\">-o</span> <span class=\"s2\">\"[pattern]\"</span> <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 줄 번호 표시</span>\n<span class=\"nb\">grep</span> <span class=\"nt\">-n</span> <span class=\"s2\">\"[pattern]\"</span> <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 패턴과 일치하지 않은 행 표시</span>\n<span class=\"nb\">grep</span> <span class=\"nt\">-v</span> <span class=\"s2\">\"[pattern]\"</span> <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 주어진 패턴으로 시작하는 행 표시</span>\n<span class=\"nb\">grep</span> <span class=\"s2\">\"^[pattern]\"</span> <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 주어진 패턴으로 끝나는 행 표시</span>\n<span class=\"nb\">grep</span> <span class=\"s2\">\"[pattern]$\"</span> <span class=\"o\">[</span>file name]\n</code></pre>  </div></div>\n\n<h2 id=\"h\">H</h2>\n\n<ul>\n <li>head : 텍스트로된 파일의 앞부분을 지정한 만큼 출력하는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 앞에서부터 10행 출력</span>\n<span class=\"nb\">head</span> <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 앞에서부터 N행 출력</span>\n<span class=\"nb\">head</span> <span class=\"nt\">-n</span> N <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 앞에서부터 N byte 출력</span>\n<span class=\"nb\">head</span> <span class=\"nt\">-c</span> N <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 출력된 내용 저장</span>\n<span class=\"nb\">head</span> <span class=\"o\">[</span>file name 1] <span class=\"o\">&gt;</span> <span class=\"o\">[</span>file name 2]\n\n<span class=\"c\"># 여러 개의 파일 출력</span>\n<span class=\"nb\">head</span> <span class=\"o\">[</span>file name 1] <span class=\"o\">[</span>file name 2]\n\n<span class=\"c\"># 파일 제목 생략하고 출력</span>\n<span class=\"nb\">head</span> <span class=\"nt\">-q</span> <span class=\"o\">[</span>file name]\n</code></pre>  </div></div>\n\n<h2 id=\"i\">I</h2>\n\n<ul>\n <li>\n <p>id : 현재 사용자의 실제 id와 유효 사용자 id, 그룹 id를 출력하며 내부 bash 변수인 $UID, $EUID, $GROUPS와 짝을 이룸.</p>\n </li>\n <li>\n <p>ifconfig : 네트워크 인터페이스를 설정하거나 확인하는 명령어. IP주소, 서브넷마스크, MAC주소, 네트워크 상태 등을 확인, 설정하는 명령어</p>\n </li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install </span>net-tools\n\n<span class=\"c\"># ip 확인하기</span>\nifconfig\n\n<span class=\"c\"># 특정 이더넷 이름에 ip 주소 설정</span>\nifconfig <span class=\"o\">[</span>ethernet name] <span class=\"o\">[</span>ip address]\n\n<span class=\"c\"># 특정 이더넷 이름에 서브넷 마스크 설정</span>\nifconfig <span class=\"o\">[</span>ethernet name] netmask <span class=\"o\">[</span>netmask address]\n\n<span class=\"c\"># 특정 이더넷 이름에 broadcast 설정</span>\nifconfig <span class=\"o\">[</span>ehternet name] broadcast <span class=\"o\">[</span>broadcast address]\n</code></pre>  </div></div>\n\n<h2 id=\"j\">J</h2>\n\n<ul>\n <li>join : 두 파일을 의미있는 형태로 묶어 하나의 파일로 만드는 명령어로 공통으로 표시된 필드가 들어 있는 줄에 대응하여 합침.</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 두 파일의 공통된 내용을 보여줌</span>\n<span class=\"nb\">join</span> <span class=\"o\">[</span>file name 1] <span class=\"o\">[</span>file name 2]\n\n<span class=\"c\"># 두 파일의 일치하지 않는 내용을 보여줌</span>\n<span class=\"nb\">join</span> <span class=\"nt\">-v</span> <span class=\"o\">[</span>file name 1] <span class=\"o\">[</span>file name 2]\n</code></pre>  </div></div>\n\n<h2 id=\"k\">K</h2>\n\n<ul>\n <li>kill : 프로세스에 특정한 signal을 보내는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 프로세스 종료(pid 확인 : ps), 아래는 모두 같은 명령</span>\n<span class=\"nb\">kill</span> <span class=\"o\">[</span>pid]\n<span class=\"nb\">kill</span> <span class=\"nt\">-15</span> <span class=\"o\">[</span>pid]\n<span class=\"nb\">kill</span> <span class=\"nt\">-TERM</span> <span class=\"o\">[</span>pid]\n\n<span class=\"c\"># 시그널 종류 출력</span>\n<span class=\"nb\">kill</span> <span class=\"nt\">-l</span>\n</code></pre>  </div></div>\n\n<h2 id=\"l\">L</h2>\n\n<ul>\n <li>\n <p>ll : ls -l 과 동일한 명령어</p>\n </li>\n <li>\n <p>ln : 링크파일을 만드는 명령어</p>\n </li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 하드 링크 파일 생성</span>\n<span class=\"nb\">ln</span> <span class=\"o\">[</span>original file name] <span class=\"o\">[</span>hard <span class=\"nb\">link </span>file name]\n\n<span class=\"c\"># 심볼링 링크 파일 생성</span>\n<span class=\"nb\">ln</span> <span class=\"nt\">-s</span> <span class=\"o\">[</span>original file name] <span class=\"o\">[</span>symbolic <span class=\"nb\">link </span>file name]\n</code></pre>  </div></div>\n\n<ul>\n <li>locale : 현재 설정된 locale(사용자 인터페이스에서 사용되는 언어, 지역 설정, 출력 형식 등을 정의하는 문자열)을 확인하는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 현재 설정된 locale 확인</span>\nlocale\n\n<span class=\"c\"># 가능한 locale 언어 목록 확인</span>\nlocale <span class=\"nt\">-a</span>\n\n<span class=\"c\"># locale 설정</span>\n<span class=\"nb\">export </span><span class=\"nv\">LANG</span><span class=\"o\">=</span>ko_KR.utf8\n</code></pre>  </div></div>\n\n<ul>\n <li>ls : 현재 디렉토리 위치의 파일 목록을 조회</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 현재 디렉토리 위치의 파일 목록 조회</span>\n<span class=\"nb\">ls</span>\n\n<span class=\"c\"># 숨겨진 파일 포함하여 조회</span>\n<span class=\"nb\">ls</span> <span class=\"nt\">-a</span>\n\n<span class=\"c\"># 퍼미션, 포함된 파일 수, 소유자, 그룹, 파일크기, 수정일자, 파일이름 출력</span>\n<span class=\"nb\">ls</span> <span class=\"nt\">-l</span>\n\n<span class=\"c\"># 파일 크기 순으로 정렬하여 출력</span>\n<span class=\"nb\">ls</span> <span class=\"nt\">-S</span>\n\n<span class=\"c\"># 알파벳의 역순으로 출력</span>\n<span class=\"nb\">ls</span> <span class=\"nt\">-r</span>\n\n<span class=\"c\"># 하위 디렉토리까지 출력</span>\n<span class=\"nb\">ls</span> <span class=\"nt\">-R</span>\n\n<span class=\"c\"># 사람이 보기 좋은 단위로 출력</span>\n<span class=\"nb\">ls</span> <span class=\"nt\">-h</span>\n\n<span class=\"c\"># 접근 시간 출력</span>\n<span class=\"nb\">ls</span> <span class=\"nt\">-lu</span>\n\n<span class=\"c\"># 변경 시간 출력</span>\n<span class=\"nb\">ls</span> <span class=\"nt\">-lc</span>\n</code></pre>  </div></div>\n\n<h2 id=\"m\">M</h2>\n\n<ul>\n <li>man : 각 종 명령어들의 자세한 사용법이나 매뉴얼을 볼 때 사용하는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 명령어 메뉴얼 표시</span>\nman <span class=\"o\">[</span><span class=\"nb\">command</span><span class=\"o\">]</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>mkdir : 새로운 디렉토리를 만드는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># directoryname의 새로운 디렉토리 생성</span>\n<span class=\"nb\">mkdir</span> <span class=\"o\">[</span>directory name]\n\n<span class=\"c\"># 디렉토리를 만들 때, 하위 디렉토리까지 만들 때 사용</span>\n<span class=\"nb\">mkdir</span> <span class=\"nt\">-p</span> <span class=\"o\">[</span>directory name 1]/[directory name 2]\n\n<span class=\"c\"># 디렉토리 만들 때, 권한 지정</span>\n<span class=\"nb\">mkdir</span> <span class=\"nt\">-m</span> 700 <span class=\"o\">[</span>directory name]\n</code></pre>  </div></div>\n\n<ul>\n <li>more : 리눅스에서 파일 내용을 확인하는 명령어들 중에 하나로, 파일을 읽어 화면에 화면 단위로 끊어서 출력하는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 파일의 내용 확인</span>\nmore <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># n행씩 출력</span>\nmore <span class=\"nt\">-n</span> <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># n행부터 출력</span>\nmore +n <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 파일 출력을 more로 출력하기</span>\n<span class=\"nb\">ls</span> <span class=\"nt\">-al</span> | more\n</code></pre>  </div></div>\n\n<ul>\n <li>mv : 파일을 이동시키는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 파일 이름 변경(file name 1 --&gt; file name 2)</span>\n<span class=\"nb\">mv</span> <span class=\"o\">[</span>file name 1] <span class=\"o\">[</span>file name 2]\n\n<span class=\"c\"># 해당 파일을 특정 디렉토리로 이동</span>\n<span class=\"nb\">mv</span> <span class=\"o\">[</span>file name] <span class=\"o\">[</span>directory name]\n\n<span class=\"c\"># 여러개의 파일을 특정 디렉토리로 이동</span>\n<span class=\"nb\">mv</span> <span class=\"o\">[</span>file name 1] <span class=\"o\">[</span>file name 2] <span class=\"o\">[</span>directory name]\n\n<span class=\"c\"># 디렉토리 이름 변경(directory name 1 --&gt; directory name 2)</span>\n<span class=\"nb\">mv</span> <span class=\"o\">[</span>directory name 1] <span class=\"o\">[</span>directory name 2]\n</code></pre>  </div></div>\n\n<h2 id=\"n\">N</h2>\n\n<ul>\n <li>nslookup : name server 관련한 조회를 할 수 있는 명령어, 서버의 네트워크가 제대로 설정되었는지 확인하는 용도로 주로 사용</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># IP 조회</span>\nnslookup google.com\n\n<span class=\"c\"># MX(Mail Record) 확인</span>\nnslookup <span class=\"nt\">-query</span><span class=\"o\">=</span>mx google.com\n\n<span class=\"c\"># CNAME 조회</span>\nnslookup <span class=\"nt\">-q</span><span class=\"o\">=</span>cname example.com\n\n<span class=\"c\"># TEXT 조회</span>\nnslookup <span class=\"nt\">-q</span><span class=\"o\">=</span>txt gmail.com\n\n<span class=\"c\"># NS 레코드로 DNS 목록 확인</span>\nnslookup <span class=\"nt\">-type</span><span class=\"o\">=</span>ns google.com \n\n<span class=\"c\"># Reverse DNS lookup</span>\nnslookup 209.132.183.181\n\n<span class=\"c\"># 특정 DNS 사용하여 조회</span>\nnslookup redhat.com 8.8.8.8\n</code></pre>  </div></div>\n\n<h2 id=\"p\">P</h2>\n\n<ul>\n <li>ps : 현재 실행 중인 프로세스 목록과 상태를 출력</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># pid, cmd 등 기본적인 프로세스 목록 출력</span>\nps\n\n<span class=\"c\"># 풀 포맷으로 출력</span>\nps <span class=\"nt\">-f</span>\n\n<span class=\"c\"># 긴 포맷으로 출력</span>\nps <span class=\"nt\">-l</span>\n\n<span class=\"c\"># 프로세스 번호가 1인 프로세스 출력</span>\nps <span class=\"nt\">-p</span> 1\n\n<span class=\"c\"># 계정이 apache인 프로세스 출력</span>\nps <span class=\"nt\">-u</span> apache\n\n<span class=\"c\"># 모든 프로세스 출력</span>\nps <span class=\"nt\">-e</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>\n <p>pwd : 현재 작업 중인 디렉토리의 절대 경로를 출력하는 명령어</p>\n </li>\n <li>\n <p>ping : 네트워크 상태를 확인하려는 대상 컴퓨터를 향해 일정 크기의 패킷을 전송하는 명령어</p>\n </li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 네트워크 대역폭 혹은 속도에 따라 ping의 송신간격 결정</span>\nping <span class=\"nt\">-A</span> www.google.com\n\n<span class=\"c\"># 패킷의 갯수 걸정</span>\nping <span class=\"nt\">-c</span> 10 www.google.com\n\n<span class=\"c\"># 타임스탬프 출력</span>\nping <span class=\"nt\">-D</span> www.google.com\n\n<span class=\"c\"># 빠른 속도로 패킷 전송</span>\nping <span class=\"nt\">-f</span> www.google.com\n\n<span class=\"c\"># 패킷 전송 간격 조절</span>\nping <span class=\"nt\">-i</span> 0.2 www.google.com\n</code></pre>  </div></div>\n\n<h2 id=\"r\">R</h2>\n\n<ul>\n <li>rm : 파일 또는 디렉토리를 제거하는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 특정 파일 제거</span>\n<span class=\"nb\">rm</span> <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 모든 파일 제거</span>\n<span class=\"nb\">rm</span> <span class=\"k\">*</span>\n\n<span class=\"c\"># 특정 디렉토리 제거</span>\n<span class=\"nb\">rm</span> <span class=\"nt\">-r</span> <span class=\"o\">[</span>directory name]\n\n<span class=\"c\"># 특정 디렉토리 강제 제거</span>\n<span class=\"nb\">rm</span> <span class=\"nt\">-rf</span> <span class=\"o\">[</span>directory name]\n\n<span class=\"c\"># 특정 디렉토리의 내용을 확인하며 제거</span>\n<span class=\"nb\">rm</span> <span class=\"nt\">-ri</span> <span class=\"o\">[</span>directory name]\n</code></pre>  </div></div>\n\n<ul>\n <li>rmdir : 비어있는 디렉토리 삭제</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 특정 디렉토리 삭제</span>\n<span class=\"nb\">rmdir</span> <span class=\"o\">[</span>directory name]\n\n<span class=\"c\"># 여러 개의 디렉토리 삭제</span>\n<span class=\"nb\">rmdir</span> <span class=\"o\">[</span>directory name 1] <span class=\"o\">[</span>directory name 2]\n\n<span class=\"c\"># 상위 디렉토리 포함 사게</span>\n<span class=\"nb\">rmdir</span> <span class=\"nt\">-p</span> <span class=\"o\">[</span>directory name 1]/[directory name 2]\n</code></pre>  </div></div>\n\n<h2 id=\"s\">S</h2>\n\n<ul>\n <li>scp : ssh를 기반으로 한 파일 전송 프로토콜\n```bash\n <h1 id=\"복수-파일을-원격지로-보낼-때\">(복수) 파일을 원격지로 보낼 때</h1>\n <p>scp [filename1] [filename2] [remote_id]@[remote_ip]:[remote_locate]</p>\n </li>\n</ul>\n\n<h1 id=\"여러-파일을-포함한-디렉토리를-원격지로-보낼-때\">여러 파일을 포함한 디렉토리를 원격지로 보낼 때</h1>\n<p>scp -r [directoryname] [remote_id]@[remote_ip]:[remote_locate]</p>\n\n<h1 id=\"파일을-원격지에서-로컬로-가져올-때\">파일을 원격지에서 로컬로 가져올 때</h1>\n<p>scp [remote_id]@[remote_ip]:[remote_locate] [local_locate]</p>\n\n<h1 id=\"복수의-파일을-원격지에서-로컬로-가져올-때\">복수의 파일을 원격지에서 로컬로 가져올 때</h1>\n<p>scp [remote_id]@[remote_ip]:”[remote_locate1]”“[remote_locate2]” [local_locate]</p>\n\n<h1 id=\"여러-파일을-포함한-디렉토리를-원격지에서-로컬로-가져올-때\">여러 파일을 포함한 디렉토리를 원격지에서 로컬로 가져올 때</h1>\n<p>scp -r [remote_id]@[remote_ip]:[remote_locate] [local_locate]</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n* sh : 기본으로 지정된 쉘(shell)을 호출하는 명령어\n\n* source : bash 명령어로, bash 쉘이 작동 중일 때만 동작함. filename 안의 환경설정 내용을 즉시 적용하기 위해 사용됨\n\n```bash\nsource [filename]\n</code></pre>  </div></div>\n\n<ul>\n <li>ssh : Secure Shell의 약자로 네트워크 상의 다른 컴퓨터에 로그인하거나 원격 시스템에서 명령을 실행하고 다른 시스템으로 파일을 복사할 수 있도록 해주는 응용 프로그램 또는 프로토콜</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install </span>ssh\n\n<span class=\"c\"># 특정 사용자의 ip 주소에 접속</span>\nssh <span class=\"o\">[</span>user name]@[ip address]\n\n<span class=\"c\"># 특정 포트에 접속</span>\nssh <span class=\"nt\">-p</span> <span class=\"o\">[</span>port num] <span class=\"o\">[</span>user name]@[ip address]\n</code></pre>  </div></div>\n\n<ul>\n <li>sudo : root 권한을 이용하여 명령어를 실행할 때 사용</li>\n</ul>\n\n<h2 id=\"t\">T</h2>\n\n<ul>\n <li>tail : 파일의 마지막 부분을 출력하는 프로그램</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 뒤에서부터 10행 출력</span>\n<span class=\"nb\">tail</span> <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 뒤에서부터 N행 출력</span>\n<span class=\"nb\">tail</span> <span class=\"nt\">-n</span> N <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 뒤에서부터 N byte 출력</span>\n<span class=\"nb\">tail</span> <span class=\"nt\">-c</span> N <span class=\"o\">[</span>file name]\n\n<span class=\"c\"># 출력된 내용 저장</span>\n<span class=\"nb\">tail</span> <span class=\"o\">[</span>file name 1] <span class=\"o\">&gt;</span> <span class=\"o\">[</span>file name 2]\n\n<span class=\"c\"># 여러 개의 파일 출력</span>\n<span class=\"nb\">tail</span> <span class=\"o\">[</span>file name 1] <span class=\"o\">[</span>file name 2]\n\n<span class=\"c\"># 파일 제목 생략하고 출력</span>\n<span class=\"nb\">tail</span> <span class=\"nt\">-q</span> <span class=\"o\">[</span>file name]\n</code></pre>  </div></div>\n\n<ul>\n <li>tar : tar 혹은 tar.gz로 압축을 하거나 압축을 해제하는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># tar로 압축하기</span>\n<span class=\"nb\">tar</span> <span class=\"nt\">-cvf</span> <span class=\"o\">[</span><span class=\"nb\">tar </span>name].tar <span class=\"o\">[</span>directory name]\n\n<span class=\"c\"># tar 압축 해제</span>\n<span class=\"nb\">tar</span> <span class=\"nt\">-xvf</span> <span class=\"o\">[</span><span class=\"nb\">tar </span>name].tar\n\n<span class=\"c\"># tar.gz로 압축하기</span>\n<span class=\"nb\">tar</span> <span class=\"nt\">-zcvf</span> <span class=\"o\">[</span><span class=\"nb\">tar </span>name].tar.gz <span class=\"o\">[</span>directory name]\n\n<span class=\"c\"># tar.gz 압축 해제</span>\n<span class=\"nb\">tar</span> <span class=\"nt\">-zxvf</span> <span class=\"o\">[</span><span class=\"nb\">tar </span>name].tar\n</code></pre>  </div></div>\n\n<ul>\n <li>\n <p>top : CPU의 사용률을 확인하는 명령어</p>\n </li>\n <li>\n <p>touch : 0바이트 파일을 생성함</p>\n </li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># filename의 0바이트 파일을 생성</span>\n<span class=\"nb\">touch</span> <span class=\"o\">[</span>filename]\n</code></pre>  </div></div>\n\n<ul>\n <li>tree : 디렉토리의 트리 구조를 볼 수 있음\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install </span>tree\n</code></pre>  </div> </div>\n </li>\n</ul>\n\n<h2 id=\"u\">U</h2>\n\n<ul>\n <li>uname : 시스템의 정보(커널명, 호스트명, 커널 릴리즈, 커널 버전, 머신, 프로세스 하드웨어 플랫폼, OS)를 확인하는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 시스템의 모든 정보 출력</span>\n<span class=\"nb\">uname</span> <span class=\"nt\">-a</span>\n\n<span class=\"c\"># 커널명확인</span>\n<span class=\"nb\">uname</span> <span class=\"nt\">-s</span>\n\n<span class=\"c\"># 사용중인 네트워크 호스트 이름 확인</span>\n<span class=\"nb\">uname</span> <span class=\"nt\">-n</span>\n\n<span class=\"c\"># 커널 릴리즈 확인(운영체제 배포 버전)</span>\n<span class=\"nb\">uname</span> <span class=\"nt\">-r</span>\n\n<span class=\"c\"># 커널 버전 확인</span>\n<span class=\"nb\">uname</span> <span class=\"nt\">-v</span>\n\n<span class=\"c\"># 시스템 하드웨어 타입 정보 확인</span>\n<span class=\"nb\">uname</span> <span class=\"nt\">-m</span>\n\n<span class=\"c\"># 프로세서 정보 확인</span>\n<span class=\"nb\">uname</span> <span class=\"nt\">-p</span>\n\n<span class=\"c\"># 시스템의 하드웨어 플랫폼 정보 확인</span>\n<span class=\"nb\">uname</span> <span class=\"nt\">-i</span>\n\n<span class=\"c\"># 운영체제 정보 확인</span>\n<span class=\"nb\">uname</span> <span class=\"nt\">-o</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>uptime : 시스템이 실행되고 난 후 부터 지금까지의 시간과 시스템에 로그인 된 사용자 수 그리고 시스템 부하율을 표시하는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 현재시간, 시스템 실행시간, 로그인된 사용자 수, 부하율을 표시</span>\n<span class=\"nb\">uptime</span>\n\n<span class=\"c\"># 현재까지 운영된 시간 출력</span>\n<span class=\"nb\">uptime</span> <span class=\"nt\">-p</span>\n\n<span class=\"c\"># 부팅이 시작된 시간 출력</span>\n<span class=\"nb\">uptime</span> <span class=\"nt\">-s</span>\n</code></pre>  </div></div>\n\n<h2 id=\"v\">V</h2>\n\n<ul>\n <li>vi : vi 편집기 사용</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 새로운 문서 편집</span>\nvi <span class=\"o\">[</span>file name]\n</code></pre>  </div></div>\n\n<h2 id=\"w\">W</h2>\n\n<ul>\n <li>w : 서버에 접속한 사용자의 접속정보 및 작업 정보 내용을 확인하는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 헤더 정보를 뺀 간략한 정보 출력</span>\nw <span class=\"nt\">-h</span>\n\n<span class=\"c\"># 로그인 시간, JCPU, PCPU를 제외한 간략한 정보 출력</span>\nw <span class=\"nt\">-s</span>\n\n<span class=\"c\"># FROM 필드의 값 제외한 간략한 정보 출력</span>\nw <span class=\"nt\">-f</span>\n\n<span class=\"c\"># FROM 필드에 호스트 이름 대신 IP 주소 출력</span>\nw <span class=\"nt\">-i</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>\n <p>wget : Web get의 약어로 웹 상의 파일을 다운로드할 때 사용하는 명령어</p>\n </li>\n <li>\n <p>whereis : 명령어의 실행 파일 절대 경로와 소스코드, 설정 파일 및 매뉴얼 페이지를 찾아 출력하는 명령어</p>\n </li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 특정 명령어의 경로, 소스코드, 설정 파일 및 메뉴얼 페이지 출력</span>\nwhereis <span class=\"o\">[</span><span class=\"nb\">command</span><span class=\"o\">]</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>which : 명령어의 위치를 찾아주는 명령어</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 특정 명령어의 경로 출력</span>\nwhich <span class=\"o\">[</span><span class=\"nb\">command</span><span class=\"o\">]</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>\n <p>whoami : 현재 로그인한 사용자 ID를 출력하는 명령어, id명령어에 -un 옵션을 준 것과 같은 효과</p>\n </li>\n <li>\n <p>whois : 도메인 이름의 소유자가 누구인지 알려주는 명령어</p>\n </li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 도메인 이름을 이용한 소유자 확인</span>\nwhois www.google.com\n\n<span class=\"c\"># IP를 이용한 소유자 확인</span>\nwhois <span class=\"o\">[</span>IP address]\n</code></pre>  </div></div>\n","dir":"/0004Tools/0001DevelopmentTool/0002Linux/","name":"0001Command.md","path":"0004Tools/0001DevelopmentTool/0002Linux/0001Command.md","url":"/0004Tools/0001DevelopmentTool/0002Linux/0001Command.html"},{"sort":1,"layout":"default","title":"ROS Setting","content":"<h1 id=\"ros-setting\">ROS Setting</h1>\n","dir":"/0004Tools/0001DevelopmentTool/0003VSCode/","name":"0001ROSSetting.md","path":"0004Tools/0001DevelopmentTool/0003VSCode/0001ROSSetting.md","url":"/0004Tools/0001DevelopmentTool/0003VSCode/0001ROSSetting.html"},{"sort":1,"permalink":"/0004Tools/0001DevelopmentTool/","layout":"default","title":"Development Tools","content":"<h1 id=\"development-tools\">Development Tools</h1>\n\n<ul>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/\">GIT</a>\n <ul>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0001Command.html\">Command</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0002Git.html\">Git</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0003Commit.html\">Commit</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0004Merge.html\">Merge &amp; Rebase</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0005Branch.html\">Branch</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0006ISSUE.html\">PR &amp; ISSUE</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0007Fork.html\">Fork &amp; Pull Request</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0008License.html\">License</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0009Linter.html\">Linter &amp; Action</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0010Submodule.html\">Submodule</a></li>\n </ul>\n </li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/\">Linux</a>\n <ul>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0001Command.html\">Command</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0002ShellScript.html\">ShellScript &amp; bashrc</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0003BootingScript.html\">BootingScript</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0004vim.html\">vi deitor</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0005SymbolicLink.html\">Symbolic Link</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0006EnvironmentVariable.html\">Environment Variable</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0007SSH.html\">SSH</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0008SCP.html\">SCP</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0009Process.html\">Process</a></li>\n </ul>\n </li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0003VSCode/\">VSCode</a>\n <ul>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0003VSCode/0001ROSSetting.html\">ROS Setting</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0003VSCode/0002Extension.html\">Extensions</a></li>\n </ul>\n </li>\n</ul>\n","dir":"/0004Tools/0001DevelopmentTool/","name":"README.md","path":"0004Tools/0001DevelopmentTool/README.md","url":"/0004Tools/0001DevelopmentTool/"},{"sort":1,"layout":"default","title":"Install","content":"<h1 id=\"install\">Install</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- <a href=\"https://github.com/eclipse-cyclonedds/cyclonedds\">CycloneDDS Githug pages</a></em></p>\n\n<h2 id=\"1-install\">1. Install</h2>\n\n<p>CycloneDDS를 설치하기위해 <a href=\"https://cmake.org/download/\">CMake</a> 및 <a href=\"https://www.gnu.org/software/bison/\">Bison</a>이 설치되어야 한다.</p>\n\n<p>다음으로 cyclone dds git repository에서 clone 한다.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git clone https://github.com/eclipse-cyclonedds/cyclonedds.git\n</code></pre>  </div></div>\n\n<h2 id=\"2-build\">2. Build</h2>\n\n<p>다음으로 clone 받아온 패키지를 cmake를 이용하여 build하는 과정이다.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cd </span>cyclonedds\n\n<span class=\"nb\">mkdir </span>build\n<span class=\"nb\">cd </span>build\n\ncmake <span class=\"nt\">-DBUILD_EXAMPLES</span><span class=\"o\">=</span>ON ..\ncmake <span class=\"nt\">--build</span> <span class=\"nb\">.</span>\n</code></pre>  </div></div>\n\n<p>위의 과정을 거치면 <code class=\"language-plaintext highlighter-rouge\">~/cyclonedds/build</code> 안에 빌드되어있는 것을 알 수 있다.</p>\n","dir":"/0004Tools/0002Knowledges/0001CycloneDDS/","name":"0001Install.md","path":"0004Tools/0002Knowledges/0001CycloneDDS/0001Install.md","url":"/0004Tools/0002Knowledges/0001CycloneDDS/0001Install.html"},{"sort":1,"permalink":"/0004Tools/0002Knowledges/0001CycloneDDS/","layout":"default","title":"CycloneDDS","content":"<h1 id=\"cyclonedds\">CycloneDDS</h1>\n\n<p>CycloneDDS는 오픈소스 DDS로 ROS 2.0에서 사용되는 DDS 방식 중 하나이다. 이 페이지의 작성 목적은 ROS 1.0과 ROS 2.0의 메세지 통신이 불가하므로, 이러한 제약을 CycloneDDS를 이용하여 구현하는 것을 목표로 한다.</p>\n\n<ul>\n <li><a href=\"/0004Tools/0002Knowledges/0001CycloneDDS/0001Install.html\">Install</a></li>\n <li><a href=\"/0004Tools/0002Knowledges/0001CycloneDDS/0002Tutorials.html\">Tutorials</a></li>\n <li><a href=\"/0004Tools/0002Knowledges/0001CycloneDDS/0003IDLC.html\">IDLC</a></li>\n <li><a href=\"/0004Tools/0002Knowledges/0001CycloneDDS/0004ROSCycloneDDS_intro.html\">ROS-CycloneDDS Introduce</a></li>\n <li><a href=\"/0004Tools/0002Knowledges/0001CycloneDDS/0005ROSCycloneDDS_code.html\">ROS-CycloneDDS Code</a></li>\n</ul>\n","dir":"/0004Tools/0002Knowledges/0001CycloneDDS/","name":"README.md","path":"0004Tools/0002Knowledges/0001CycloneDDS/README.md","url":"/0004Tools/0002Knowledges/0001CycloneDDS/"},{"sort":1,"layout":"default","title":"REST API","content":"<h1 id=\"rest-api\">REST API</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- <a href=\"https://docs.microsoft.com/ko-kr/azure/architecture/best-practices/api-design\">Microsoft RESTful web API Design</a></em></p>\n\n<p><em>- <a href=\"https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html\">https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html</a></em></p>\n\n<p><em>- <a href=\"https://hoyeonkim795.github.io/posts/rest_api/\">https://hoyeonkim795.github.io/posts/rest_api/</a></em></p>\n\n<h2 id=\"1-rest란\">1. REST란?</h2>\n\n<p>Roy Fielding이 2000년도에 웹 서비스를 디자인하는 아키텍처 접근 방식으로 REST(Representational State Transfer)를 제안하였다. REST는 WWW(World Wide Web)와 같은 하이퍼미디어 기반 분산 시스템을 구축하기 위한 아키텍처 스타일이다. REST는 어떤 기본 프로토콜과도 독립적이며 HTTP에 연결될 필요가 없으나, 가장 일반적인 REST API 구현은 응용 프로그램 프로토콜로 HTTP를 사용한다.</p>\n\n<p>다음은 HTTP를 이용한 REST API 디자인의 원칙이다.</p>\n<ul>\n <li>REST API는 리소스(resource)를 중심으로 디자인되며, 클라이언트(client)에서 액세스할 수 있는 모든 종류의 개체(object), 데이터(data) 또는 서비스(service)가 리소스에 포함된다.</li>\n <li>리소스마다 해당 리소스를 고유하게 식별하는 URI인 식별자가 있다. 예를 들어 특정 고객 주문의 URI는 다음과 같다.\n <div class=\"language-http highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"err\">https://adventure-works.com/orders/1\n</span></code></pre>  </div> </div>\n </li>\n <li>클라이언트가 리소스의 표현(representation of resource)을 이용하여 서비스와 정보를 주고받는다. Web API가 교환 형식으로 XML 형식과 JSON 형식을 사용하며, 대부분의 경우 JSON 형식을 사용한다. 예를 들어 위에 나열된 URI에 대한 GET 요청은 이 응답(response)을 리턴한다.\n <div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"nl\">\"orderId\"</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"nl\">\"orderValue\"</span><span class=\"p\">:</span><span class=\"mf\">99.90</span><span class=\"p\">,</span><span class=\"nl\">\"productId\"</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"nl\">\"quantity\"</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre>  </div> </div>\n </li>\n <li>REST API는 균일한 형태의 인터페이스를 사용하므로 클라이언트와 서비스 구현을 분리하는 데 도움이 된다. HTTP를 기반으로 하는 REST API는 표준 HTTP 동사(standard HTTP verbs = HTTP Method)를 사용하여 리소스에 대한 기능 수행을 한다. 가장 일반적인 기능은 GET, POST, PUT, PATCH 및 DELETE이다.</li>\n</ul>\n\n<h2 id=\"2-rest-기본-개념\">2. REST 기본 개념</h2>\n<h2 id=\"21-method\">2.1 Method</h2>\n<p>대부분의 RESTful 웹 API에서 사용하는 일반적인 HTTP 메서드는 대표적으로 4가지가 있다.</p>\n\n<ul>\n <li>GET : GET을 통해 해당 리소스를 조회한다. 리소스를 조회하고 해당 도큐먼트에 대한 자세한 정보를 가져온다.</li>\n <li>POST : POST를 통해 지정된 URI에 새 리소스를 생성하며, 요청 메시지는 새 리소스의 세부 정보를 제공한다. 참고로 POST를 사용하여 실제로 리소스를 만들지 않는 작업을 트리거할 수도 있다.</li>\n <li>PUT : 지정된 URI에 리소스를 만들거나 대체/수정하며, 요청 메시지는 만들거나 업데이트할 리소스를 지정한다.</li>\n <li>DELETE : 지정된 URI의 리소스를 제거한다.</li>\n</ul>\n\n<p>다음 표는 전자 상거래 예제를 사용하여 대부분의 RESTful 구현에서 채택하는 일반적인 규칙을 요약한 표이다.\n<img src=\"RESTMethodTable.png\" width=\"1000\" height=\"250\" /></p>\n\n<p>GET과 POST를 비교하면,</p>\n<ol>\n <li>GET은 데이터를 요청할 때 HTTP Request Message의 Header 부분에 url이 담겨서 전송된다. 이러한 방식은 url에 데이터가 담기기 때문에 보낼 수 잇는 데이터 크기가 한정적이며 보안성이 떨어진다.</li>\n <li>POST는 body 부분에 데이터를 담아 전송하기 때문에, 데이터의 크기, 보안성 부분에서 더 뛰어나다.</li>\n</ol>\n\n<h2 id=\"22-resource\">2.2 Resource</h2>\n<p>리소스는 uri를 뜻하며, uri는 인터넷 상의 자원을 식별하기 위한 문자열의 구성이다. 이 리소스를 통해 메소드를 수행하고, 작업을 실행하게 된다.</p>\n\n<h2 id=\"23-representation-of-resoure\">2.3 Representation of Resoure</h2>\n\n<h2 id=\"3-rest의-특징\">3. REST의 특징</h2>\n\n<h3 id=\"31-server-client-구조\">3.1 Server-Client 구조</h3>\n<p>리소스를 가지고 있는 쪽이 Server이며, 리소스를 요청하는 쪽이 Client가 된다. Server는 API를 제공하고, 비즈니스 로직의 처리 및 저장을 책임진다. Client는 사용자 인증이나 context 등을 직접 관리하고 책임진다.</p>\n\n<h3 id=\"32-stateless\">3.2 Stateless</h3>\n<p>HTTP 프로토콜은 Stateless 프로토콜이므로, REST 역시 무상태성을 지닌다. 이는 Client의 context를 Server에 저장하지 않으며, Server는 Client의 요청을 개별의 것으로 인식하고 처리함을 나타낸다. 이는 Server의 처리 방식에 일관성을 부여하고, 부담이 줄어들어 자유도를 높인다.</p>\n\n<h3 id=\"33-cacheable\">3.3 Cacheable</h3>\n<p>웹 표준 HTTP 프로토콜을 사용하므로 웹에서 사용하는 기존의 인프라를 그대로 활용할 수 있다. 즉, HTTP가 가진 강력한 특징 인 캐싱 기능을 적용할 수 있으며, 이는 전체 응답시간, 성능, 서버의 자원 이용률 등을 향상시킬 수 있다. HTTP 프로토콜 표준에서 사용하는 Last-Modified 태그나 E-Tag를 이용하면 캐싱 구현이 가능하다.</p>\n\n<h3 id=\"34-layered-system\">3.4 Layered System</h3>\n<p>Client는 REST API Server만 호출하며, REST API Server는 다중 계층으로 구성될 수 있다. REST API Server는 순수 비즈니스 로직을 수행하고, 그 앞 단에 보안, 로드밸런싱, 암호화, 사용자 인증 등을 추가하여 구조상의 유연성을 줄 수 있다.</p>\n\n<h3 id=\"35-code-on-demand\">3.5 Code-On-Demand</h3>\n<p>Server로부터 스크립트를 받아서 Client에서 실행하며, 반드시 충족할 필요는 없다.</p>\n\n<h3 id=\"36-uniform-interface\">3.6 Uniform Interface</h3>\n<p>URI로 지정한 리소스에 대한 조작을 통일되고 한정적인 인터페이스로 수행하며, HTTP 프로토콜에 따르는 모든 플랫폼에서 사용 가능하며, 특정 언어나 기술에 종속되지 않는다.</p>\n\n<h2 id=\"4-rest-api란\">4. REST API란</h2>\n<p>REST 기반으로 서비스 API(Application Programming Interface)를 구현한 것으로, REST를 기반으로 시스템을 분산하여 확장성과 재사용성을 높이고, HTTP 표준을 기반으로 구현되어 HTTP를 지원하는 프로그램 언어로 클라이언트, 서버를 구현할 수 있다.</p>\n\n<h2 id=\"5-rest-api-설계-기본-규칙\">5. REST API 설계 기본 규칙</h2>\n\n<ul>\n <li>URI는 정보의 자원을 표현해야 한다.\n <ul>\n <li>리소스는 동사보다는 명사를, 대문자보다는 소문자를 사용</li>\n <li>리소스의 도큐먼트(객체 인스턴스나 데이터베이스 레코드와 유사한 개념) 이름으로는 단수 명사를 사용</li>\n <li>리소스의 컬렉션(서버에서 관리하는 디렉터리라는 리소스) 이름으로는 복수 명사를 사용</li>\n <li>리소스의 스토어(클라이언트에서 관리하는 리소스 저장소) 이름으로는 복수 명사를 사용</li>\n </ul>\n </li>\n <li>리소스에 대한 행위는 HTTP Method(GET, PUT, POST, DELETE 등)으로 표현한다.\n <ul>\n <li>URI에 HTTP Method가 들어가면 안된다.</li>\n <li>URI에 행위에 대한 동사 표현이 들어가면 안된다.</li>\n <li>경로 부분 중 변하는 부분은 유일한 값으로 대체한다.(예를 들어, ID는 특정 리소스를 나타내는 고유값이다.)</li>\n </ul>\n </li>\n</ul>\n\n<h2 id=\"6-rest-api-설계-규칙\">6. REST API 설계 규칙</h2>\n<ul>\n <li>슬래시 구분자(/)는 계층 관계를 나타내는데 사용된다.</li>\n <li>URI 마지막 문자로 슬래시(/)를 포함하지 않는다.\n <ul>\n <li>URI에 포함되는 모든 글자는 리소스의 유일한 식별자로 사용되어야 하며 URI가 다르다는 것은 리소스가 다르다는 것이고, 역으로 리소스가 다르면 URI도 달라져야 한다.</li>\n <li>REST API는 분명한 URI를 만들어 통신을 해야 하기 때문에 혼동을 주지 않도록 URI 경로의 마지막에는 슬래시(/)를 사용하지 않는다.</li>\n </ul>\n </li>\n <li>하이픈(-)은 URI 가독성을 높이는데 사용된다.\n <ul>\n <li>불가피하게 긴 URI경로를 사용하게 된다면 하이픈을 사용해 가독성을 높인다.</li>\n </ul>\n </li>\n <li>밑줄(_)은 URI에 사용하지 않는다.\n <ul>\n <li>밑줄은 보기 어렵거나 밑줄 때문에 문자가 가려지기도 하므로 가독성을 위해 밑줄은 사용하지 않는다.</li>\n </ul>\n </li>\n <li>URI 경로에는 소문자가 적합하다.\n <ul>\n <li>URI 경로에 대문자 사용은 피하도록 한다.</li>\n <li>RFC 3986(URI 문법 형식)은 URI 스키마와 호스트를 제외하고는 대소문자를 구별하도록 규정하기 때문</li>\n </ul>\n </li>\n <li>파일확장자는 URI에 포함하지 않는다.\n <ul>\n <li>REST API에서는 메시지 바디 내용의 포맷을 나타내기 위한 파일 확장자를 URI 안에 포함시키지 않는다.</li>\n <li>Accept header를 사용한다.</li>\n </ul>\n </li>\n <li>리소스 간에는 연관 관계가 있는 경우 <code class=\"language-plaintext highlighter-rouge\">/리소스명/리소스 ID/관계가 있는 다른 리소스명</code>으로 나타낸다.</li>\n</ul>\n\n<h2 id=\"7-restful이란\">7. RESTful이란</h2>\n<p>RESTful이란 일반적으로 REST라는 아키텍처를 구현하는 웹 서비스를 나타내기 위해 사용되는 용어로, ‘REST API’를 제공하는 웹 서비스를 ‘RESTful’하다고 할 수 있다.\nRESTful은 REST를 REST답게 쓰기 위한 방법으로, 누군가가 공식적으로 발표한 것이 아니다.</p>\n\n<p>RESTful 하지 못한 경우는 다음과 같다.</p>\n<ul>\n <li>CRUD 기능을 모두 POST로만 처리하는 API</li>\n <li>route에 resource, id 외의 정보가 들어가는 경우</li>\n</ul>\n","dir":"/0004Tools/0002Knowledges/0004RESTAPI/","name":"0001RESTAPI.md","path":"0004Tools/0002Knowledges/0004RESTAPI/0001RESTAPI.md","url":"/0004Tools/0002Knowledges/0004RESTAPI/0001RESTAPI.html"},{"sort":1,"layout":"default","title":"DB","content":"<h1 id=\"db\">DB</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- <a href=\"https://ko.wikipedia.org/wiki/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4\">DataBase 위키 페이지</a></em></p>\n\n<p><em>- <a href=\"https://www.oracle.com/kr/database/what-is-database/\">Oracle data base</a></em></p>\n\n<p><em>- <a href=\"https://honeyteacs.tistory.com/19\">database 종류</a></em></p>\n\n<h2 id=\"1-데이터베이스란\">1. 데이터베이스란?</h2>\n\n<p>데이터베이스는 일반적으로 컴퓨터 시스템에 전자적으로 저장되는 구조화된 정보 또는 데이터의 조직화된 모음이다. 데이터베이스는 일반적으로 데이터베이스 관리 시스템(DBMS)에 의해 제어되며, 연결된 애플리케이션과 함께 데이터와 DBMS를 하나로 묶어 데이터베이스 시스템이라고 하며 데이터베이스라고도 한다.</p>\n\n<p>오늘날 운영되고 있는 가장 일반적인 유형의 데이터베이스에서 데이터는 일반적으로 처리 및 데이터 쿼리를 효율적으로 수행하기 위해 일련의 테이블에서 행과 열로 모델링된다. 이는 데이터에 쉽게 액세스하고 관리, 수정, 업데이트, 제어 및 구성할 수 있게한다. 대부분의 데이터베이스는 데이터 작성 및 쿼리(query)에 SQL(Structured Query Language)을 사용합니다.</p>\n\n<h2 id=\"2-query란\">2. Query란?</h2>\n<p>쿼리의 사전적 의미는 ‘질문’이라는 뜻으로, 데이터베이스에 정보 요청하는 것을 뜻한다. 따라서 쿼리를 이용하여 데이터베이스에서 원하는 정보를 가져올 수 있음을 말하며, 쿼리를 잘 작성해야 데이터베이스에서 필요한 데이터에 빠르게 접근하고, 효율적으로 핸들링할 수 있다.</p>\n\n<h2 id=\"3-sqlstructured-query-language이란\">3. SQL(Structured Query Language)이란?</h2>\n<p>SQL은 데이터를 쿼리, 조작 및 정의하고 액세스 제어를 제공하기 위해 거의 모든 관계형 데이터베이스에서 사용되는 프로그래밍 언어를 말한다. SQL은 1970년대에 IBM에서 처음 개발되었으며, 이 언어는 수학적 관계 대수와 관계 논리에 기반을 둔다. 현재 많은 데이터베이스 관련 프로그램들이 SQL을 표준으로 채택하고 있다.</p>\n\n<h2 id=\"4-데이터베이스-종류\">4. 데이터베이스 종류</h2>\n\n<h3 id=\"41-관계형-데이터베이스\">4.1 관계형 데이터베이스</h3>\n\n<p>관계형 데이터베이스(RDB)는 아직까지도 가장 많이 사용되는 데이터베이스로서 흔히 행(Column)과 열(Row)로 표현되는 테이블간의 관계를 나타낼 때 사용되며, 이렇게 표현된 데이터베이스는 SQL을 통하여 관리 및 접근한다.</p>\n<ul>\n <li>Oracle, MySQL(Oracle) / MS-SQL(Microsoft) / DB2, Infomix(IBM) / Maria DB(Sun Microsystems) / Derby(Apache) / SQLite(Opensource)</li>\n <li>SQLite: 로컬에서 사용하는 경량 데이터베이스로서 원격 Connection이 발생하지 않으므로 속도가 매우 빠르다. (주로 모바일이나 웹에서 사용됨)</li>\n</ul>\n\n<h3 id=\"42-nosqlnot-only-sql\">4.2 NoSQL(Not Only SQL)</h3>\n<p>NoSQL은 RDB의 특성 뿐만 아니라 다른 특성까지도 지원해 주는 데이터베이스라는 의미를 지닌다. 이는 대용량 데이터를 다루거나 데이터 분산 처리에 용이하며, 유연한 데이터 모델링이 가능하고 Cloud Computing에 적합하다.</p>\n\n<p>NoSQL 종류는 다음과 같다.</p>\n<ol>\n <li>Document방식\n MongoDB(MongoDB Inc.), CouchDB(Apache) : Json, XML과 같은 Collection 데이터 모델 구조 사용</li>\n <li>Key - Value 방식\n Redis, Memchached : 둘다 In-memory DB이기도 하며 Key와 Value의 데이터가 쌍으로 저장되는 가장 단순한 데이터 모델 구조 사용</li>\n <li>Big Table DB\n HBase, Cassandra, Hypertable, ScyllaDB : Key-Value 형에서 발전된 형태인 Column Family 데이터 모델 구조 사용</li>\n</ol>\n","dir":"/0004Tools/0002Knowledges/0005DB/","name":"0001DB.md","path":"0004Tools/0002Knowledges/0005DB/0001DB.md","url":"/0004Tools/0002Knowledges/0005DB/0001DB.html"},{"sort":2,"layout":"default","title":"Catkin","content":"<h1 id=\"catkin\">Catkin</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- Programming Robots with ROS(Morgan Quigley, Brian Gerkey, William D. Smart)</em></p>\n\n<p><em>- <a href=\"https://wiki.ros.org/catkin/conceptual_overview\">catkin overview ros wiki pages</a></em></p>\n\n<h2 id=\"1-catkin-이란\">1. Catkin 이란?</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">catkin</code>은 <code class=\"language-plaintext highlighter-rouge\">ROS</code>에 사용되는 실행 프로그램, 라이브러리, 스크립트 및 다른 코드에서 사용할 인터페이스를 생성할 수 있도록 하는 <code class=\"language-plaintext highlighter-rouge\">ROS</code> 빌드 시스템이다. <code class=\"language-plaintext highlighter-rouge\">catkin</code>은 <code class=\"language-plaintext highlighter-rouge\">CMake</code> 매크로들과 일반적인 <code class=\"language-plaintext highlighter-rouge\">CMake</code> workflow에 추가적인 기능을 제공하기 위한 전용 파이썬 스크립트로 구성된다.</p>\n\n<h2 id=\"2-ros-프로젝트를-진행하며-자주-사용한-catkin-cli\">2. ROS 프로젝트를 진행하며 자주 사용한 catkin CLI</h2>\n<p>다음은 <code class=\"language-plaintext highlighter-rouge\">ROS</code> 프로젝트를 진행하면서 주로 사용되는 <code class=\"language-plaintext highlighter-rouge\">command line arguments</code>를 정리하였다.</p>\n\n<ul>\n <li>\n <p><code class=\"language-plaintext highlighter-rouge\">catkin_create_pkg [package_name] [dependency_package1] [dependency_package2] ...</code>\n<code class=\"language-plaintext highlighter-rouge\">ROS</code> 패키지를 생성하는 명령으로, <code class=\"language-plaintext highlighter-rouge\">package_name</code>으로 패키지를 생성하며, <code class=\"language-plaintext highlighter-rouge\">CMakeLists.txt</code>와 <code class=\"language-plaintext highlighter-rouge\">package.xml</code>을 포함한 패키지 폴더를 생성한다. 이 때, 패키지 이름은 모두 소문자를 사용해야하며, 공백이 있으면 안된다.</p>\n </li>\n <li>\n <p><code class=\"language-plaintext highlighter-rouge\">catkin_make</code>\n<code class=\"language-plaintext highlighter-rouge\">catkin</code> 빌드 명령어로, <code class=\"language-plaintext highlighter-rouge\">workspace</code> 위치에서 해당 명령어로 <code class=\"language-plaintext highlighter-rouge\">workspace</code> 내부에 있는 패키지들을 빌드할 수 있다.</p>\n </li>\n</ul>\n","dir":"/0001ROS/0001ROS1/0001Basic/","name":"0002Catkin.md","path":"0001ROS/0001ROS1/0001Basic/0002Catkin.md","url":"/0001ROS/0001ROS1/0001Basic/0002Catkin.html"},{"sort":2,"layout":"default","title":"actionlib beginner tutorials(c++)","content":"<h1 id=\"actionlib-beginner-tutorialsc\">actionlib beginner tutorials(c++)</h1>\n\n<p><em>- <a href=\"http://wiki.ros.org/actionlib/Tutorials\">actionlib tutorials 위키 페이지</a></em></p>\n\n<h2 id=\"1-writing-a-simple-action-server-using-the-execute-callback\">1. Writing a Simple Action Server using the Execute Callback</h2>\n\n<h3 id=\"11-creating-the-action-messages\">1.1 Creating the Action Messages</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">.action</code>은 <code class=\"language-plaintext highlighter-rouge\">goal</code>, <code class=\"language-plaintext highlighter-rouge\">result</code>, <code class=\"language-plaintext highlighter-rouge\">feedback</code>을 정의한다.\n다음은 <a href=\"\">Fibonacci.action</a> 파일에 정의된 내용이다.</p>\n<div class=\"language-text highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>#goal definition\nint32 order\n---\n#result definition\nint32[] sequence\n---\n#feedback\nint32[] sequence\n</code></pre>  </div></div>\n\n<p>다음으로, action 메세지를 생성하기 위해 CMakeLsts.txt에 해당 내용을 추가해야한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">find_package</span><span class=\"p\">(</span>catkin REQUIRED COMPONENTS actionlib_msgs<span class=\"p\">)</span>\n\n<span class=\"nf\">add_action_files</span><span class=\"p\">(</span>\n  DIRECTORY action\n  FILES Fibonacci.action\n<span class=\"p\">)</span>\n\n<span class=\"nf\">generate_messages</span><span class=\"p\">(</span>\n  DEPENDENCIES actionlib_msgs std_msgs  <span class=\"c1\"># Or other packages containing msgs</span>\n<span class=\"p\">)</span>\n\n<span class=\"nf\">catkin_package</span><span class=\"p\">(</span>\n  CATKIN_DEPENDS actionlib_msgs\n<span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<p>또한, package.xml에도 다음을 추가해야 한다.</p>\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;exec_depend&gt;</span>message_generation<span class=\"nt\">&lt;/exec_depend&gt;</span>\n</code></pre>  </div></div>\n\n<h3 id=\"12-writing-a-simple-server\">1.2 Writing a Simple Server</h3>\n<h4 id=\"121-the-code\">1.2.1 The Code</h4>\n<p>다음은 actionlib_tutorials/src/fibonacci_server.cpp 부분이다.</p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;ros/ros.h&gt;\n#include &lt;actionlib/server/simple_action_server.h&gt;\n#include &lt;actionlib_tutorials/FibonacciAction.h&gt;\n</span>\n<span class=\"k\">class</span> <span class=\"nc\">FibonacciAction</span>\n<span class=\"p\">{</span>\n<span class=\"nl\">protected:</span>\n\n  <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">NodeHandle</span> <span class=\"n\">nh_</span><span class=\"p\">;</span>\n  <span class=\"n\">actionlib</span><span class=\"o\">::</span><span class=\"n\">SimpleActionServer</span><span class=\"o\">&lt;</span><span class=\"n\">actionlib_tutorials</span><span class=\"o\">::</span><span class=\"n\">FibonacciAction</span><span class=\"o\">&gt;</span> <span class=\"n\">as_</span><span class=\"p\">;</span> <span class=\"c1\">// NodeHandle instance must be created before this line. Otherwise strange error occurs.</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">action_name_</span><span class=\"p\">;</span>\n  <span class=\"c1\">// create messages that are used to published feedback/result</span>\n  <span class=\"n\">actionlib_tutorials</span><span class=\"o\">::</span><span class=\"n\">FibonacciFeedback</span> <span class=\"n\">feedback_</span><span class=\"p\">;</span>\n  <span class=\"n\">actionlib_tutorials</span><span class=\"o\">::</span><span class=\"n\">FibonacciResult</span> <span class=\"n\">result_</span><span class=\"p\">;</span>\n\n<span class=\"nl\">public:</span>\n\n  <span class=\"n\">FibonacciAction</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">as_</span><span class=\"p\">(</span><span class=\"n\">nh_</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">FibonacciAction</span><span class=\"o\">::</span><span class=\"n\">executeCB</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"n\">_1</span><span class=\"p\">),</span> <span class=\"nb\">false</span><span class=\"p\">),</span>\n    <span class=\"n\">action_name_</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">as_</span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"o\">~</span><span class=\"n\">FibonacciAction</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kt\">void</span> <span class=\"n\">executeCB</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">actionlib_tutorials</span><span class=\"o\">::</span><span class=\"n\">FibonacciGoalConstPtr</span> <span class=\"o\">&amp;</span><span class=\"n\">goal</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"c1\">// helper variables</span>\n    <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">Rate</span> <span class=\"n\">r</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"kt\">bool</span> <span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// push_back the seeds for the fibonacci sequence</span>\n    <span class=\"n\">feedback_</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">.</span><span class=\"n\">clear</span><span class=\"p\">();</span>\n    <span class=\"n\">feedback_</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">feedback_</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// publish info to the console for the user</span>\n    <span class=\"n\">ROS_INFO</span><span class=\"p\">(</span><span class=\"s\">\"%s: Executing, creating fibonacci sequence of order %i with seeds %i, %i\"</span><span class=\"p\">,</span> <span class=\"n\">action_name_</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">(),</span> <span class=\"n\">goal</span><span class=\"o\">-&gt;</span><span class=\"n\">order</span><span class=\"p\">,</span> <span class=\"n\">feedback_</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">feedback_</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n\n    <span class=\"c1\">// start executing the action</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;=</span><span class=\"n\">goal</span><span class=\"o\">-&gt;</span><span class=\"n\">order</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"c1\">// check that preempt has not been requested by the client</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">as_</span><span class=\"p\">.</span><span class=\"n\">isPreemptRequested</span><span class=\"p\">()</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">ok</span><span class=\"p\">())</span>\n      <span class=\"p\">{</span>\n        <span class=\"n\">ROS_INFO</span><span class=\"p\">(</span><span class=\"s\">\"%s: Preempted\"</span><span class=\"p\">,</span> <span class=\"n\">action_name_</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n        <span class=\"c1\">// set the action state to preempted</span>\n        <span class=\"n\">as_</span><span class=\"p\">.</span><span class=\"n\">setPreempted</span><span class=\"p\">();</span>\n        <span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n        <span class=\"k\">break</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"n\">feedback_</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">feedback_</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">feedback_</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n      <span class=\"c1\">// publish the feedback</span>\n      <span class=\"n\">as_</span><span class=\"p\">.</span><span class=\"n\">publishFeedback</span><span class=\"p\">(</span><span class=\"n\">feedback_</span><span class=\"p\">);</span>\n      <span class=\"c1\">// this sleep is not necessary, the sequence is computed at 1 Hz for demonstration purposes</span>\n      <span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">sleep</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"n\">result_</span><span class=\"p\">.</span><span class=\"n\">sequence</span> <span class=\"o\">=</span> <span class=\"n\">feedback_</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">;</span>\n      <span class=\"n\">ROS_INFO</span><span class=\"p\">(</span><span class=\"s\">\"%s: Succeeded\"</span><span class=\"p\">,</span> <span class=\"n\">action_name_</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n      <span class=\"c1\">// set the action state to succeeded</span>\n      <span class=\"n\">as_</span><span class=\"p\">.</span><span class=\"n\">setSucceeded</span><span class=\"p\">(</span><span class=\"n\">result_</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n\n<span class=\"p\">};</span>\n\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">**</span> <span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">,</span> <span class=\"s\">\"fibonacci\"</span><span class=\"p\">);</span>\n\n  <span class=\"n\">FibonacciAction</span> <span class=\"n\">fibonacci</span><span class=\"p\">(</span><span class=\"s\">\"fibonacci\"</span><span class=\"p\">);</span>\n  <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">spin</span><span class=\"p\">();</span>\n\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h4 id=\"122-the-code-explained\">1.2.2 The Code Explained</h4>\n\n<ul>\n <li>actionlib/server/simple_action_server.h는 simple action을 구현하는 데 사용된다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;ros/ros.h&gt;\n#include &lt;actionlib/server/simple_action_server.h&gt;\n</span></code></pre>  </div> </div>\n </li>\n <li>위에서 만든 <code class=\"language-plaintext highlighter-rouge\">.action</code>에 의해 빌드시 생성된 FibonacciAction.h를 가져온다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;actionlib_tutorials/FibonacciAction.h&gt;\n</span></code></pre>  </div> </div>\n </li>\n <li>다음은 <code class=\"language-plaintext highlighter-rouge\">FibonacciAction</code> 클래스의 <code class=\"language-plaintext highlighter-rouge\">protected</code> 변수로, <code class=\"language-plaintext highlighter-rouge\">NodeHandle</code>은 action server를 핸들링하는데 사용되며, <code class=\"language-plaintext highlighter-rouge\">SimpleActionServer</code>는 action server를 구현하는데 사용된다. <code class=\"language-plaintext highlighter-rouge\">action_name_</code>은 action을 주고 받을 때 사용할 이름을 나타내고, <code class=\"language-plaintext highlighter-rouge\">feedback_</code>과 <code class=\"language-plaintext highlighter-rouge\">result_</code>는 action 수행의 결과를 담기 위한 변수이다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">FibonacciAction</span>\n<span class=\"p\">{</span>\n<span class=\"nl\">protected:</span>\n\n<span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">NodeHandle</span> <span class=\"n\">nh_</span><span class=\"p\">;</span>\n<span class=\"n\">actionlib</span><span class=\"o\">::</span><span class=\"n\">SimpleActionServer</span><span class=\"o\">&lt;</span><span class=\"n\">actionlib_tutorials</span><span class=\"o\">::</span><span class=\"n\">FibonacciAction</span><span class=\"o\">&gt;</span> <span class=\"n\">as_</span><span class=\"p\">;</span> <span class=\"c1\">// NodeHandle instance must be created before this line. Otherwise strange error occurs.</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">action_name_</span><span class=\"p\">;</span>\n<span class=\"c1\">// create messages that are used to published feedback/result</span>\n<span class=\"n\">actionlib_tutorials</span><span class=\"o\">::</span><span class=\"n\">FibonacciFeedback</span> <span class=\"n\">feedback_</span><span class=\"p\">;</span>\n<span class=\"n\">actionlib_tutorials</span><span class=\"o\">::</span><span class=\"n\">FibonacciResult</span> <span class=\"n\">result_</span><span class=\"p\">;</span>\n</code></pre>  </div> </div>\n </li>\n <li>클래스 생성자를 통해 action server <code class=\"language-plaintext highlighter-rouge\">as_</code>가 생성되고, 이는 NodeHandle, action 이름, 실행하기 위한 콜백함수(선택사항)을 인자로 받는다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nl\">public:</span>\n\n<span class=\"n\">FibonacciAction</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">as_</span><span class=\"p\">(</span><span class=\"n\">nh_</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">FibonacciAction</span><span class=\"o\">::</span><span class=\"n\">executeCB</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"n\">_1</span><span class=\"p\">),</span> <span class=\"nb\">false</span><span class=\"p\">),</span>\n  <span class=\"n\">action_name_</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">as_</span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"o\">~</span><span class=\"n\">FibonacciAction</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"p\">}</span>\n</code></pre>  </div> </div>\n </li>\n <li>실행 콜백 함수 <code class=\"language-plaintext highlighter-rouge\">executeCB</code>는 goal 메세지를 포인터 형태로 받는다.(여기서 자료형은 메세지 유형의 뒤에 <code class=\"language-plaintext highlighter-rouge\">ConstPtr</code>을 추가하여 생성된 boost shared pointer이다.)\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">executeCB</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">actionlib_tutorials</span><span class=\"o\">::</span><span class=\"n\">FibonacciGoalConstPtr</span> <span class=\"o\">&amp;</span><span class=\"n\">goal</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n</code></pre>  </div> </div>\n </li>\n <li><code class=\"language-plaintext highlighter-rouge\">feedback_.sequence</code>를 초기화한다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">Rate</span> <span class=\"nf\">r</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n  <span class=\"kt\">bool</span> <span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// push_back the seeds for the fibonacci sequence</span>\n  <span class=\"n\">feedback_</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">.</span><span class=\"n\">clear</span><span class=\"p\">();</span>\n  <span class=\"n\">feedback_</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n  <span class=\"n\">feedback_</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// publish info to the console for the user</span>\n  <span class=\"n\">ROS_INFO</span><span class=\"p\">(</span><span class=\"s\">\"%s: Executing, creating fibonacci sequence of order %i with seeds %i, %i\"</span><span class=\"p\">,</span> <span class=\"n\">action_name_</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">(),</span> <span class=\"n\">goal</span><span class=\"o\">-&gt;</span><span class=\"n\">order</span><span class=\"p\">,</span> <span class=\"n\">feedback_</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">feedback_</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n</code></pre>  </div> </div>\n </li>\n <li>client로부터 요청받은 <code class=\"language-plaintext highlighter-rouge\">goal</code>을 수행한다. 수행 도중 사용자가 새로운 action을 요청하여 <code class=\"language-plaintext highlighter-rouge\">isPreemptRequested()</code>가 호출되면 현재 <code class=\"language-plaintext highlighter-rouge\">goal</code>에 대한 수행이 중단되고, 새로운 <code class=\"language-plaintext highlighter-rouge\">goal</code>에 대한 작업을 수행한다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"c1\">// start executing the action</span>\n  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;=</span><span class=\"n\">goal</span><span class=\"o\">-&gt;</span><span class=\"n\">order</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"c1\">// check that preempt has not been requested by the client</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">as_</span><span class=\"p\">.</span><span class=\"n\">isPreemptRequested</span><span class=\"p\">()</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">ok</span><span class=\"p\">())</span>\n    <span class=\"p\">{</span>\n      <span class=\"n\">ROS_INFO</span><span class=\"p\">(</span><span class=\"s\">\"%s: Preempted\"</span><span class=\"p\">,</span> <span class=\"n\">action_name_</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n      <span class=\"c1\">// set the action state to preempted</span>\n      <span class=\"n\">as_</span><span class=\"p\">.</span><span class=\"n\">setPreempted</span><span class=\"p\">();</span>\n      <span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">feedback_</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">feedback_</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">feedback_</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n</code></pre>  </div> </div>\n </li>\n <li>피보나치 수열을 담은 <code class=\"language-plaintext highlighter-rouge\">feedback_</code> 변수를 action server를 통해 publish하며, 이는 for문을 돌며 지속적으로 feedback 된다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"c1\">// publish the feedback</span>\n    <span class=\"n\">as_</span><span class=\"p\">.</span><span class=\"n\">publishFeedback</span><span class=\"p\">(</span><span class=\"n\">feedback_</span><span class=\"p\">);</span>\n    <span class=\"c1\">// this sleep is not necessary, the sequence is computed at 1 Hz for demonstration purposes</span>\n    <span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">sleep</span><span class=\"p\">();</span>\n  <span class=\"err\">}</span>\n</code></pre>  </div> </div>\n </li>\n <li>모든 작업이 종료되고, <code class=\"language-plaintext highlighter-rouge\">success</code>가 <code class=\"language-plaintext highlighter-rouge\">true</code>상태라면 action server를 통해 <code class=\"language-plaintext highlighter-rouge\">result_</code> 변수를 publish 한다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">result_</span><span class=\"p\">.</span><span class=\"n\">sequence</span> <span class=\"o\">=</span> <span class=\"n\">feedback_</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">;</span>\n    <span class=\"n\">ROS_INFO</span><span class=\"p\">(</span><span class=\"s\">\"%s: Succeeded\"</span><span class=\"p\">,</span> <span class=\"n\">action_name_</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n    <span class=\"c1\">// set the action state to succeeded</span>\n    <span class=\"n\">as_</span><span class=\"p\">.</span><span class=\"n\">setSucceeded</span><span class=\"p\">(</span><span class=\"n\">result_</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"err\">}</span>\n</code></pre>  </div> </div>\n </li>\n <li>main 함수는 노드 초기화 및 <code class=\"language-plaintext highlighter-rouge\">FibonacciAction</code>을 실행한다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">**</span> <span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">,</span> <span class=\"s\">\"fibonacci\"</span><span class=\"p\">);</span>\n\n<span class=\"n\">FibonacciAction</span> <span class=\"n\">fibonacci</span><span class=\"p\">(</span><span class=\"s\">\"fibonacci\"</span><span class=\"p\">);</span>\n<span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">spin</span><span class=\"p\">();</span>\n\n<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div> </div>\n </li>\n</ul>\n\n<h3 id=\"13-compiling\">1.3 Compiling</h3>\n<p>생성한 action server 소스 코드를 Compile 하기 위해 CmakeLists.txt에 다음을 추가적으로 작성해야 한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">add_executable</span><span class=\"p\">(</span>fibonacci_server src/fibonacci_server.cpp<span class=\"p\">)</span>\n\n<span class=\"nb\">target_link_libraries</span><span class=\"p\">(</span>\n  fibonacci_server\n  <span class=\"si\">${</span><span class=\"nv\">catkin_LIBRARIES</span><span class=\"si\">}</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">add_dependencies</span><span class=\"p\">(</span>\n  fibonacci_server\n  <span class=\"si\">${</span><span class=\"nv\">actionlib_tutorials_EXPORTED_TARGETS</span><span class=\"si\">}</span>\n<span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<h2 id=\"2-writing-a-simple-action-client\">2. Writing a Simple Action Client</h2>\n\n<h3 id=\"21-the-code\">2.1 The Code</h3>\n<p>다음은 actionlib_tutorials/src/fibonacci_client.cpp 부분이다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;ros/ros.h&gt;\n#include &lt;actionlib/client/simple_action_client.h&gt;\n#include &lt;actionlib/client/terminal_state.h&gt;\n#include &lt;actionlib_tutorials/FibonacciAction.h&gt;\n</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">,</span> <span class=\"s\">\"test_fibonacci\"</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// create the action client</span>\n  <span class=\"c1\">// true causes the client to spin its own thread</span>\n  <span class=\"n\">actionlib</span><span class=\"o\">::</span><span class=\"n\">SimpleActionClient</span><span class=\"o\">&lt;</span><span class=\"n\">actionlib_tutorials</span><span class=\"o\">::</span><span class=\"n\">FibonacciAction</span><span class=\"o\">&gt;</span> <span class=\"n\">ac</span><span class=\"p\">(</span><span class=\"s\">\"fibonacci\"</span><span class=\"p\">,</span> <span class=\"nb\">true</span><span class=\"p\">);</span>\n\n  <span class=\"n\">ROS_INFO</span><span class=\"p\">(</span><span class=\"s\">\"Waiting for action server to start.\"</span><span class=\"p\">);</span>\n  <span class=\"c1\">// wait for the action server to start</span>\n  <span class=\"n\">ac</span><span class=\"p\">.</span><span class=\"n\">waitForServer</span><span class=\"p\">();</span> <span class=\"c1\">//will wait for infinite time</span>\n\n  <span class=\"n\">ROS_INFO</span><span class=\"p\">(</span><span class=\"s\">\"Action server started, sending goal.\"</span><span class=\"p\">);</span>\n  <span class=\"c1\">// send a goal to the action</span>\n  <span class=\"n\">actionlib_tutorials</span><span class=\"o\">::</span><span class=\"n\">FibonacciGoal</span> <span class=\"n\">goal</span><span class=\"p\">;</span>\n  <span class=\"n\">goal</span><span class=\"p\">.</span><span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"p\">;</span>\n  <span class=\"n\">ac</span><span class=\"p\">.</span><span class=\"n\">sendGoal</span><span class=\"p\">(</span><span class=\"n\">goal</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">//wait for the action to return</span>\n  <span class=\"kt\">bool</span> <span class=\"n\">finished_before_timeout</span> <span class=\"o\">=</span> <span class=\"n\">ac</span><span class=\"p\">.</span><span class=\"n\">waitForResult</span><span class=\"p\">(</span><span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">Duration</span><span class=\"p\">(</span><span class=\"mf\">30.0</span><span class=\"p\">));</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">finished_before_timeout</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">actionlib</span><span class=\"o\">::</span><span class=\"n\">SimpleClientGoalState</span> <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">ac</span><span class=\"p\">.</span><span class=\"n\">getState</span><span class=\"p\">();</span>\n    <span class=\"n\">ROS_INFO</span><span class=\"p\">(</span><span class=\"s\">\"Action finished: %s\"</span><span class=\"p\">,</span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"n\">toString</span><span class=\"p\">().</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">ROS_INFO</span><span class=\"p\">(</span><span class=\"s\">\"Action did not finish before the time out.\"</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">//exit</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h3 id=\"22-the-code-explained\">2.2 The Code Explained</h3>\n<ul>\n <li>actionlib/client/simple_action_client.h는 simple action client을 구현하는 데 사용된다. actionlib/client/terminal_state.h는 가능한 목표 상태를 정의한다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;ros/ros.h&gt;\n#include &lt;actionlib/client/simple_action_client.h&gt;\n#include &lt;actionlib/client/terminal_state.h&gt;\n</span></code></pre>  </div> </div>\n </li>\n <li>위에서 만든 <code class=\"language-plaintext highlighter-rouge\">.action</code>에 의해 빌드시 생성된 FibonacciAction.h를 가져온다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;actionlib_tutorials/FibonacciAction.h&gt;\n</span></code></pre>  </div> </div>\n </li>\n <li>SimpleActionClient는 메세지 타입을 정의하고, action 이름과 actionlib 스레드를 spin 할 boolean 변수를 인자로 입력한다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">main</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">,</span> <span class=\"s\">\"test_fibonacci\"</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// create the action client</span>\n<span class=\"c1\">// true causes the client to spin its own thread</span>\n<span class=\"n\">actionlib</span><span class=\"o\">::</span><span class=\"n\">SimpleActionClient</span><span class=\"o\">&lt;</span><span class=\"n\">actionlib_tutorials</span><span class=\"o\">::</span><span class=\"n\">FibonacciAction</span><span class=\"o\">&gt;</span> <span class=\"n\">ac</span><span class=\"p\">(</span><span class=\"s\">\"fibonacci\"</span><span class=\"p\">,</span> <span class=\"nb\">true</span><span class=\"p\">);</span>\n</code></pre>  </div> </div>\n </li>\n <li>action server가 수행될 때까지 기다리도록 <code class=\"language-plaintext highlighter-rouge\">waitForServer()</code>함수를 수행한다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">ROS_INFO</span><span class=\"p\">(</span><span class=\"s\">\"Waiting for action server to start.\"</span><span class=\"p\">);</span>\n<span class=\"c1\">// wait for the action server to start</span>\n<span class=\"n\">ac</span><span class=\"p\">.</span><span class=\"n\">waitForServer</span><span class=\"p\">();</span> <span class=\"c1\">//will wait for infinite time</span>\n</code></pre>  </div> </div>\n </li>\n <li><code class=\"language-plaintext highlighter-rouge\">goal</code>을 설정하고 <code class=\"language-plaintext highlighter-rouge\">sendGoal()</code>함수를 통해 goal을 요청한다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">ROS_INFO</span><span class=\"p\">(</span><span class=\"s\">\"Action server started, sending goal.\"</span><span class=\"p\">);</span>\n<span class=\"c1\">// send a goal to the action</span>\n<span class=\"n\">actionlib_tutorials</span><span class=\"o\">::</span><span class=\"n\">FibonacciGoal</span> <span class=\"n\">goal</span><span class=\"p\">;</span>\n<span class=\"n\">goal</span><span class=\"p\">.</span><span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"p\">;</span>\n<span class=\"n\">ac</span><span class=\"p\">.</span><span class=\"n\">sendGoal</span><span class=\"p\">(</span><span class=\"n\">goal</span><span class=\"p\">);</span>\n</code></pre>  </div> </div>\n </li>\n <li><code class=\"language-plaintext highlighter-rouge\">waitForResult()</code>함수는 action server로 goal을 요청한 이후 결과를 콜백받을 때까지 대기한다. 여기서 대기 제한 시간을 30초로 설정하였으며, 만약 30초 이내에 callback을 받을 경우 <code class=\"language-plaintext highlighter-rouge\">true</code>를 반환한다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//wait for the action to return</span>\n<span class=\"kt\">bool</span> <span class=\"n\">finished_before_timeout</span> <span class=\"o\">=</span> <span class=\"n\">ac</span><span class=\"p\">.</span><span class=\"n\">waitForResult</span><span class=\"p\">(</span><span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">Duration</span><span class=\"p\">(</span><span class=\"mf\">30.0</span><span class=\"p\">));</span>\n</code></pre>  </div> </div>\n </li>\n <li>만약 제한 시간 이내에 콜백을 받았다면, <code class=\"language-plaintext highlighter-rouge\">getState()</code>함수로 goal 요청에 대한 상태정보를 받아올 수 있다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">finished_before_timeout</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">actionlib</span><span class=\"o\">::</span><span class=\"n\">SimpleClientGoalState</span> <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">ac</span><span class=\"p\">.</span><span class=\"n\">getState</span><span class=\"p\">();</span>\n  <span class=\"n\">ROS_INFO</span><span class=\"p\">(</span><span class=\"s\">\"Action finished: %s\"</span><span class=\"p\">,</span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"n\">toString</span><span class=\"p\">().</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n<span class=\"p\">}</span>\n<span class=\"k\">else</span>\n  <span class=\"nf\">ROS_INFO</span><span class=\"p\">(</span><span class=\"s\">\"Action did not finish before the time out.\"</span><span class=\"p\">);</span>\n\n<span class=\"c1\">//exit</span>\n<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"err\">}</span>\n</code></pre>  </div> </div>\n </li>\n</ul>\n\n<h3 id=\"23-compling\">2.3 Compling</h3>\n<p>생성한 action client 소스 코드를 Compile 하기 위해 CmakeLists.txt에 다음을 추가적으로 작성해야 한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">add_executable</span><span class=\"p\">(</span>fibonacci_client src/fibonacci_client.cpp<span class=\"p\">)</span>\n\n<span class=\"nb\">target_link_libraries</span><span class=\"p\">(</span> \n  fibonacci_client\n  <span class=\"si\">${</span><span class=\"nv\">catkin_LIBRARIES</span><span class=\"si\">}</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">add_dependencies</span><span class=\"p\">(</span>\n  fibonacci_client\n  <span class=\"si\">${</span><span class=\"nv\">actionlib_tutorials_EXPORTED_TARGETS</span><span class=\"si\">}</span>\n<span class=\"p\">)</span>\n</code></pre>  </div></div>\n","dir":"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/","name":"0002actionlibBeginnerTutorials_cpp.md","path":"0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0002actionlibBeginnerTutorials_cpp.md","url":"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0002actionlibBeginnerTutorials_cpp.html"},{"sort":2,"permalink":"/0001ROS/0001ROS1/0002Intermediate/0002Gazebo/","layout":"default","title":"GAZEBO","content":"<h1 id=\"gazebo\">GAZEBO</h1>\n\n","dir":"/0001ROS/0001ROS1/0002Intermediate/0002Gazebo/","name":"README.md","path":"0001ROS/0001ROS1/0002Intermediate/0002Gazebo/README.md","url":"/0001ROS/0001ROS1/0002Intermediate/0002Gazebo/"},{"sort":2,"permalink":"/0001ROS/0001ROS1/0002Intermediate/","layout":"default","title":"INTERMEDIATE","content":"<h1 id=\"intermediate\">INTERMEDIATE</h1>\n\n<ul>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/\">Actionlib</a>\n <ul>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0001actionlib.html\">actionlib</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0002actionlibBeginnerTutorials_cpp.html\">actionlib beginner tutorials(c++)</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0003actionlibBeginnerTutorials_python.html\">actionlib beginner tutorials(python)</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0004actionlibIntermediateTutorials.html\">actionlib intermediate tutorials</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0005actionlibAdvancedTutorials.html\">actionlib advanced tutorials</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0006DynamicReconfigure.html\">dynamic reconfigure</a></li>\n </ul>\n </li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0002Gazebo/\">GAZEBO</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0002Intermediate/0003rosdistro/\">rosdistro</a></li>\n</ul>\n","dir":"/0001ROS/0001ROS1/0002Intermediate/","name":"README.md","path":"0001ROS/0001ROS1/0002Intermediate/README.md","url":"/0001ROS/0001ROS1/0002Intermediate/"},{"sort":2,"layout":"default","title":"SensorStream","content":"<h1 id=\"sensorstream\">SensorStream</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n\n<p><em>- <a href=\"http://wiki.ros.org/navigation/Tutorials/RobotSetup/Sensors\">Publishing Sensor Streams Over ROS</a></em></p>\n","dir":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/","name":"0002SensorStream.md","path":"0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0002SensorStream.md","url":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0002SensorStream.html"},{"sort":2,"layout":"default","title":"move_base","content":"<h1 id=\"move_base\">move_base</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n\n<p><em>- <a href=\"http://wiki.ros.org/move_base\">move_base 위키 페이지</a></em></p>\n\n<h2 id=\"1-move_base\">1. move_base</h2>\n<p><img src=\"move_base.png\" width=\"900\" height=\"400\" /></p>\n\n<p>move_base는 로봇의 base를 최종 목적지로 이동시키기 위한 패키지이다. move_base는 글로벌 및 로컬 플래너를 이용하여 네비게이션 task를 수행한다. nav_core 인터페이스를 준수하는 모든 글로벌/로컬 플래너를 사용할 수 있으며, 글로벌/로컬 플래너에 필요한 각각의 costmap을 사용한다.</p>\n\n<h2 id=\"2-action-api\">2. Action API</h2>\n<p>move_base 노드는 geometry_msgs/PoseStamped를 포함하는 goals을 가져오는 SimpleActionServer의 구현을 제공한다. 따라서, 사용자는 상태를 추적하기 위해 SimpleActionClient를 통해 move_base에 goals를 보내는 것을 추천한다.</p>\n\n<blockquote>\n <p><a href=\"http://wiki.ros.org/actionlib\">actionlib doc</a></p>\n</blockquote>\n\n<ul>\n <li>Action Subscribed Topics\n <ol>\n <li>move_base/goal(move_base_msgs/MoveBaseActionGoal) : move_base 내에서 goal 요청</li>\n <li>move_base/cancel(actionlib_msgs/GoalID) : 특정 goal를 취소 요청</li>\n </ol>\n </li>\n <li>Action Published Topics\n <ol>\n <li>move_base/feedback(move_base_msgs/MoveBaseActionFeedback) : 로봇 base의 현재 위치 피드백</li>\n <li>move_base/status(actionlib_msgs/GoalStatusArray) : 현재 Task에 대한 상태 정보 제공</li>\n <li>move_base/result(move_base_msgs/MoveBaseActionResult) : move_base 액션에 대한 결과를 비움</li>\n </ol>\n </li>\n</ul>\n\n<h2 id=\"3-subscriped-topics\">3. Subscriped Topics</h2>\n<ol>\n <li>move_base_simple/goal(<a href=\"http://docs.ros.org/en/api/geometry_msgs/html/msg/PoseStamped.html\">geometry_msgs/PoseStamped</a>) : 사용자가 move_base에 내리는 topic 형태의 goal</li>\n</ol>\n\n<h2 id=\"4-published-topics\">4. Published Topics</h2>\n<ol>\n <li>cmd_vel(<a href=\"http://docs.ros.org/en/api/geometry_msgs/html/msg/Twist.html\">geometry_msgs/Twist</a>) : 로봇에 내리는 속도 명령</li>\n</ol>\n\n<h2 id=\"5-services\">5. Services</h2>\n<ol>\n <li>~make_plan(nav_msgs/GetPlan) : move_base에 주어진 pose를 위한 plan을 요청한다.</li>\n <li>~clear_unkown_space(std_srvs/Empty) : move_base에 알지 못하는 공간에 대한 costmap을 제거한다.</li>\n <li>~clear_costmaps(std_srvs/Empty) : costmap의 장애물을 제거한다.</li>\n</ol>\n\n<h2 id=\"6-parameters\">6. Parameters</h2>\n<p><a href=\"http://wiki.ros.org/move_base\">move_base 위키 페이지</a> 1.1.6 Parameters 참조</p>\n","dir":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/","name":"0002MoveBase.md","path":"0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0002MoveBase.md","url":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0002MoveBase.html"},{"sort":2,"permalink":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/","layout":"default","title":"NavigationStackSetup","content":"<h1 id=\"navigationstacksetup\">NavigationStackSetup</h1>\n\n<ul>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0001NavCore.html\">nav_core</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0002MoveBase.html\">move_base</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0003DWALocalPlanner.html\">dwa_local_planner</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0004GlobalPlanner.html\">global_planner</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0005DefaultRecoveryBehavior.html\">DefaultRecoveryBehavior</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0006Costmap.html\">Costmap</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0007AMCL.html\">amcl</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0008MapServer.html\">map_server</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0009NavigationTunning.html\">Navigation Tunning Guide</a></li>\n</ul>\n","dir":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/","name":"README.md","path":"0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/README.md","url":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/"},{"sort":2,"layout":"default","title":"FlexBe Tutorials","content":"<h1 id=\"flexbe-tutorials\">FlexBe Tutorials</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n\n<p><em>- <a href=\"http://philserver.bplaced.net/fbe/\">FlexBe 홈페이지</a></em></p>\n\n<p><em>- <a href=\"http://wiki.ros.org/flexbe/Tutorials\">FlexBe Tutorials ROS 위키 페이지</a></em></p>\n\n<h2 id=\"1-creating-a-new-behavior\">1. Creating a New Behavior</h2>\n<p>다음의 roslaunch 명령을 통해 flexbe app을 실행시킨다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>roslaunch flexbe_app flexbe_ocs.launch\n</code></pre>  </div></div>\n\n<p>flexbe_ocs를 실행하면 Behavior Deshboard가 보이는데, <a href=\"http://wiki.ros.org/flexbe/Tutorials/Creating%20a%20New%20Behavior\">위키 페이지</a> 참조하여 다음과 같이작성한다.</p>\n\n<p><img src=\"flexbe_tutorials.png\" width=\"1000\" height=\"600\" /></p>\n\n<ul>\n <li>Overview : 해당 behavior의 이름과 그에 대한 개요를 작성한다.\n <ul>\n <li>이 때 이름은 위 예제처럼 대문자 및 공백을 만들지 않고, 공백 없는 소문자로 작성하는 것이 좋다.</li>\n </ul>\n </li>\n <li>Private Configuration : behavior 동작에 필요한 상수값을 정의한다.</li>\n <li>Behavior Parameters : behavior 동작에 사용되는 매개변수를 정의한다.</li>\n <li>State Machine Userdata : 한 state에서 다음 state로 전달되는 userdata 값으로, 각 state의 input_keys와 output_keys를 정의한다.</li>\n <li>State Machine Interface : 전체 state machine의 outcomes와 input_keys, output_keys를 정의한다.</li>\n</ul>\n\n<h2 id=\"2-using-the-statemachine-editor\">2. Using the Statemachine Editor</h2>\n<p>다음으로 Statemachine Editor로 이동하여 동작에 필요한 state를 정의한다. state의 세부 생성 방법은 <a href=\"http://wiki.ros.org/flexbe/Tutorials/Using%20the%20Statemachine%20Editor\">위키 페이지</a> 참조하여 작성하면 된다. 여기서는 새로운 state를 만드는 것이 아니라 flexbe에서 제공하는 state를 이용하여 정의하는 것이다.</p>\n\n<p><img src=\"flexbe_tutorials2.png\" width=\"1000\" height=\"600\" /></p>\n\n<ul>\n <li>Initial_Wait는 WaitState state를 이용하여 정의되었고, WaitState에서 정의되어야 하는 파라미터는 wait_time이다.\n <ul>\n <li>wait_time을 앞서 Behavior Parameters에서 정의한 매개변수인 waiting_time으로 지정하였다.</li>\n <li>Initial_Wait는 waiting_time의 값 만큼 대기하는 state이다.</li>\n <li>앞서 정의한 파라미터들은 self. 로 시작해야 하며, 이는 파라미터와 상수를 구분하기 위해 사용된다.</li>\n </ul>\n </li>\n <li>Print_Gretting은 LogState state를 이용하여 정의되었고, LogState에서 정의되어야 하는 파라미터는 text와 serverity이다.\n <ul>\n <li>text는 앞서 정의한 상수인 hello로 정의하였고, serverity는 디폴트로 정의되어 있는 Logger.REPORT_HINT를 사용한다.</li>\n <li>Required Autonomy Levels는 High로 지정한다.</li>\n <li>Print_Gretting은 ‘Hello World!’를 출력하는 state이다.</li>\n <li>여기서 상수는 파라미터와 다르게 self.를 붙지이 않은 것을 알 수 있다.</li>\n </ul>\n </li>\n <li>시작점부터 각 state를 연결하고, 마지막엔 finished에 연결한다. 여기서 failed는 사용하지 않았다.</li>\n <li>[Save Behavior] 버튼을 통해 만든 behavior를 저장할 수 있고, 해당 behavior는 이전에 만든 repository에 생성됨을 확인할 수 있다.</li>\n</ul>\n\n<h2 id=\"3-execution-of-a-behavior\">3. Execution of a Behavior</h2>\n<p>behavior를 만들었따면, 해당 behavior를 동작하기 위해 다음의 명령으로 flexbe 전체 behavior engine을 실행할 수 있다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>roslaunch flexbe_app flexbe_full.launch\n</code></pre>  </div></div>\n\n<p>실행시키면 flexbe_ocs와 동일한 화면이 나오는 것을 알 수 있다. 여기서 [Load Behavior] 버튼을 통해 위해서 만든 behavior를 가져올 수 있다.</p>\n\n<p><img src=\"flexbe_tutorials3.png\" width=\"1000\" height=\"600\" /></p>\n\n<p>RuntimeControl 탭으로 넘어가면 앞서 만든 behavior를 실행시켜 볼 수 있다.(자세한 실행 내용은 <a href=\"http://wiki.ros.org/flexbe/Tutorials/Execution%20of%20a%20Behavior\">위키 페이지</a> 참조)</p>\n\n<p><img src=\"flexbe_tutorials4.png\" width=\"1000\" height=\"600\" /></p>\n\n<p>여기서 Autonomy Level의 개념을 정의하는데,</p>\n<ul>\n <li>Autonomy Level은 각 state의 수행 수준을 정의하는데 사용된다.</li>\n <li>실행 수준은 No, Low, High, Full의 네 가지 수준으로, 해당 수준의 이상인 state는 사용자가 직접 화살표를 클릭하여 진행시켜야 하며, 해당 수준 이하인 state는 자동적으로 진행이된다.\n <ul>\n <li>No인 경우에는 모든 state를 사용자가 직접 수행시키며, Low와 High는 각각 state의 Autonomy Level이 Low 또는 High 이상인 경우만 사용자가 직접 수행시키고, Full의 경우 모든 state가 자동으로 진행된다.</li>\n </ul>\n </li>\n</ul>\n","dir":"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/","name":"0002Tutorials.md","path":"0001ROS/0001ROS1/0003Advanced/0002FlexBe/0002Tutorials.md","url":"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/0002Tutorials.html"},{"sort":2,"permalink":"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/","layout":"default","title":"FlexBe","content":"<h1 id=\"flexbe\">FlexBe</h1>\n\n<ul>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/0001Installation.html\">Installation</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/0002Tutorials.html\">FlexBe Tutorials</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/0003DevelopingBasicStates.html\">Developing Basic States</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/0004RunningBehaviors.html\">Running Behaviors Without Operator</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/0005FlexBe_MBF_Example.html\">FlexBe Example for MoveBaseFlex</a></li>\n</ul>\n","dir":"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/","name":"README.md","path":"0001ROS/0001ROS1/0003Advanced/0002FlexBe/README.md","url":"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/"},{"sort":2,"layout":"default","title":"Colcon","content":"<h1 id=\"colcon\">Colcon</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- <a href=\"https://docs.ros.org/en/foxy/Tutorials/Colcon-Tutorial.html\">Colcon 관련 ROS 2.0 foxy 설치 페이지</a></em></p>\n\n<p><em>- <a href=\"https://design.ros2.org/articles/build_tool.html\">Build tools 에 대한 비교 및 정리 문서</a></em></p>\n\n<p><em>- <a href=\"https://github.com/colcon\">Colcon github pages</a></em></p>\n\n<p><em>- <a href=\"https://colcon.readthedocs.io/en/released/#\">Colcon gitbook pages</a></em></p>\n\n<h2 id=\"1-colcon-이란\">1. Colcon 이란?</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">colcon</code>은 command line tool로, 빌드, 테스트, 다수의 소프트웨어 패키지를 사용하는데 workflow를 개선하는데 사용된다. <code class=\"language-plaintext highlighter-rouge\">colcon</code>은 이런 과정을 자동화하고, 명령을 처리하고, 패키지를 사용하도록 환경을 설정한다.</p>\n\n<p>ROS 2.0에서는 <code class=\"language-plaintext highlighter-rouge\">ament_cmake</code>를 이용하여 패키지들을 빌드하는데, <code class=\"language-plaintext highlighter-rouge\">ament_cmake</code>의 사용의 불편함으로 인해, <code class=\"language-plaintext highlighter-rouge\">catkin</code>이나 <code class=\"language-plaintext highlighter-rouge\">ament</code> 등의 빌드 방식을 범용적으로 빌드할 수 있는 툴로써 <code class=\"language-plaintext highlighter-rouge\">colcon</code>을 이용하여 패키지를 빌드한다.</p>\n\n<p>ROS의 workspace는 <code class=\"language-plaintext highlighter-rouge\">src</code> 폴더 내부에 ROS 패키지들이 들어가게 된다. 이 패키지들을 빌드하기 위하여 workspace 위치(<code class=\"language-plaintext highlighter-rouge\">src</code>의 상위 폴더)에서 <code class=\"language-plaintext highlighter-rouge\">colcon build</code>를 하게 되면, <code class=\"language-plaintext highlighter-rouge\">build</code>, <code class=\"language-plaintext highlighter-rouge\">install</code>, <code class=\"language-plaintext highlighter-rouge\">log</code> 폴더들이 생성된다.</p>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">build</code> : CMake와 같이 빌드에 필요한 intermediate 파일들이 저장되는 공간으로, 빌드되는 패키지들의 폴더들이 생성됨.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">install</code> : 각 패키지들이 설치되는 폴더로, 각 패키지별로 폴더가 생성됨. <code class=\"language-plaintext highlighter-rouge\">catkin</code>으로 빌드하면 <code class=\"language-plaintext highlighter-rouge\">devel</code> 폴더가 생성되었으나 <code class=\"language-plaintext highlighter-rouge\">colcon</code>으로 빌드하게 되면 <code class=\"language-plaintext highlighter-rouge\">install</code> 폴더가 생성됨.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">log</code> : <code class=\"language-plaintext highlighter-rouge\">colcon</code> 호출에 대한 로그 정보가 기록됨.</li>\n</ul>\n\n<p>빌드 이후에 <code class=\"language-plaintext highlighter-rouge\">install</code> 폴더에 설치된 패키지들을 ROS 패키지와 함께 사용하기 위해서는 source 명령을 통해 <code class=\"language-plaintext highlighter-rouge\">install</code> 폴더 내부에 생성된 <code class=\"language-plaintext highlighter-rouge\">setup.bash</code> 의 환경 설정 내용을 가져와야 한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">source</span> ~/[workspace_name]/install/setup.bash\n</code></pre>  </div></div>\n\n<h2 id=\"2-ros-프로젝트를-진행하며-사용되는-colcon-cli\">2. ROS 프로젝트를 진행하며 사용되는 colcon CLI</h2>\n<p>다음은 <code class=\"language-plaintext highlighter-rouge\">ROS</code> 프로젝트를 진행하면서 주로 사용되는 build 관련된 <code class=\"language-plaintext highlighter-rouge\">command line arguments</code>를 정리하였다.</p>\n\n<ul>\n <li>\n <p><code class=\"language-plaintext highlighter-rouge\">--symlink-install</code>\n빌드하는 파일들을 복사하지 않고 링크로 연결하여 수정이 용이하도록 하는 명령으로, 해당 명령으로 빌드된 python 파일의 코드는 첫 빌드 이후에 내용이 수정되어도 빌드를 다시 하지 않고도 사용할 수 있다.</p>\n </li>\n <li>\n <p><code class=\"language-plaintext highlighter-rouge\">--packages-select [package_name [package_name ...]]</code>\n<code class=\"language-plaintext highlighter-rouge\">package_name</code> 패키지만 빌드한다.</p>\n </li>\n <li>\n <p><code class=\"language-plaintext highlighter-rouge\">--packages-up-to [package_name [package_name ...]]</code>\n패키지 내부에 dependency에 의해 먼저 빌드되어야 하는 패키지가 있을 때 사용되며, <code class=\"language-plaintext highlighter-rouge\">package_name</code> 패키지 내부에 걸려있는 dependency 패키지들과 <code class=\"language-plaintext highlighter-rouge\">package_name</code> 패키지를 빌드한다.</p>\n </li>\n <li>\n <p><code class=\"language-plaintext highlighter-rouge\">--cmake-args [*[* ...]]</code> \nCMake 과정에서 관련 arguments를 입력할 수 있다.</p>\n </li>\n</ul>\n","dir":"/0001ROS/0002ROS2/0001Basic/","name":"0002Colcon.md","path":"0001ROS/0002ROS2/0001Basic/0002Colcon.md","url":"/0001ROS/0002ROS2/0001Basic/0002Colcon.html"},{"sort":2,"permalink":"/0001ROS/0002ROS2/0001Basic/","layout":"default","title":"BASIC","content":"<h1 id=\"basic\">BASIC</h1>\n\n<ul>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0001Install.html\">Install</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0002Colcon.html\">Colcon</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0003CMakeList.html\">CMakeLists.txt</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0004Package-xml.html\">Package.xml</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0005Setup.html\">setup.py</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0006Launch-System.html\">Launch System</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0007Package.html\">ROS 2 Package Structure</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0008CLI.html\">Command Line Interface</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0009InterfacePackage.html\">Interface Package</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0010Topic.html\">Topic</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0011Service.html\">Service</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0012Action.html\">Action</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0013Parameter.html\">Parameter</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0014Log.html\">Log</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0015DDS.html\">DDS</a></li>\n</ul>\n","dir":"/0001ROS/0002ROS2/0001Basic/","name":"README.md","path":"0001ROS/0002ROS2/0001Basic/README.md","url":"/0001ROS/0002ROS2/0001Basic/"},{"sort":2,"permalink":"/0001ROS/0002ROS2/0002Intermediate/0002Ignition/","layout":"default","title":"IGNITION","content":"<h1 id=\"ignition\">IGNITION</h1>\n\n","dir":"/0001ROS/0002ROS2/0002Intermediate/0002Ignition/","name":"README.md","path":"0001ROS/0002ROS2/0002Intermediate/0002Ignition/README.md","url":"/0001ROS/0002ROS2/0002Intermediate/0002Ignition/"},{"sort":2,"permalink":"/0001ROS/0002ROS2/0002Intermediate/","layout":"default","title":"INTERMEDIATE","content":"<h1 id=\"intermediate\">INTERMEDIATE</h1>\n\n<ul>\n <li><a href=\"/0001ROS/0002ROS2/0002Intermediate/0001RQT/\">RQT</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0002Intermediate/0002Ignition/\">IGNITION</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0002Intermediate/0003rosdistro/\">rosdistro</a></li>\n</ul>\n","dir":"/0001ROS/0002ROS2/0002Intermediate/","name":"README.md","path":"0001ROS/0002ROS2/0002Intermediate/README.md","url":"/0001ROS/0002ROS2/0002Intermediate/"},{"sort":2,"permalink":"/0001ROS/0002ROS2/0003Advanced/0002RMF/","layout":"default","title":"RMF","content":"<h1 id=\"rmf\">RMF</h1>\n\n","dir":"/0001ROS/0002ROS2/0003Advanced/0002RMF/","name":"README.md","path":"0001ROS/0002ROS2/0003Advanced/0002RMF/README.md","url":"/0001ROS/0002ROS2/0003Advanced/0002RMF/"},{"sort":2,"permalink":"/0001ROS/0002ROS2/","layout":"default","title":"ROS 2.0","content":"<h1 id=\"ros-20\">ROS 2.0</h1>\n\n<ul>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/\">BASIC</a>\n <ul>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0001Install.html\">Install</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0002Colcon.html\">Colcon</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0003CMakeList.html\">CMakeLists.txt</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0004Package-xml.html\">Package.xml</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0005Setup.html\">setup.py</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0006Launch-System.html\">Launch System</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0007Package.html\">ROS 2 Package Structure</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0008CLI.html\">Command Line Interface</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0009InterfacePackage.html\">Interface Package</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0010Topic.html\">Topic</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0011Service.html\">Service</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0012Action.html\">Action</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0013Parameter.html\">Parameter</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0014Log.html\">Log</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0001Basic/0015DDS.html\">DDS</a></li>\n </ul>\n </li>\n <li><a href=\"/0001ROS/0002ROS2/0002Intermediate/\">INTERMEDIATE</a>\n <ul>\n <li><a href=\"/0001ROS/0002ROS2/0002Intermediate/0001RQT/\">RQT</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0002Intermediate/0002Ignition/\">IGNITION</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0002Intermediate/0003rosdistro/\">rosdistro</a></li>\n </ul>\n </li>\n <li><a href=\"/0001ROS/0002ROS2/0003Advanced/\">ADVANCED</a>\n <ul>\n <li><a href=\"/0001ROS/0002ROS2/0003Advanced/0001Navigation2/\">NAVIGATION2</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0003Advanced/0002RMF/\">RMF</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0003Advanced/0003Moveit2/\">Moveit2</a></li>\n </ul>\n </li>\n</ul>\n","dir":"/0001ROS/0002ROS2/","name":"README.md","path":"0001ROS/0002ROS2/README.md","url":"/0001ROS/0002ROS2/"},{"sort":2,"layout":"default","title":"Forward Kinematics","content":"<h1 id=\"forward-kinematics\">Forward Kinematics</h1>\n\n<p><em>- <a href=\"https://books.google.co.kr/books?id=DdjNDwAAQBAJ&amp;printsec=frontcover&amp;dq=Robot+Modeling+and+Control&amp;hl=ko&amp;sa=X&amp;redir_esc=y#v=onepage&amp;q=Robot%20Modeling%20and%20Control&amp;f=false\">Robot Modeling and Control(M. W. Spong, ‎Seth Hutchinson, ‎M. Vidyasagar)</a></em></p>\n\n<p><em>- <a href=\"https://books.google.co.kr/books?id=6SoQRAAACAAJ&amp;dq=Robot+Dynamics+and+Control+2nd+Edition&amp;hl=ko&amp;sa=X&amp;redir_esc=y\">Robot Dynamics and Control 2nd Edition(M. W. Spong, M. Vidyasagar)</a></em></p>\n","dir":"/0002ROBOTICS/0001RobotDynamics/","name":"0002ForwardKinematics.md","path":"0002ROBOTICS/0001RobotDynamics/0002ForwardKinematics.md","url":"/0002ROBOTICS/0001RobotDynamics/0002ForwardKinematics.html"},{"sort":2,"permalink":"/0002ROBOTICS/0002RobotDesign/","layout":"default","title":"Robot Design","content":"<h1 id=\"robot-design\">Robot Design</h1>\n\n","dir":"/0002ROBOTICS/0002RobotDesign/","name":"README.md","path":"0002ROBOTICS/0002RobotDesign/README.md","url":"/0002ROBOTICS/0002RobotDesign/"},{"sort":2,"permalink":"/0002ROBOTICS/0003ControlEngineering/","layout":"default","title":"ControlEngineering","content":"<h1 id=\"controlengineering\">ControlEngineering</h1>\n\n","dir":"/0002ROBOTICS/0003ControlEngineering/","name":"README.md","path":"0002ROBOTICS/0003ControlEngineering/README.md","url":"/0002ROBOTICS/0003ControlEngineering/"},{"sort":2,"layout":"default","title":"Switch Initializer","content":"<h1 id=\"switch-initializer\">Switch Initializer</h1>\n\n<ul>\n <li>참고문헌 : 전문가를 위한 C++(마크 그레고리 / 한빛미디어)</li>\n</ul>\n\n<p><code class=\"language-plaintext highlighter-rouge\">if</code> 문과 동일하게 <code class=\"language-plaintext highlighter-rouge\">C++17</code>부터 <code class=\"language-plaintext highlighter-rouge\">switch</code> 문 안에 이니셜라이저를 넣는 기능이 추가되었음.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"err\">이니셜라이저</span><span class=\"o\">&gt;</span> <span class=\"p\">;</span> <span class=\"o\">&lt;</span><span class=\"err\">조건문</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"o\">&lt;</span><span class=\"err\">본문</span><span class=\"o\">&gt;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">&lt;이니셜라이저&gt;</code>에서 정의한 변수는 <code class=\"language-plaintext highlighter-rouge\">&lt;조건문&gt;</code>과 <code class=\"language-plaintext highlighter-rouge\">&lt;본문&gt;</code> 안에서만 사용할 수 있고, <code class=\"language-plaintext highlighter-rouge\">switch</code> 문 밖에서는 사용할 수 없음.</p>\n\n","dir":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/","name":"0002Switch-initializer.md","path":"0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0002Switch-initializer.md","url":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0002Switch-initializer.html"},{"sort":2,"layout":"default","title":"String Literal","content":"<h1 id=\"string-literal\">String Literal</h1>\n\n<ul>\n <li>참고문헌 : 전문가를 위한 C++(마크 그레고리 / 한빛미디어)</li>\n</ul>\n\n<h2 id=\"string-literal-1\">String Literal</h2>\n<p>스트링 리터럴이란 다음과 같이 변수에 담지 않고 곧바로 값으로 표현한 스트링을 말한다. 다음은 hello란 스트링을 변수에 담지 않고 화면 출력에 사용된 스트링 리터럴 값이다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"hello\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n</code></pre>  </div></div>\n\n<h2 id=\"literal-pooling\">Literal Pooling</h2>\n<p>스트링 리터럴은 내부적으로 메모리의 읽기 전용 영역에 저장된다. 그래서 컴피일러는 같은 스트링 리터럴이 반복되면 그 중 한 스트링에 대한 레퍼런스를 재사용하는 방식으로 메모리를 절약한다. 이를 리터럴 풀링이라 한다.</p>\n\n<h2 id=\"스트링-리터럴의-대입\">스트링 리터럴의 대입</h2>\n<p>스트링 리터럴을 변수에 대입할 수 있지만, 메모리 읽기 전용 영역에 있게 되거나 동일한 리터럴을 여러 곳에 공유할 수 있기 때문에 변수에 저장하면 위험하다. 따라서 C++ 표준에서는 스트링 리터럴을 <code class=\"language-plaintext highlighter-rouge\">const char이 n개인 배열</code> 타입으로 정의한다. 하지만 <code class=\"language-plaintext highlighter-rouge\">const</code>가 없던 시절에 작성된 레거시 코드의 하위 호환성을 보장하도록 <code class=\"language-plaintext highlighter-rouge\">const char*</code>이 아닌 타입으로 저장하는 컴파일러도 있기 때문에 컴파일러에 따라 동작이 다를 수 있다.</p>\n\n<p>따라서 다음과 같이 코드를 작성하게 되면 결과를 예측할 수 없다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"s\">\"hello\"</span><span class=\"p\">;</span>\n<span class=\"n\">ptr</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sc\">'a'</span><span class=\"p\">;</span>\n</code></pre>  </div></div>\n\n<p>따라서 스트링 리터럴을 참조할 때는 <code class=\"language-plaintext highlighter-rouge\">const</code> 문자에 대한 포인터를 사용하는 것이 훨씬 안전하다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"s\">\"hello\"</span><span class=\"p\">;</span>\n<span class=\"n\">ptr</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sc\">'a'</span>                <span class=\"c1\">// 에러 발생</span>\n</code></pre>  </div></div>\n\n<p>문자 배열(<code class=\"language-plaintext highlighter-rouge\">char[]</code>)에 초깃값을 설정할 때도 스트링 리터럴을 사용하는데, 이 때 컴파일러는 주어진 스트링을 충분히 담을 정도로 큰 배열을 생성하여 스트링 값을 복사하며, 이 값은 읽기 전용 메모리에 넣지 않으며 재사용하지 않는다. 따라서 다음과 같이 스트링을 수정할 수 있게 된다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">char</span> <span class=\"n\">arr</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"s\">\"hello\"</span><span class=\"p\">;</span>\n<span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sc\">'a'</span><span class=\"p\">;</span>               <span class=\"c1\">// 스트링 수정 가능</span>\n</code></pre>  </div></div>\n\n<h2 id=\"raw-string-literal\">Raw String Literal</h2>\n<p>로 스트링 리터럴이란 여러 줄에 걸쳐 작성한 스트링 리터럴로서, 스트링 안에 인용 부호를 이스케이프 시퀀스로 표현할 필요가 없으며, 오히려 이스케이프 시퀀스는 일반 텍스트로 취급하는 스트링 리터럴이다. 로 스트링 리터럴은 <code class=\"language-plaintext highlighter-rouge\">R\"(</code>로 시작해서 <code class=\"language-plaintext highlighter-rouge\">)\"</code>로 끝난다.</p>\n\n<p>먼저 다음은 이스케이프 시퀀스로 표현된 스트링 리터럴이다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"s\">\"Hello </span><span class=\"se\">\\\"</span><span class=\"s\">World</span><span class=\"se\">\\\"</span><span class=\"s\">!\"</span><span class=\"p\">;</span>\n\n<span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"s\">\"Line 1</span><span class=\"se\">\\n</span><span class=\"s\">Line 2\"</span><span class=\"p\">;</span>\n</code></pre>  </div></div>\n\n<p>이를 로 스트링 리터럴을 사용하여 표현하면 다음과 같다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"s\">R\"(Hello \"World\"!)\"</span><span class=\"p\">;</span>\n\n<span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"s\">R\"(Line 1\nLine 2)\"</span><span class=\"p\">;</span>\n</code></pre>  </div></div>\n\n<p>로 스트링 리터럴에 이스케이프 시퀀스가 나오면 다음과 같은 결과가 나온다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"s\">R\"(Is the following a tab character? \\t)\"</span><span class=\"p\">;</span>\n</code></pre>  </div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Is the following a tab character? <span class=\"se\">\\t</span>\n</code></pre>  </div></div>\n\n<p>만약 로 스트링 리터럴 중간에 <code class=\"language-plaintext highlighter-rouge\">)\"</code>가 나오면 에러가 발생하게 된다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"s\">R\"(Embedded )\"</span> <span class=\"n\">characters</span><span class=\"p\">)</span><span class=\"s\">\"; // 에러 발생</span><span class=\"err\">\n</span></code></pre>  </div></div>\n\n<p>이러한 경우에는 확장 로 스트링 리터럴 구문으로 표현해야 한다. 확장 로 스트링 리터럴은 다음과 같다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"s\">R\"d-char-sequence(r-char-sequence)d-char-sequence\"</span>\n</code></pre>  </div></div>\n\n<p>여기서 <code class=\"language-plaintext highlighter-rouge\">r-char-sequence</code>에 해당하는 부분이 실제 로 스트링이며, <code class=\"language-plaintext highlighter-rouge\">d-char-sequence</code> 부분이 구분자 시퀀스로 반드시 로 스트링 리터럴의 시작과 끝에 똑같이 나와야 한다. 위의 예제를 확장 로 스트링 리터럴 구문으로 다시 표현하면 다음과 같다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"s\">R\"-(Embedded )\" characters)-\"</span><span class=\"p\">;</span>\n</code></pre>  </div></div>\n\n<p>로 스트링 리터럴은 데이터베이스 쿼리 스트링이나, 정규 표현식, 파일 경로 등을 표현하는데 사용된다.</p>\n","dir":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/","name":"0002StringLiteral.md","path":"0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/0002StringLiteral.md","url":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/0002StringLiteral.html"},{"sort":2,"permalink":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/","layout":"default","title":"Chapter 2. Working with Strings and String Views","content":"<h1 id=\"chapter-2-working-with-strings-and-string-views\">Chapter 2. Working with Strings and String Views</h1>\n\n<ul>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/0001C_string.html\">C style String</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/0002StringLiteral.html\">String Literal</a></li>\n</ul>\n","dir":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/","name":"README.md","path":"0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/README.md","url":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/"},{"sort":2,"permalink":"/0003Software/0001Languages/0002Python/","layout":"default","title":"Python","content":"<h1 id=\"python\">Python</h1>\n\n","dir":"/0003Software/0001Languages/0002Python/","name":"README.md","path":"0003Software/0001Languages/0002Python/README.md","url":"/0003Software/0001Languages/0002Python/"},{"sort":2,"permalink":"/0003Software/0002Computer/0002DataStructure/","layout":"default","title":"Data Structure","content":"<h1 id=\"data-structure\">Data Structure</h1>\n\n","dir":"/0003Software/0002Computer/0002DataStructure/","name":"README.md","path":"0003Software/0002Computer/0002DataStructure/README.md","url":"/0003Software/0002Computer/0002DataStructure/"},{"sort":2,"layout":"default","title":"Network","content":"<h1 id=\"network\">Network</h1>\n","dir":"/0003Software/0002Computer/0004Knowledges/","name":"0002Network.md","path":"0003Software/0002Computer/0004Knowledges/0002Network.md","url":"/0003Software/0002Computer/0004Knowledges/0002Network.html"},{"sort":2,"permalink":"/0003Software/0002Computer/","layout":"default","title":"Computer","content":"<h1 id=\"computer\">Computer</h1>\n\n<ul>\n <li><a href=\"/0003Software/0002Computer/0001Algorithm/\">Algorithm</a></li>\n <li><a href=\"/0003Software/0002Computer/0002DataStructure/\">Data Structure</a></li>\n <li><a href=\"/0003Software/0002Computer/0003AI/\">AI</a></li>\n <li><a href=\"/0003Software/0002Computer/0004Knowledges/\">Knowledges</a>\n <ul>\n <li><a href=\"/0003Software/0002Computer/0004Knowledges/0001OS.html\">OS</a></li>\n <li><a href=\"/0003Software/0002Computer/0004Knowledges/0002Network.html\">Network</a></li>\n <li><a href=\"/0003Software/0002Computer/0004Knowledges/0003Library.html\">Library</a></li>\n </ul>\n </li>\n</ul>\n","dir":"/0003Software/0002Computer/","name":"README.md","path":"0003Software/0002Computer/README.md","url":"/0003Software/0002Computer/"},{"sort":2,"layout":"default","title":"Git","content":"<h1 id=\"git\">Git</h1>\n\n<p>git 기초 개념</p>\n","dir":"/0004Tools/0001DevelopmentTool/0001Git/","name":"0002Git.md","path":"0004Tools/0001DevelopmentTool/0001Git/0002Git.md","url":"/0004Tools/0001DevelopmentTool/0001Git/0002Git.html"},{"sort":2,"layout":"default","title":"ShellScript &amp; bashrc","content":"<h1 id=\"shellscript--bashrc\">ShellScript &amp; bashrc</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- <a href=\"https://wiki.kldp.org/wiki.php/ShellProgrammingTutorial\">Shell Programming Tutorial</a></em></p>\n\n<p><em>- <a href=\"https://ko.wikipedia.org/wiki/%EC%85%B8_%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8\">Shell Scrpti Wiki Pages</a></em></p>\n\n<p><em>- <a href=\"https://dohk.tistory.com/191\">[dohk::인공지능과 생명정보학] 쉘의 개념, bashrc의 개념</a></em></p>\n\n<h2 id=\"1-shell-script\">1. Shell Script</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">shell</code>이란 운영체제에서 <strong>사용자가 입력하는 명령을 읽고 해석하여 대신 실행해주는 프로그램</strong>을 말한다. 운영체제 상에서 다양한 운영체제 기능과 서비스를 구현하는 인터페이스를 제공하며, 사용자와 운영체제의 내부(커널) 사이의 인터페이스를 감싸는 층이기 때문에 셸이라는 이름이 붙었다.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">shell script</code>는 셸이나 명령 줄 인터프리터에서 돌아가도록 작성되었거나 한 운영 체제를 위해 쓰인 스크립트로, 단순한 도메인 고유 언어로 여기기도 한다. 셸 스크립트가 수행하는 일반 기능으로는 파일 이용, 프로그램 실행, 문자열 출력 등이 있음. <code class=\"language-plaintext highlighter-rouge\">.sh</code>라는 파일 확장자를 가진 파일이 특정 종류의 셸 스크립트를 가리키는 것이 보통이지만, 대부분의 셸 스크립트는 파일 확장자를 지니지 않는다.</p>\n\n<h2 id=\"2-문법\">2. 문법</h2>\n\n<p>해당 절에서는 <a href=\"https://wiki.kldp.org/wiki.php/ShellProgrammingTutorial\">Shell Programming Tutorial</a>의 문법을 참조할 것.</p>\n\n<h2 id=\"3-bachrc\">3. bachrc</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">bash</code>는 Bourne Again Shell의 축약어로, 리눅스에서 가장 널리 쓰이는 쉘이다. bash는 다음의 다섯 개의 공통된 설정 파일을 갖는다.</p>\n\n<ul>\n <li>/etc/profile</li>\n <li>/etc/bashrc</li>\n <li>~/.bash_profile</li>\n <li>~/.bashrc</li>\n <li>~/.bash_logout</li>\n</ul>\n\n<p>/etc 디렉토리에 위치한 설정 파일은 전역적인 파일이다. 지역적인 파일은 개별 설정을 위한 파일로 그 파일을 사용하는 특정 사용자에게만 영향을 끼친다.</p>\n\n<h3 id=\"31-etcprfile\">3.1 /etc/prfile</h3>\n<p>환경 변수와 bash가 수행될 때 실행되는 프로그램을 제어하는 전역적인 시스템 설정과 관련된 파일, 로그인 시 수행되는 전체 시스템 환경 설정 파일</p>\n\n<h3 id=\"32-etcbashrc\">3.2 /etc/bashrc</h3>\n<p>별칭(alias)과 bash가 수행될 때 실행되는 함수를 제어하는 전역적인 시스템 설정과 관련된 파일, 때때로 /etc/bashrc는 생략되기도 하며 그 내용은 /etc/profile에 함께 포함되기도 함</p>\n\n<h3 id=\"33-bash_profile\">3.3 ~/.bash_profile</h3>\n<p>환경 변수와 bash가 수행될 때 실행되는 프로그램을 제어하는 지역적인 시스템 설정과 관련된 파일, 이 파일은 전역적인 설정 파일인 /etc/profile이 수행된 다음 바로 수행</p>\n\n<h3 id=\"34-bashrc\">3.4 ~/.bashrc</h3>\n<p>별칭(alias)과 bash가 수행될 때 실행되는 함수를 제어하는 지역적인 시스템 설정과 관련된 파일</p>\n\n<h3 id=\"35-bash_logout\">3.5 ~/.bash_logout</h3>\n<p>사용자가 로그 아웃하기 바로 직전에 실행하는 프로그램에 관한 bash의 지역적인 시스템 설정과 관련된 파일</p>\n","dir":"/0004Tools/0001DevelopmentTool/0002Linux/","name":"0002ShellScript.md","path":"0004Tools/0001DevelopmentTool/0002Linux/0002ShellScript.md","url":"/0004Tools/0001DevelopmentTool/0002Linux/0002ShellScript.html"},{"sort":2,"permalink":"/0004Tools/0001DevelopmentTool/0002Linux/","layout":"default","title":"Linux","content":"<h1 id=\"linux\">Linux</h1>\n\n<ul>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0001Command.html\">Command</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0002ShellScript.html\">ShellScript &amp; bashrc</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0003BootingScript.html\">BootingScript</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0004vim.html\">vi deitor</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0005SymbolicLink.html\">Symbolic Link</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0006EnvironmentVariable.html\">Environment Variable</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0007SSH.html\">SSH</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0008SCP.html\">SCP</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0009Process.html\">Process</a></li>\n</ul>\n","dir":"/0004Tools/0001DevelopmentTool/0002Linux/","name":"README.md","path":"0004Tools/0001DevelopmentTool/0002Linux/README.md","url":"/0004Tools/0001DevelopmentTool/0002Linux/"},{"sort":2,"layout":"default","title":"Extensions","content":"<h1 id=\"extensions\">Extensions</h1>\n","dir":"/0004Tools/0001DevelopmentTool/0003VSCode/","name":"0002Extension.md","path":"0004Tools/0001DevelopmentTool/0003VSCode/0002Extension.md","url":"/0004Tools/0001DevelopmentTool/0003VSCode/0002Extension.html"},{"sort":2,"layout":"default","title":"Tutorials","content":"<h1 id=\"tutorials\">Tutorials</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- <a href=\"https://github.com/eclipse-cyclonedds/cyclonedds/tree/master/examples/helloworld\">CycloneDDS Githug HelloWorld pages</a></em></p>\n\n<h2 id=\"1-tutorials\">1. Tutorials</h2>\n\n<p>cyclonedds 설치 시 기본으로 제공되는 example인 HelloWorld에 대한 내용이다. helloworld 예제를 보면 다음과 같이 구성되어 있다.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>helloworld\n├── CMakeLists.txt\n├── HelloWorldData.idl\n├── publisher.c\n└── subscriber.c\n</code></pre>  </div></div>\n\n<h2 id=\"2-cmakeliststxt\">2. CMakeLists.txt</h2>\n<p>먼저 <code class=\"language-plaintext highlighter-rouge\">CMakeLists.txt</code> 의 내용이다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#</span>\n<span class=\"c1\"># Copyright(c) 2021 ADLINK Technology Limited and others</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># This program and the accompanying materials are made available under the</span>\n<span class=\"c1\"># terms of the Eclipse Public License v. 2.0 which is available at</span>\n<span class=\"c1\"># http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License</span>\n<span class=\"c1\"># v. 1.0 which is available at</span>\n<span class=\"c1\"># http://www.eclipse.org/org/documents/edl-v10.php.</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause</span>\n<span class=\"c1\">#</span>\n<span class=\"nb\">project</span><span class=\"p\">(</span>helloword LANGUAGES C<span class=\"p\">)</span>\n<span class=\"nb\">cmake_minimum_required</span><span class=\"p\">(</span>VERSION 3.10<span class=\"p\">)</span>\n\n<span class=\"nb\">if</span><span class=\"p\">(</span>NOT TARGET CycloneDDS::ddsc<span class=\"p\">)</span>\n  <span class=\"c1\"># Find the CycloneDDS package.</span>\n  <span class=\"nb\">find_package</span><span class=\"p\">(</span>CycloneDDS REQUIRED<span class=\"p\">)</span>\n<span class=\"nb\">endif</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># This is a convenience function, provided by the CycloneDDS package,</span>\n<span class=\"c1\"># that will supply a library target related the the given idl file.</span>\n<span class=\"c1\"># In short, it takes the idl file, generates the source files with</span>\n<span class=\"c1\"># the proper data types and compiles them into a library.</span>\n<span class=\"nf\">idlc_generate</span><span class=\"p\">(</span>TARGET HelloWorldData_lib FILES <span class=\"s2\">\"HelloWorldData.idl\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Both executables have only one related source file.</span>\n<span class=\"nb\">add_executable</span><span class=\"p\">(</span>HelloworldPublisher publisher.c<span class=\"p\">)</span>\n<span class=\"nb\">add_executable</span><span class=\"p\">(</span>HelloworldSubscriber subscriber.c<span class=\"p\">)</span>\n\n<span class=\"c1\"># Both executables need to be linked to the idl data type library and</span>\n<span class=\"c1\"># the ddsc API library.</span>\n<span class=\"nb\">target_link_libraries</span><span class=\"p\">(</span>HelloworldPublisher HelloWorldData_lib CycloneDDS::ddsc<span class=\"p\">)</span>\n<span class=\"nb\">target_link_libraries</span><span class=\"p\">(</span>HelloworldSubscriber HelloWorldData_lib CycloneDDS::ddsc<span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<p>여기서 <code class=\"language-plaintext highlighter-rouge\">idlc_generate</code>는 <code class=\"language-plaintext highlighter-rouge\">HelloWorldData.idl</code>라는 idl 형태의 파일을 이용하여 <code class=\"language-plaintext highlighter-rouge\">HelloWorldData.c</code> 와 <code class=\"language-plaintext highlighter-rouge\">HelloWorldData.h</code>를 만들어내는 컴파일러이다.</p>\n\n<p>다음으로 <code class=\"language-plaintext highlighter-rouge\">add_executable</code>과 <code class=\"language-plaintext highlighter-rouge\">target_link_libraries</code>는 <code class=\"language-plaintext highlighter-rouge\">publisher.c</code>와 <code class=\"language-plaintext highlighter-rouge\">subscriber.c</code>파일을 이용하여 실행 가능한 라이브러리를 만들기 위해 선언되었다.</p>\n\n<h2 id=\"3-helloworlddataidl\">3. HelloWorldData.idl</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">.idl</code> 파일은 CycloneDDS의 메세지 형태를 정의한 파일이다. 다음은 HelloWorldData.idl에 정의된 Msg 파일이다.</p>\n\n<pre><code class=\"language-idl\">module HelloWorldData\n{\n  struct Msg\n  {\n    long userID;\n    string message;\n  };\n  #pragma keylist Msg userID\n};\n</code></pre>  \n\n<h3 id=\"31-helloworlddatah\">3.1 HelloWorldData.h</h3>\n\n<p>다음은 HelloWorldData.idl을 컴파일하여 생성된 헤더파일이다. 해당 헤더파일은 위에서 정의된 Msg 구조체를 dds에서 사용되는 HelloWorldData_Msg 형태로 변환된 것이다. <code class=\"language-plaintext highlighter-rouge\">HelloWorldData_Msg__alloc()</code>은 HelloWorldData_Msg을 힙 영역에 할당하기 위해 사용되며, <code class=\"language-plaintext highlighter-rouge\">HelloWorldData_Msg_free(d,o)</code>는 힙에 할당된 데이터를 해제할 때 사용된다.</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/****************************************************************\n\n  Generated by Eclipse Cyclone DDS IDL to C Translator\n  File name: HelloWorldData.h\n  Source: HelloWorldData.idl\n  Cyclone DDS: V0.9.0\n\n*****************************************************************/</span>\n<span class=\"cp\">#ifndef DDSC_HELLOWORLDDATA_H\n#define DDSC_HELLOWORLDDATA_H\n</span>\n<span class=\"cp\">#include \"dds/ddsc/dds_public_impl.h\"\n</span>\n<span class=\"cp\">#ifdef __cplusplus\n</span><span class=\"k\">extern</span> <span class=\"s\">\"C\"</span> <span class=\"p\">{</span>\n<span class=\"cp\">#endif\n</span>\n<span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"n\">HelloWorldData_Msg</span>\n<span class=\"p\">{</span>\n  <span class=\"kt\">int32_t</span> <span class=\"n\">userID</span><span class=\"p\">;</span>\n  <span class=\"kt\">char</span> <span class=\"o\">*</span> <span class=\"n\">message</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">HelloWorldData_Msg</span><span class=\"p\">;</span>\n\n<span class=\"k\">extern</span> <span class=\"k\">const</span> <span class=\"n\">dds_topic_descriptor_t</span> <span class=\"n\">HelloWorldData_Msg_desc</span><span class=\"p\">;</span>\n\n<span class=\"cp\">#define HelloWorldData_Msg__alloc() \\\n((HelloWorldData_Msg*) dds_alloc (sizeof (HelloWorldData_Msg)));\n</span>\n<span class=\"cp\">#define HelloWorldData_Msg_free(d,o) \\\ndds_sample_free ((d), &amp;HelloWorldData_Msg_desc, (o))\n</span>\n<span class=\"cp\">#ifdef __cplusplus\n</span><span class=\"p\">}</span>\n<span class=\"cp\">#endif\n</span>\n<span class=\"cp\">#endif </span><span class=\"cm\">/* DDSC_HELLOWORLDDATA_H */</span><span class=\"cp\">\n</span></code></pre>  </div></div>\n\n<h3 id=\"32-helloworlddatac\">3.2 HelloWorldData.c</h3>\n\n<p>다음은 HelloWorldData.idl을 컴파일하여 생성된 소스파일이다. 해당 소스코드는 해당 메세지를 이용해 DDS 통신하는데 필요한 객체들을 선언한 파일이다.</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/****************************************************************\n\n  Generated by Eclipse Cyclone DDS IDL to C Translator\n  File name: HelloWorldData.c\n  Source: HelloWorldData.idl\n  Cyclone DDS: V0.9.0\n\n*****************************************************************/</span>\n<span class=\"cp\">#include \"HelloWorldData.h\"\n</span>\n<span class=\"k\">static</span> <span class=\"k\">const</span> <span class=\"kt\">uint32_t</span> <span class=\"n\">HelloWorldData_Msg_ops</span> <span class=\"p\">[]</span> <span class=\"o\">=</span>\n<span class=\"p\">{</span>\n  <span class=\"cm\">/* Msg */</span>\n  <span class=\"n\">DDS_OP_ADR</span> <span class=\"o\">|</span> <span class=\"n\">DDS_OP_TYPE_4BY</span> <span class=\"o\">|</span> <span class=\"n\">DDS_OP_FLAG_SGN</span> <span class=\"o\">|</span> <span class=\"n\">DDS_OP_FLAG_KEY</span><span class=\"p\">,</span> <span class=\"n\">offsetof</span> <span class=\"p\">(</span><span class=\"n\">HelloWorldData_Msg</span><span class=\"p\">,</span> <span class=\"n\">userID</span><span class=\"p\">),</span>\n  <span class=\"n\">DDS_OP_ADR</span> <span class=\"o\">|</span> <span class=\"n\">DDS_OP_TYPE_STR</span><span class=\"p\">,</span> <span class=\"n\">offsetof</span> <span class=\"p\">(</span><span class=\"n\">HelloWorldData_Msg</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">),</span>\n  <span class=\"n\">DDS_OP_RTS</span><span class=\"p\">,</span>\n  \n  <span class=\"cm\">/* key: userID */</span>\n  <span class=\"n\">DDS_OP_KOF</span> <span class=\"o\">|</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0u</span> <span class=\"cm\">/* order: 0 */</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">static</span> <span class=\"k\">const</span> <span class=\"n\">dds_key_descriptor_t</span> <span class=\"n\">HelloWorldData_Msg_keys</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span>\n<span class=\"p\">{</span>\n  <span class=\"p\">{</span> <span class=\"s\">\"userID\"</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">const</span> <span class=\"n\">dds_topic_descriptor_t</span> <span class=\"n\">HelloWorldData_Msg_desc</span> <span class=\"o\">=</span>\n<span class=\"p\">{</span>\n  <span class=\"p\">.</span><span class=\"n\">m_size</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span> <span class=\"p\">(</span><span class=\"n\">HelloWorldData_Msg</span><span class=\"p\">),</span>\n  <span class=\"p\">.</span><span class=\"n\">m_align</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span> <span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">),</span>\n  <span class=\"p\">.</span><span class=\"n\">m_flagset</span> <span class=\"o\">=</span> <span class=\"n\">DDS_TOPIC_NO_OPTIMIZE</span> <span class=\"o\">|</span> <span class=\"n\">DDS_TOPIC_FIXED_KEY</span> <span class=\"o\">|</span> <span class=\"n\">DDS_TOPIC_FIXED_KEY_XCDR2</span><span class=\"p\">,</span>\n  <span class=\"p\">.</span><span class=\"n\">m_nkeys</span> <span class=\"o\">=</span> <span class=\"mi\">1u</span><span class=\"p\">,</span>\n  <span class=\"p\">.</span><span class=\"n\">m_typename</span> <span class=\"o\">=</span> <span class=\"s\">\"HelloWorldData::Msg\"</span><span class=\"p\">,</span>\n  <span class=\"p\">.</span><span class=\"n\">m_keys</span> <span class=\"o\">=</span> <span class=\"n\">HelloWorldData_Msg_keys</span><span class=\"p\">,</span>\n  <span class=\"p\">.</span><span class=\"n\">m_nops</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n  <span class=\"p\">.</span><span class=\"n\">m_ops</span> <span class=\"o\">=</span> <span class=\"n\">HelloWorldData_Msg_ops</span><span class=\"p\">,</span>\n  <span class=\"p\">.</span><span class=\"n\">m_meta</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n<span class=\"p\">};</span>\n</code></pre>  </div></div>\n\n<h2 id=\"4-publisherc\">4. publisher.c</h2>\n\n<p>다음은 위에서 선언된 HelloWorldData의 Msg를 이용하여 메세지를 publish하는 소스코드이다.</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include \"dds/dds.h\"\n#include \"HelloWorldData.h\"\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span> <span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">dds_entity_t</span> <span class=\"n\">participant</span><span class=\"p\">;</span>\n  <span class=\"n\">dds_entity_t</span> <span class=\"n\">topic</span><span class=\"p\">;</span>\n  <span class=\"n\">dds_entity_t</span> <span class=\"n\">writer</span><span class=\"p\">;</span>\n  <span class=\"n\">dds_return_t</span> <span class=\"n\">rc</span><span class=\"p\">;</span>\n  <span class=\"n\">HelloWorldData_Msg</span> <span class=\"n\">msg</span><span class=\"p\">;</span>\n  <span class=\"kt\">uint32_t</span> <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"n\">argc</span><span class=\"p\">;</span>\n  <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"n\">argv</span><span class=\"p\">;</span>\n\n  <span class=\"cm\">/* Create a Participant. */</span>\n  <span class=\"n\">participant</span> <span class=\"o\">=</span> <span class=\"n\">dds_create_participant</span> <span class=\"p\">(</span><span class=\"n\">DDS_DOMAIN_DEFAULT</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">participant</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">DDS_FATAL</span><span class=\"p\">(</span><span class=\"s\">\"dds_create_participant: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">dds_strretcode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">participant</span><span class=\"p\">));</span>\n\n  <span class=\"cm\">/* Create a Topic. */</span>\n  <span class=\"n\">topic</span> <span class=\"o\">=</span> <span class=\"n\">dds_create_topic</span> <span class=\"p\">(</span>\n    <span class=\"n\">participant</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">HelloWorldData_Msg_desc</span><span class=\"p\">,</span> <span class=\"s\">\"HelloWorldData_Msg\"</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">topic</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">DDS_FATAL</span><span class=\"p\">(</span><span class=\"s\">\"dds_create_topic: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">dds_strretcode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">topic</span><span class=\"p\">));</span>\n\n  <span class=\"cm\">/* Create a Writer. */</span>\n  <span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"n\">dds_create_writer</span> <span class=\"p\">(</span><span class=\"n\">participant</span><span class=\"p\">,</span> <span class=\"n\">topic</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">writer</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">DDS_FATAL</span><span class=\"p\">(</span><span class=\"s\">\"dds_create_writer: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">dds_strretcode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">writer</span><span class=\"p\">));</span>\n\n  <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"=== [Publisher]  Waiting for a reader to be discovered ...</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n  <span class=\"n\">fflush</span> <span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">);</span>\n\n  <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">dds_set_status_mask</span><span class=\"p\">(</span><span class=\"n\">writer</span><span class=\"p\">,</span> <span class=\"n\">DDS_PUBLICATION_MATCHED_STATUS</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rc</span> <span class=\"o\">!=</span> <span class=\"n\">DDS_RETCODE_OK</span><span class=\"p\">)</span>\n    <span class=\"n\">DDS_FATAL</span><span class=\"p\">(</span><span class=\"s\">\"dds_set_status_mask: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">dds_strretcode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">rc</span><span class=\"p\">));</span>\n\n  <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">status</span> <span class=\"o\">&amp;</span> <span class=\"n\">DDS_PUBLICATION_MATCHED_STATUS</span><span class=\"p\">))</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">dds_get_status_changes</span> <span class=\"p\">(</span><span class=\"n\">writer</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">status</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rc</span> <span class=\"o\">!=</span> <span class=\"n\">DDS_RETCODE_OK</span><span class=\"p\">)</span>\n      <span class=\"n\">DDS_FATAL</span><span class=\"p\">(</span><span class=\"s\">\"dds_get_status_changes: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">dds_strretcode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">rc</span><span class=\"p\">));</span>\n\n    <span class=\"cm\">/* Polling sleep. */</span>\n    <span class=\"n\">dds_sleepfor</span> <span class=\"p\">(</span><span class=\"n\">DDS_MSECS</span> <span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"cm\">/* Create a message to write. */</span>\n  <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">userID</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s\">\"Hello World\"</span><span class=\"p\">;</span>\n\n  <span class=\"n\">printf</span> <span class=\"p\">(</span><span class=\"s\">\"=== [Publisher]  Writing : \"</span><span class=\"p\">);</span>\n  <span class=\"n\">printf</span> <span class=\"p\">(</span><span class=\"s\">\"Message (%\"</span><span class=\"n\">PRId32</span><span class=\"s\">\", %s)</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">userID</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">message</span><span class=\"p\">);</span>\n  <span class=\"n\">fflush</span> <span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">);</span>\n\n  <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">dds_write</span> <span class=\"p\">(</span><span class=\"n\">writer</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">msg</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rc</span> <span class=\"o\">!=</span> <span class=\"n\">DDS_RETCODE_OK</span><span class=\"p\">)</span>\n    <span class=\"n\">DDS_FATAL</span><span class=\"p\">(</span><span class=\"s\">\"dds_write: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">dds_strretcode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">rc</span><span class=\"p\">));</span>\n\n  <span class=\"cm\">/* Deleting the participant will delete all its children recursively as well. */</span>\n  <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">dds_delete</span> <span class=\"p\">(</span><span class=\"n\">participant</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rc</span> <span class=\"o\">!=</span> <span class=\"n\">DDS_RETCODE_OK</span><span class=\"p\">)</span>\n    <span class=\"n\">DDS_FATAL</span><span class=\"p\">(</span><span class=\"s\">\"dds_delete: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">dds_strretcode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">rc</span><span class=\"p\">));</span>\n\n  <span class=\"k\">return</span> <span class=\"n\">EXIT_SUCCESS</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>먼저 dds 함수를 사용하기 위해 <code class=\"language-plaintext highlighter-rouge\">dds/dds.h</code>를 가져오고, HelloWorldData.idl을 이용하여 만든 <code class=\"language-plaintext highlighter-rouge\">HelloWorldData.h</code>를 가져온다.</li>\n</ul>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include \"dds/dds.h\"\n#include \"HelloWorldData.h\"\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n</span></code></pre>  </div></div>\n\n<ul>\n <li>다음으로, dds를 이용하여 publish 하기 위해 필요한 객체들을 생성한다. <code class=\"language-plaintext highlighter-rouge\">participant</code>는 dds 통신을 위해 선언되는 객체이며, <code class=\"language-plaintext highlighter-rouge\">topic</code>은 dds 메세지 형태를 구현하고, <code class=\"language-plaintext highlighter-rouge\">write</code>는 dds를 이용하여 메세지를 전송하는 역할을 한다. <code class=\"language-plaintext highlighter-rouge\">dds_return_t</code>로 선언된 <code class=\"language-plaintext highlighter-rouge\">rc</code>는 dds 함수의 리턴값을 받기 위해 사용된다.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">HelloWorldData_Msg</code>로 선언된 <code class=\"language-plaintext highlighter-rouge\">msg</code>는 위에서 선안한 메세지 형태로 데이터를 저장할 수 있는 구조로, msg에 저장되어있는 데이터 형태데로 dds 메세지 통신을 할 수 있다.</li>\n</ul>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"n\">dds_entity_t</span> <span class=\"n\">participant</span><span class=\"p\">;</span>\n  <span class=\"n\">dds_entity_t</span> <span class=\"n\">topic</span><span class=\"p\">;</span>\n  <span class=\"n\">dds_entity_t</span> <span class=\"n\">writer</span><span class=\"p\">;</span>\n  <span class=\"n\">dds_return_t</span> <span class=\"n\">rc</span><span class=\"p\">;</span>\n  <span class=\"n\">HelloWorldData_Msg</span> <span class=\"n\">msg</span><span class=\"p\">;</span>\n  <span class=\"kt\">uint32_t</span> <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"n\">argc</span><span class=\"p\">;</span>\n  <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"n\">argv</span><span class=\"p\">;</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>다음은 <code class=\"language-plaintext highlighter-rouge\">participant</code>를 <code class=\"language-plaintext highlighter-rouge\">dds_create_particiapnt()</code> 함수로 생성하는 코드이다.</li>\n</ul>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"cm\">/* Create a Participant. */</span>\n  <span class=\"n\">participant</span> <span class=\"o\">=</span> <span class=\"n\">dds_create_participant</span> <span class=\"p\">(</span><span class=\"n\">DDS_DOMAIN_DEFAULT</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">participant</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">DDS_FATAL</span><span class=\"p\">(</span><span class=\"s\">\"dds_create_participant: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">dds_strretcode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">participant</span><span class=\"p\">));</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>다음은 <code class=\"language-plaintext highlighter-rouge\">topic</code>을 <code class=\"language-plaintext highlighter-rouge\">dds_create_topic()</code> 함수로 생성하는 코드이다. 해당 함수는 앞에서 선언한 <code class=\"language-plaintext highlighter-rouge\">participant</code>를 인자로 가져오며, <code class=\"language-plaintext highlighter-rouge\">HelloWorldData.c</code>에 생성된 <code class=\"language-plaintext highlighter-rouge\">HelloWorldData_Msg_desc</code>를 인자로 입력한다. 그리고 <code class=\"language-plaintext highlighter-rouge\">topic</code>의 이름인 <code class=\"language-plaintext highlighter-rouge\">\"HelloWorldData_Msg\"</code>를 입력한다.</li>\n</ul>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"cm\">/* Create a Topic. */</span>\n  <span class=\"n\">topic</span> <span class=\"o\">=</span> <span class=\"n\">dds_create_topic</span> <span class=\"p\">(</span>\n    <span class=\"n\">participant</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">HelloWorldData_Msg_desc</span><span class=\"p\">,</span> <span class=\"s\">\"HelloWorldData_Msg\"</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">topic</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">DDS_FATAL</span><span class=\"p\">(</span><span class=\"s\">\"dds_create_topic: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">dds_strretcode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">topic</span><span class=\"p\">));</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>다음은 <code class=\"language-plaintext highlighter-rouge\">write</code>를 <code class=\"language-plaintext highlighter-rouge\">dds_create_writer()</code> 함수로 생성하는 코드이다. 해당 함수는 앞에서 생성한 <code class=\"language-plaintext highlighter-rouge\">participant</code>와 <code class=\"language-plaintext highlighter-rouge\">topic</code>을 인자로 가져온다.</li>\n</ul>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"cm\">/* Create a Writer. */</span>\n  <span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"n\">dds_create_writer</span> <span class=\"p\">(</span><span class=\"n\">participant</span><span class=\"p\">,</span> <span class=\"n\">topic</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">writer</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">DDS_FATAL</span><span class=\"p\">(</span><span class=\"s\">\"dds_create_writer: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">dds_strretcode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">writer</span><span class=\"p\">));</span>\n\n  <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"=== [Publisher]  Waiting for a reader to be discovered ...</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n  <span class=\"n\">fflush</span> <span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">);</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>다음 부분은 dds를 설정하고, 특정 상태가 되도록 대기하는 코드인 것 같다.</li>\n</ul>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"=== [Publisher]  Waiting for a reader to be discovered ...</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n  <span class=\"n\">fflush</span> <span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">);</span>\n\n  <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">dds_set_status_mask</span><span class=\"p\">(</span><span class=\"n\">writer</span><span class=\"p\">,</span> <span class=\"n\">DDS_PUBLICATION_MATCHED_STATUS</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rc</span> <span class=\"o\">!=</span> <span class=\"n\">DDS_RETCODE_OK</span><span class=\"p\">)</span>\n    <span class=\"n\">DDS_FATAL</span><span class=\"p\">(</span><span class=\"s\">\"dds_set_status_mask: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">dds_strretcode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">rc</span><span class=\"p\">));</span>\n\n  <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">status</span> <span class=\"o\">&amp;</span> <span class=\"n\">DDS_PUBLICATION_MATCHED_STATUS</span><span class=\"p\">))</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">dds_get_status_changes</span> <span class=\"p\">(</span><span class=\"n\">writer</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">status</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rc</span> <span class=\"o\">!=</span> <span class=\"n\">DDS_RETCODE_OK</span><span class=\"p\">)</span>\n      <span class=\"n\">DDS_FATAL</span><span class=\"p\">(</span><span class=\"s\">\"dds_get_status_changes: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">dds_strretcode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">rc</span><span class=\"p\">));</span>\n\n    <span class=\"cm\">/* Polling sleep. */</span>\n    <span class=\"n\">dds_sleepfor</span> <span class=\"p\">(</span><span class=\"n\">DDS_MSECS</span> <span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>다음으로 <code class=\"language-plaintext highlighter-rouge\">msg</code>에 <code class=\"language-plaintext highlighter-rouge\">HelloWorldData_Msg</code> 데이터 구조대로 데이터를 저장한다.</li>\n</ul>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"cm\">/* Create a message to write. */</span>\n  <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">userID</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s\">\"Hello World\"</span><span class=\"p\">;</span>\n\n  <span class=\"n\">printf</span> <span class=\"p\">(</span><span class=\"s\">\"=== [Publisher]  Writing : \"</span><span class=\"p\">);</span>\n  <span class=\"n\">printf</span> <span class=\"p\">(</span><span class=\"s\">\"Message (%\"</span><span class=\"n\">PRId32</span><span class=\"s\">\", %s)</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">userID</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">message</span><span class=\"p\">);</span>\n  <span class=\"n\">fflush</span> <span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">);</span>\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">dds_write()</code>함수를 이용하여, 메세지를 송신하는 객체인 <code class=\"language-plaintext highlighter-rouge\">writer</code>를 통해 데이터를 저장한 msg를 dds로 뿌린다.</li>\n</ul>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">dds_write</span> <span class=\"p\">(</span><span class=\"n\">writer</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">msg</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rc</span> <span class=\"o\">!=</span> <span class=\"n\">DDS_RETCODE_OK</span><span class=\"p\">)</span>\n    <span class=\"n\">DDS_FATAL</span><span class=\"p\">(</span><span class=\"s\">\"dds_write: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">dds_strretcode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">rc</span><span class=\"p\">));</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>데이터를 전송을 완료하고, dds 전송이 끝났다면, <code class=\"language-plaintext highlighter-rouge\">dds_delete()</code>함수를 이용하여 <code class=\"language-plaintext highlighter-rouge\">participant</code> 객체를 제거하고, <code class=\"language-plaintext highlighter-rouge\">EXIT_SUCCESS</code>를 리턴함으로써 코드를 종료한다.</li>\n</ul>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"cm\">/* Deleting the participant will delete all its children recursively as well. */</span>\n  <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">dds_delete</span> <span class=\"p\">(</span><span class=\"n\">participant</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rc</span> <span class=\"o\">!=</span> <span class=\"n\">DDS_RETCODE_OK</span><span class=\"p\">)</span>\n    <span class=\"n\">DDS_FATAL</span><span class=\"p\">(</span><span class=\"s\">\"dds_delete: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">dds_strretcode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">rc</span><span class=\"p\">));</span>\n\n  <span class=\"k\">return</span> <span class=\"n\">EXIT_SUCCESS</span><span class=\"p\">;</span>\n<span class=\"err\">}</span>    \n</code></pre>  </div></div>\n\n<h2 id=\"5-subscriberc\">5. subscriber.c</h2>\n\n<p>다음은 <code class=\"language-plaintext highlighter-rouge\">subscriber.c</code> 소스코드이며, 해당 소스코드는 <code class=\"language-plaintext highlighter-rouge\">publisher.c</code>에서 보낸 메세지를 받는 역할을 한다.</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include \"dds/dds.h\"\n#include \"HelloWorldData.h\"\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\n</span>\n<span class=\"cm\">/* An array of one message (aka sample in dds terms) will be used. */</span>\n<span class=\"cp\">#define MAX_SAMPLES 1\n</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span> <span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">dds_entity_t</span> <span class=\"n\">participant</span><span class=\"p\">;</span>\n  <span class=\"n\">dds_entity_t</span> <span class=\"n\">topic</span><span class=\"p\">;</span>\n  <span class=\"n\">dds_entity_t</span> <span class=\"n\">reader</span><span class=\"p\">;</span>\n  <span class=\"n\">HelloWorldData_Msg</span> <span class=\"o\">*</span><span class=\"n\">msg</span><span class=\"p\">;</span>\n  <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">samples</span><span class=\"p\">[</span><span class=\"n\">MAX_SAMPLES</span><span class=\"p\">];</span>\n  <span class=\"n\">dds_sample_info_t</span> <span class=\"n\">infos</span><span class=\"p\">[</span><span class=\"n\">MAX_SAMPLES</span><span class=\"p\">];</span>\n  <span class=\"n\">dds_return_t</span> <span class=\"n\">rc</span><span class=\"p\">;</span>\n  <span class=\"n\">dds_qos_t</span> <span class=\"o\">*</span><span class=\"n\">qos</span><span class=\"p\">;</span>\n  <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"n\">argc</span><span class=\"p\">;</span>\n  <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"n\">argv</span><span class=\"p\">;</span>\n\n  <span class=\"cm\">/* Create a Participant. */</span>\n  <span class=\"n\">participant</span> <span class=\"o\">=</span> <span class=\"n\">dds_create_participant</span> <span class=\"p\">(</span><span class=\"n\">DDS_DOMAIN_DEFAULT</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">participant</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">DDS_FATAL</span><span class=\"p\">(</span><span class=\"s\">\"dds_create_participant: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">dds_strretcode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">participant</span><span class=\"p\">));</span>\n\n  <span class=\"cm\">/* Create a Topic. */</span>\n  <span class=\"n\">topic</span> <span class=\"o\">=</span> <span class=\"n\">dds_create_topic</span> <span class=\"p\">(</span>\n    <span class=\"n\">participant</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">HelloWorldData_Msg_desc</span><span class=\"p\">,</span> <span class=\"s\">\"HelloWorldData_Msg\"</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">topic</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">DDS_FATAL</span><span class=\"p\">(</span><span class=\"s\">\"dds_create_topic: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">dds_strretcode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">topic</span><span class=\"p\">));</span>\n\n  <span class=\"cm\">/* Create a reliable Reader. */</span>\n  <span class=\"n\">qos</span> <span class=\"o\">=</span> <span class=\"n\">dds_create_qos</span> <span class=\"p\">();</span>\n  <span class=\"n\">dds_qset_reliability</span> <span class=\"p\">(</span><span class=\"n\">qos</span><span class=\"p\">,</span> <span class=\"n\">DDS_RELIABILITY_RELIABLE</span><span class=\"p\">,</span> <span class=\"n\">DDS_SECS</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">));</span>\n  <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">dds_create_reader</span> <span class=\"p\">(</span><span class=\"n\">participant</span><span class=\"p\">,</span> <span class=\"n\">topic</span><span class=\"p\">,</span> <span class=\"n\">qos</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">reader</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">DDS_FATAL</span><span class=\"p\">(</span><span class=\"s\">\"dds_create_reader: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">dds_strretcode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">reader</span><span class=\"p\">));</span>\n  <span class=\"n\">dds_delete_qos</span><span class=\"p\">(</span><span class=\"n\">qos</span><span class=\"p\">);</span>\n\n  <span class=\"n\">printf</span> <span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">=== [Subscriber] Waiting for a sample ...</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n  <span class=\"n\">fflush</span> <span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">);</span>\n\n  <span class=\"cm\">/* Initialize sample buffer, by pointing the void pointer within\n   * the buffer array to a valid sample memory location. */</span>\n  <span class=\"n\">samples</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">HelloWorldData_Msg__alloc</span> <span class=\"p\">();</span>\n\n  <span class=\"cm\">/* Poll until data has been read. */</span>\n  <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"cm\">/* Do the actual read.\n     * The return value contains the number of read samples. */</span>\n    <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">dds_read</span> <span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">,</span> <span class=\"n\">samples</span><span class=\"p\">,</span> <span class=\"n\">infos</span><span class=\"p\">,</span> <span class=\"n\">MAX_SAMPLES</span><span class=\"p\">,</span> <span class=\"n\">MAX_SAMPLES</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rc</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n      <span class=\"n\">DDS_FATAL</span><span class=\"p\">(</span><span class=\"s\">\"dds_read: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">dds_strretcode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">rc</span><span class=\"p\">));</span>\n\n    <span class=\"cm\">/* Check if we read some data and it is valid. */</span>\n    <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">rc</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"n\">infos</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">valid_data</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n      <span class=\"cm\">/* Print Message. */</span>\n      <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">HelloWorldData_Msg</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">samples</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n      <span class=\"n\">printf</span> <span class=\"p\">(</span><span class=\"s\">\"=== [Subscriber] Received : \"</span><span class=\"p\">);</span>\n      <span class=\"n\">printf</span> <span class=\"p\">(</span><span class=\"s\">\"Message (%\"</span><span class=\"n\">PRId32</span><span class=\"s\">\", %s)</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"o\">-&gt;</span><span class=\"n\">userID</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"o\">-&gt;</span><span class=\"n\">message</span><span class=\"p\">);</span>\n      <span class=\"n\">fflush</span> <span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">);</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span>\n    <span class=\"p\">{</span>\n      <span class=\"cm\">/* Polling sleep. */</span>\n      <span class=\"n\">dds_sleepfor</span> <span class=\"p\">(</span><span class=\"n\">DDS_MSECS</span> <span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">));</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"cm\">/* Free the data location. */</span>\n  <span class=\"n\">HelloWorldData_Msg_free</span> <span class=\"p\">(</span><span class=\"n\">samples</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">DDS_FREE_ALL</span><span class=\"p\">);</span>\n\n  <span class=\"cm\">/* Deleting the participant will delete all its children recursively as well. */</span>\n  <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">dds_delete</span> <span class=\"p\">(</span><span class=\"n\">participant</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rc</span> <span class=\"o\">!=</span> <span class=\"n\">DDS_RETCODE_OK</span><span class=\"p\">)</span>\n    <span class=\"n\">DDS_FATAL</span><span class=\"p\">(</span><span class=\"s\">\"dds_delete: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">dds_strretcode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">rc</span><span class=\"p\">));</span>\n\n  <span class=\"k\">return</span> <span class=\"n\">EXIT_SUCCESS</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">publisher.c</code>와 동일하게 <code class=\"language-plaintext highlighter-rouge\">dds.h</code>와 <code class=\"language-plaintext highlighter-rouge\">HelloWorldData.h</code> 헤더를 선언한다.</li>\n</ul>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include \"dds/dds.h\"\n#include \"HelloWorldData.h\"\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\n</span></code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">MAX_SAMPLES</code>는 메세지를 담을 사이즈의 크기를 정의한다.</li>\n</ul>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* An array of one message (aka sample in dds terms) will be used. */</span>\n<span class=\"cp\">#define MAX_SAMPLES 1\n</span></code></pre>  </div></div>\n\n<ul>\n <li>다음으로 <code class=\"language-plaintext highlighter-rouge\">participant</code>, <code class=\"language-plaintext highlighter-rouge\">topic</code>, <code class=\"language-plaintext highlighter-rouge\">reader</code>를 선언하고, <code class=\"language-plaintext highlighter-rouge\">HelloWorldData_Msg</code> 타입의 <code class=\"language-plaintext highlighter-rouge\">*msg</code>를 선언한다. 다음으로 <code class=\"language-plaintext highlighter-rouge\">MAX_SAMPLES</code> 크기의 void형 <code class=\"language-plaintext highlighter-rouge\">*samples</code>와, dds_sample_info_t 타입의 <code class=\"language-plaintext highlighter-rouge\">infos</code>를 선언한다. dds 리턴 값을 저장하는 <code class=\"language-plaintext highlighter-rouge\">rc</code>를 선언하고, dds의 데이터 송수신 품질을 정의하는 <code class=\"language-plaintext highlighter-rouge\">qos</code>를 생성한다.</li>\n</ul>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">main</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span> <span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">dds_entity_t</span> <span class=\"n\">participant</span><span class=\"p\">;</span>\n  <span class=\"n\">dds_entity_t</span> <span class=\"n\">topic</span><span class=\"p\">;</span>\n  <span class=\"n\">dds_entity_t</span> <span class=\"n\">reader</span><span class=\"p\">;</span>\n  <span class=\"n\">HelloWorldData_Msg</span> <span class=\"o\">*</span><span class=\"n\">msg</span><span class=\"p\">;</span>\n  <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">samples</span><span class=\"p\">[</span><span class=\"n\">MAX_SAMPLES</span><span class=\"p\">];</span>\n  <span class=\"n\">dds_sample_info_t</span> <span class=\"n\">infos</span><span class=\"p\">[</span><span class=\"n\">MAX_SAMPLES</span><span class=\"p\">];</span>\n  <span class=\"n\">dds_return_t</span> <span class=\"n\">rc</span><span class=\"p\">;</span>\n  <span class=\"n\">dds_qos_t</span> <span class=\"o\">*</span><span class=\"n\">qos</span><span class=\"p\">;</span>\n  <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"n\">argc</span><span class=\"p\">;</span>\n  <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"n\">argv</span><span class=\"p\">;</span>\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">publisher.c</code>와 동일하게 <code class=\"language-plaintext highlighter-rouge\">participant</code>와 <code class=\"language-plaintext highlighter-rouge\">topic</code>을 선언한다. 이 때 <code class=\"language-plaintext highlighter-rouge\">topic</code>의 <code class=\"language-plaintext highlighter-rouge\">dds_create_topic()</code>의 <code class=\"language-plaintext highlighter-rouge\">\"HelloWorldData_Msg\"</code>는 publisher와 동일한 형태여야 한다.</li>\n</ul>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"cm\">/* Create a Participant. */</span>\n  <span class=\"n\">participant</span> <span class=\"o\">=</span> <span class=\"n\">dds_create_participant</span> <span class=\"p\">(</span><span class=\"n\">DDS_DOMAIN_DEFAULT</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">participant</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">DDS_FATAL</span><span class=\"p\">(</span><span class=\"s\">\"dds_create_participant: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">dds_strretcode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">participant</span><span class=\"p\">));</span>\n\n  <span class=\"cm\">/* Create a Topic. */</span>\n  <span class=\"n\">topic</span> <span class=\"o\">=</span> <span class=\"n\">dds_create_topic</span> <span class=\"p\">(</span>\n    <span class=\"n\">participant</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">HelloWorldData_Msg_desc</span><span class=\"p\">,</span> <span class=\"s\">\"HelloWorldData_Msg\"</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">topic</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">DDS_FATAL</span><span class=\"p\">(</span><span class=\"s\">\"dds_create_topic: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">dds_strretcode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">topic</span><span class=\"p\">));</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>다음으로 <code class=\"language-plaintext highlighter-rouge\">reader</code>를 선언하는 부분인데, 그 이전에 <code class=\"language-plaintext highlighter-rouge\">qos</code>를 먼저 정의한다. <code class=\"language-plaintext highlighter-rouge\">dds_create_qod()</code>로 <code class=\"language-plaintext highlighter-rouge\">qos</code>를 초기화 하고, <code class=\"language-plaintext highlighter-rouge\">dds_qset_reliability()</code> 함수를 이용하여 <code class=\"language-plaintext highlighter-rouge\">qos</code> 동작 방식을 설정한다.</li>\n <li>publisher에서는 <code class=\"language-plaintext highlighter-rouge\">qos</code>를 설정하지 않았지만, 이와 동일한 방식으로 <code class=\"language-plaintext highlighter-rouge\">qos</code>를 설정하여 <code class=\"language-plaintext highlighter-rouge\">dds_create_writer()</code>에 넣을 수 있다.</li>\n <li>마지막으로 <code class=\"language-plaintext highlighter-rouge\">reader</code> 객체를 <code class=\"language-plaintext highlighter-rouge\">dds_create_reader()</code>함수로 선언한다.</li>\n</ul>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"cm\">/* Create a reliable Reader. */</span>\n  <span class=\"n\">qos</span> <span class=\"o\">=</span> <span class=\"n\">dds_create_qos</span> <span class=\"p\">();</span>\n  <span class=\"n\">dds_qset_reliability</span> <span class=\"p\">(</span><span class=\"n\">qos</span><span class=\"p\">,</span> <span class=\"n\">DDS_RELIABILITY_RELIABLE</span><span class=\"p\">,</span> <span class=\"n\">DDS_SECS</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">));</span>\n  <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">dds_create_reader</span> <span class=\"p\">(</span><span class=\"n\">participant</span><span class=\"p\">,</span> <span class=\"n\">topic</span><span class=\"p\">,</span> <span class=\"n\">qos</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">reader</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">DDS_FATAL</span><span class=\"p\">(</span><span class=\"s\">\"dds_create_reader: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">dds_strretcode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">reader</span><span class=\"p\">));</span>\n  <span class=\"n\">dds_delete_qos</span><span class=\"p\">(</span><span class=\"n\">qos</span><span class=\"p\">);</span>\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">samples[0]</code>에 <code class=\"language-plaintext highlighter-rouge\">HelloWorldData_Msg__alloc()</code>을 이용하여 해당 버퍼를 초기화한다.</li>\n</ul>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"n\">printf</span> <span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">=== [Subscriber] Waiting for a sample ...</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n  <span class=\"n\">fflush</span> <span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">);</span>\n\n  <span class=\"cm\">/* Initialize sample buffer, by pointing the void pointer within\n   * the buffer array to a valid sample memory location. */</span>\n  <span class=\"n\">samples</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">HelloWorldData_Msg__alloc</span> <span class=\"p\">();</span>\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">dds_read()</code>함수로 <code class=\"language-plaintext highlighter-rouge\">\"HelloWorldData_Msg\"</code> 토픽의 메세지를 읽어온다.</li>\n <li>메세지는 <code class=\"language-plaintext highlighter-rouge\">samples[0]</code>에 저장되며, <code class=\"language-plaintext highlighter-rouge\">(HelloWorldData_Msg*)</code> 형태로 msg를 저장할 수 있다.</li>\n</ul>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"cm\">/* Poll until data has been read. */</span>\n  <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"cm\">/* Do the actual read.\n     * The return value contains the number of read samples. */</span>\n    <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">dds_read</span> <span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">,</span> <span class=\"n\">samples</span><span class=\"p\">,</span> <span class=\"n\">infos</span><span class=\"p\">,</span> <span class=\"n\">MAX_SAMPLES</span><span class=\"p\">,</span> <span class=\"n\">MAX_SAMPLES</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rc</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n      <span class=\"n\">DDS_FATAL</span><span class=\"p\">(</span><span class=\"s\">\"dds_read: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">dds_strretcode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">rc</span><span class=\"p\">));</span>\n\n    <span class=\"cm\">/* Check if we read some data and it is valid. */</span>\n    <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">rc</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"n\">infos</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">valid_data</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n      <span class=\"cm\">/* Print Message. */</span>\n      <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">HelloWorldData_Msg</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">samples</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n      <span class=\"n\">printf</span> <span class=\"p\">(</span><span class=\"s\">\"=== [Subscriber] Received : \"</span><span class=\"p\">);</span>\n      <span class=\"n\">printf</span> <span class=\"p\">(</span><span class=\"s\">\"Message (%\"</span><span class=\"n\">PRId32</span><span class=\"s\">\", %s)</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"o\">-&gt;</span><span class=\"n\">userID</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"o\">-&gt;</span><span class=\"n\">message</span><span class=\"p\">);</span>\n      <span class=\"n\">fflush</span> <span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">);</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span>\n    <span class=\"p\">{</span>\n      <span class=\"cm\">/* Polling sleep. */</span>\n      <span class=\"n\">dds_sleepfor</span> <span class=\"p\">(</span><span class=\"n\">DDS_MSECS</span> <span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">));</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>dds 통신이 종료되면 초기화 했던 <code class=\"language-plaintext highlighter-rouge\">samples[0]</code> 버퍼를 <code class=\"language-plaintext highlighter-rouge\">HelloWorldData_Msg_free()</code>함수로 해제하고, <code class=\"language-plaintext highlighter-rouge\">dds_delete()</code>함수로 <code class=\"language-plaintext highlighter-rouge\">participant</code> 객체를 제거한다. 마지막으로 <code class=\"language-plaintext highlighter-rouge\">EXIT_SUCCESS</code>를 리턴함으로써 코드를 종료한다.</li>\n</ul>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"cm\">/* Free the data location. */</span>\n  <span class=\"n\">HelloWorldData_Msg_free</span> <span class=\"p\">(</span><span class=\"n\">samples</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">DDS_FREE_ALL</span><span class=\"p\">);</span>\n\n  <span class=\"cm\">/* Deleting the participant will delete all its children recursively as well. */</span>\n  <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">dds_delete</span> <span class=\"p\">(</span><span class=\"n\">participant</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rc</span> <span class=\"o\">!=</span> <span class=\"n\">DDS_RETCODE_OK</span><span class=\"p\">)</span>\n    <span class=\"n\">DDS_FATAL</span><span class=\"p\">(</span><span class=\"s\">\"dds_delete: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">dds_strretcode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">rc</span><span class=\"p\">));</span>\n\n  <span class=\"k\">return</span> <span class=\"n\">EXIT_SUCCESS</span><span class=\"p\">;</span>\n<span class=\"err\">}</span>\n</code></pre>  </div></div>\n","dir":"/0004Tools/0002Knowledges/0001CycloneDDS/","name":"0002Tutorials.md","path":"0004Tools/0002Knowledges/0001CycloneDDS/0002Tutorials.md","url":"/0004Tools/0002Knowledges/0001CycloneDDS/0002Tutorials.html"},{"sort":2,"permalink":"/0004Tools/0002Knowledges/0002Docker/","layout":"default","title":"Docker","content":"<h1 id=\"docker\">Docker</h1>\n\n","dir":"/0004Tools/0002Knowledges/0002Docker/","name":"README.md","path":"0004Tools/0002Knowledges/0002Docker/README.md","url":"/0004Tools/0002Knowledges/0002Docker/"},{"sort":2,"layout":"default","title":"C++ REST SDK","content":"<h1 id=\"c-rest-sdk\">C++ REST SDK</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- <a href=\"https://github.com/microsoft/cpprestsdk\">cpprestsdk github pages</a></em></p>\n\n<p><em>- <a href=\"https://microsoft.github.io/cpprestsdk/namespaces.html\">cpprestsdk API</a></em></p>\n\n<p><em>- <a href=\"https://mariusbancila.ro/blog/2017/11/19/revisited-full-fledged-client-server-example-with-c-rest-sdk-2-10/\">cpprestsdk example code</a></em></p>\n\n<p><em>- <a href=\"https://medium.com/@ivan.mejia/modern-c-micro-service-implementation-rest-api-b499ffeaf898\">Modern C++ micro-service implementation + REST API - Iván Mejía</a></em></p>\n\n<p><em>- <a href=\"https://medium.com/@ivan.mejia/modern-c-micro-serivce-rest-api-part-ii-7be067440ca8\">Modern C++ micro-serivce + REST API, Part II + REST API - Iván Mejía</a></em></p>\n\n<h2 id=\"1-c-rest-sdk\">1. C++ REST SDK</h2>\n\n<p>C++ REST SDK는 modern asynchronous C++ API를 사용한 코드로 클라우드 기반 CLIENT-SERVER 통신을 위한 마이크로소프트 프로젝트(프로젝트명 Casablanca)이다. 이 프로젝트는 C++ 개발자들이 서비스에 접속하고 상호작용할 수 있도록 돕는 것을 목표로 한다.</p>\n\n<p>C++ REST SDK의 특징은 HTTP를 이용한 Client, Server를 쉽게 구현할 수 있으며, JSON 형태를 이용한다. 또한 Windows desktop, Windows Store(UWP), Linux, OS X, Unix, iOS 및 Android 등 다양한 플랫폼에서 운영될 수 있는 크로스 플랫폼을 지원한다.</p>\n\n<p>이러한 C++ REST SDK는 C++를 이용한 뛰어난 성능의 REST 애플리케이션을 쉽고 빠르게 만들 수 있도록 한다.</p>\n\n<h2 id=\"2-예제\">2. 예제</h2>\n\n<p>C++ REST SDK를 이용한 SERVER-CLIENT 예제를 ROS2로 구현한 예제(<a href=\"https://github.com/whgdms1230/cpprest_example\">C++ REST SDK example github pages</a>)이다.</p>\n\n<h2 id=\"21-server\">2.1 SERVER</h2>\n\n<p>SERVER는 CLINET로부터 요청받은 명령을 <code class=\"language-plaintext highlighter-rouge\">dictionary</code> 변수에 저장하고, 이를 이용하여 CLIENT의 요청을 처리하는 노드이다.</p>\n\n<h3 id=\"211-main-함수\">2.1.1 main 함수</h3>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">http_listener</code> 객체를 생성(URI 지정)한다.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">display_json()</code> 함수를 이용하여 request 처리 시 json 형태의 정보를 시각화한다.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">support()</code> 함수로 request method 지정 및 handler 함수 지정한다.</li>\n <li>listener loop 동작시킨다.</li>\n</ul>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;cpprest/http_listener.h&gt;\n#include &lt;cpprest/json.h&gt;\n</span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">web</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">web</span><span class=\"o\">::</span><span class=\"n\">http</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">web</span><span class=\"o\">::</span><span class=\"n\">http</span><span class=\"o\">::</span><span class=\"n\">experimental</span><span class=\"o\">::</span><span class=\"n\">listener</span><span class=\"p\">;</span>\n\n<span class=\"cp\">#include &lt;iostream&gt;\n#include &lt;map&gt;\n#include &lt;set&gt;\n#include &lt;string&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"cp\">#define TRACE(msg)            cout &lt;&lt; msg\n#define TRACE_ACTION(a, k, v) cout &lt;&lt; a &lt;&lt; U(\" (\") &lt;&lt; k &lt;&lt; U(\", \") &lt;&lt; v &lt;&lt; U(\")\\n\")\n</span>\n<span class=\"n\">map</span><span class=\"o\">&lt;</span><span class=\"n\">utility</span><span class=\"o\">::</span><span class=\"n\">string_t</span><span class=\"p\">,</span> <span class=\"n\">utility</span><span class=\"o\">::</span><span class=\"n\">string_t</span><span class=\"o\">&gt;</span> <span class=\"n\">dictionary</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">display_json</span><span class=\"p\">(</span>\n   <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">jvalue</span><span class=\"p\">,</span>\n   <span class=\"n\">utility</span><span class=\"o\">::</span><span class=\"n\">string_t</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">prefix</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n   <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">prefix</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">jvalue</span><span class=\"p\">.</span><span class=\"n\">serialize</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n   <span class=\"n\">http_listener</span> <span class=\"n\">listener</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"http://localhost/restdemo\"</span><span class=\"p\">));</span>\n\n   <span class=\"n\">listener</span><span class=\"p\">.</span><span class=\"n\">support</span><span class=\"p\">(</span><span class=\"n\">methods</span><span class=\"o\">::</span><span class=\"n\">GET</span><span class=\"p\">,</span> <span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">handle_get</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">placeholders</span><span class=\"o\">::</span><span class=\"n\">_1</span><span class=\"p\">));</span>\n   <span class=\"n\">listener</span><span class=\"p\">.</span><span class=\"n\">support</span><span class=\"p\">(</span><span class=\"n\">methods</span><span class=\"o\">::</span><span class=\"n\">POST</span><span class=\"p\">,</span> <span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">handle_post</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">placeholders</span><span class=\"o\">::</span><span class=\"n\">_1</span><span class=\"p\">));</span>\n   <span class=\"n\">listener</span><span class=\"p\">.</span><span class=\"n\">support</span><span class=\"p\">(</span><span class=\"n\">methods</span><span class=\"o\">::</span><span class=\"n\">PUT</span><span class=\"p\">,</span> <span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">handle_put</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">placeholders</span><span class=\"o\">::</span><span class=\"n\">_1</span><span class=\"p\">));</span>\n   <span class=\"n\">listener</span><span class=\"p\">.</span><span class=\"n\">support</span><span class=\"p\">(</span><span class=\"n\">methods</span><span class=\"o\">::</span><span class=\"n\">DEL</span><span class=\"p\">,</span> <span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">handle_del</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">placeholders</span><span class=\"o\">::</span><span class=\"n\">_1</span><span class=\"p\">));</span>\n\n   <span class=\"k\">try</span>\n   <span class=\"p\">{</span>\n      <span class=\"n\">listener</span>\n         <span class=\"p\">.</span><span class=\"n\">open</span><span class=\"p\">()</span>\n         <span class=\"p\">.</span><span class=\"n\">then</span><span class=\"p\">([</span><span class=\"o\">&amp;</span><span class=\"n\">listener</span><span class=\"p\">](){</span><span class=\"n\">TRACE</span><span class=\"p\">(</span><span class=\"s\">L\"</span><span class=\"se\">\\n</span><span class=\"s\">starting to listen</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);})</span>\n         <span class=\"p\">.</span><span class=\"n\">wait</span><span class=\"p\">();</span>\n\n      <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"n\">exception</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n   <span class=\"p\">{</span>\n      <span class=\"n\">wcout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">what</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h3 id=\"212-method---get\">2.1.2 Method - get</h3>\n\n<h4 id=\"2121-handle_get\">2.1.2.1 handle_get</h4>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">answer</code> 변수에 <code class=\"language-plaintext highlighter-rouge\">request</code>에 대한 json::value 데이터 저장한다.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">request</code>에 대한 <code class=\"language-plaintext highlighter-rouge\">reply()</code> 수행한다.</li>\n</ul>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">handle_get</span><span class=\"p\">(</span><span class=\"n\">http_request</span> <span class=\"n\">request</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n   <span class=\"n\">TRACE</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">handle GET</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">));</span>\n\n   <span class=\"k\">auto</span> <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span><span class=\"o\">::</span><span class=\"n\">object</span><span class=\"p\">();</span>\n\n   <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">dictionary</span><span class=\"p\">)</span>\n   <span class=\"p\">{</span>\n      <span class=\"n\">answer</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"n\">display_json</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span><span class=\"o\">::</span><span class=\"n\">null</span><span class=\"p\">(),</span> <span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"R: \"</span><span class=\"p\">));</span>\n   <span class=\"n\">display_json</span><span class=\"p\">(</span><span class=\"n\">answer</span><span class=\"p\">,</span> <span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"S: \"</span><span class=\"p\">));</span>\n\n   <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">reply</span><span class=\"p\">(</span><span class=\"n\">status_codes</span><span class=\"o\">::</span><span class=\"n\">OK</span><span class=\"p\">,</span> <span class=\"n\">answer</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h3 id=\"213-method---post-put-del\">2.1.3 Method - post, put, del</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">POST</code>, <code class=\"language-plaintext highlighter-rouge\">PUT</code>, <code class=\"language-plaintext highlighter-rouge\">DEL</code> methods는 <code class=\"language-plaintext highlighter-rouge\">GET</code> 방식보다 복잡한 구조로 되어있다.</p>\n\n<h4 id=\"2131-handle_request\">2.1.3.1 handle_request</h4>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">handle_request()</code> 함수는 <code class=\"language-plaintext highlighter-rouge\">request</code>된 json 값을 처리하고, <code class=\"language-plaintext highlighter-rouge\">response</code>할 json 값을 만드는 요청을 처리하기 위한 일반적인 메소드 함수이다.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">POST</code>, <code class=\"language-plaintext highlighter-rouge\">PUT</code>, <code class=\"language-plaintext highlighter-rouge\">DEL</code> methods handler는 <code class=\"language-plaintext highlighter-rouge\">handle_request()</code>를 이용하여 처리한다.</li>\n</ul>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">handle_request</span><span class=\"p\">(</span>\n   <span class=\"n\">http_request</span> <span class=\"n\">request</span><span class=\"p\">,</span>\n   <span class=\"n\">function</span><span class=\"o\">&lt;</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span> <span class=\"o\">&amp;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span> <span class=\"n\">action</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n   <span class=\"k\">auto</span> <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span><span class=\"o\">::</span><span class=\"n\">object</span><span class=\"p\">();</span>\n\n   <span class=\"n\">request</span>\n      <span class=\"p\">.</span><span class=\"n\">extract_json</span><span class=\"p\">()</span>\n      <span class=\"p\">.</span><span class=\"n\">then</span><span class=\"p\">([</span><span class=\"o\">&amp;</span><span class=\"n\">answer</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">action</span><span class=\"p\">](</span><span class=\"n\">pplx</span><span class=\"o\">::</span><span class=\"n\">task</span><span class=\"o\">&lt;</span><span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span><span class=\"o\">&gt;</span> <span class=\"n\">task</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n         <span class=\"k\">try</span>\n         <span class=\"p\">{</span>\n            <span class=\"k\">auto</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">jvalue</span> <span class=\"o\">=</span> <span class=\"n\">task</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">();</span>\n            <span class=\"n\">display_json</span><span class=\"p\">(</span><span class=\"n\">jvalue</span><span class=\"p\">,</span> <span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"R: \"</span><span class=\"p\">));</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">jvalue</span><span class=\"p\">.</span><span class=\"n\">is_null</span><span class=\"p\">())</span>\n            <span class=\"p\">{</span>\n               <span class=\"n\">action</span><span class=\"p\">(</span><span class=\"n\">jvalue</span><span class=\"p\">,</span> <span class=\"n\">answer</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n         <span class=\"p\">}</span>\n         <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"n\">http_exception</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n         <span class=\"p\">{</span>\n            <span class=\"n\">wcout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">what</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n         <span class=\"p\">}</span>\n      <span class=\"p\">})</span>\n      <span class=\"p\">.</span><span class=\"n\">wait</span><span class=\"p\">();</span>\n\n   \n   <span class=\"n\">display_json</span><span class=\"p\">(</span><span class=\"n\">answer</span><span class=\"p\">,</span> <span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"S: \"</span><span class=\"p\">));</span>\n\n   <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">reply</span><span class=\"p\">(</span><span class=\"n\">status_codes</span><span class=\"o\">::</span><span class=\"n\">OK</span><span class=\"p\">,</span> <span class=\"n\">answer</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h4 id=\"2132-handle_post\">2.1.3.2 handle_post</h4>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">handle_post</span><span class=\"p\">(</span><span class=\"n\">http_request</span> <span class=\"n\">request</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n   <span class=\"n\">TRACE</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">handle POST</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n\n   <span class=\"n\">handle_request</span><span class=\"p\">(</span>\n      <span class=\"n\">request</span><span class=\"p\">,</span>\n      <span class=\"p\">[](</span><span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">jvalue</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span> <span class=\"o\">&amp;</span> <span class=\"n\">answer</span><span class=\"p\">)</span>\n   <span class=\"p\">{</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">jvalue</span><span class=\"p\">.</span><span class=\"n\">as_array</span><span class=\"p\">())</span>\n      <span class=\"p\">{</span>\n         <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">is_string</span><span class=\"p\">())</span>\n         <span class=\"p\">{</span>\n            <span class=\"k\">auto</span> <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">as_string</span><span class=\"p\">();</span>\n            <span class=\"k\">auto</span> <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">dictionary</span><span class=\"p\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">);</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">pos</span> <span class=\"o\">==</span> <span class=\"n\">dictionary</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">())</span>\n            <span class=\"p\">{</span>\n               <span class=\"n\">answer</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"&lt;nil&gt;\"</span><span class=\"p\">));</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">else</span>\n            <span class=\"p\">{</span>\n               <span class=\"n\">answer</span><span class=\"p\">[</span><span class=\"n\">pos</span><span class=\"o\">-&gt;</span><span class=\"n\">first</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"o\">-&gt;</span><span class=\"n\">second</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n         <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n   <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h4 id=\"2133-handle_put\">2.1.3.3 handle_put</h4>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">handle_put</span><span class=\"p\">(</span><span class=\"n\">http_request</span> <span class=\"n\">request</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n   <span class=\"n\">TRACE</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">handle PUT</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n\n   <span class=\"n\">handle_request</span><span class=\"p\">(</span>\n      <span class=\"n\">request</span><span class=\"p\">,</span>\n      <span class=\"p\">[](</span><span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">jvalue</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span> <span class=\"o\">&amp;</span> <span class=\"n\">answer</span><span class=\"p\">)</span>\n   <span class=\"p\">{</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">jvalue</span><span class=\"p\">.</span><span class=\"n\">as_object</span><span class=\"p\">())</span>\n      <span class=\"p\">{</span>\n         <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">.</span><span class=\"n\">is_string</span><span class=\"p\">())</span>\n         <span class=\"p\">{</span>\n            <span class=\"k\">auto</span> <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">;</span>\n            <span class=\"k\">auto</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">.</span><span class=\"n\">as_string</span><span class=\"p\">();</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dictionary</span><span class=\"p\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">dictionary</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">())</span>\n            <span class=\"p\">{</span>\n               <span class=\"n\">TRACE_ACTION</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"added\"</span><span class=\"p\">),</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">);</span>\n               <span class=\"n\">answer</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"&lt;put&gt;\"</span><span class=\"p\">));</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">else</span>\n            <span class=\"p\">{</span>\n               <span class=\"n\">TRACE_ACTION</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"updated\"</span><span class=\"p\">),</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">);</span>\n               <span class=\"n\">answer</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"&lt;updated&gt;\"</span><span class=\"p\">));</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"n\">dictionary</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"p\">;</span>\n         <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n   <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h4 id=\"2134-handle_del\">2.1.3.4 handle_del</h4>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">handle_del</span><span class=\"p\">(</span><span class=\"n\">http_request</span> <span class=\"n\">request</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n   <span class=\"n\">TRACE</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">handle DEL</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n\n   <span class=\"n\">handle_request</span><span class=\"p\">(</span>\n      <span class=\"n\">request</span><span class=\"p\">,</span>\n      <span class=\"p\">[](</span><span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">jvalue</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span> <span class=\"o\">&amp;</span> <span class=\"n\">answer</span><span class=\"p\">)</span>\n   <span class=\"p\">{</span>\n      <span class=\"n\">set</span><span class=\"o\">&lt;</span><span class=\"n\">utility</span><span class=\"o\">::</span><span class=\"n\">string_t</span><span class=\"o\">&gt;</span> <span class=\"n\">keys</span><span class=\"p\">;</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">jvalue</span><span class=\"p\">.</span><span class=\"n\">as_array</span><span class=\"p\">())</span>\n      <span class=\"p\">{</span>\n         <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">is_string</span><span class=\"p\">())</span>\n         <span class=\"p\">{</span>\n            <span class=\"k\">auto</span> <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">as_string</span><span class=\"p\">();</span>\n\n            <span class=\"k\">auto</span> <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">dictionary</span><span class=\"p\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">);</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">pos</span> <span class=\"o\">==</span> <span class=\"n\">dictionary</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">())</span>\n            <span class=\"p\">{</span>\n               <span class=\"n\">answer</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"&lt;failed&gt;\"</span><span class=\"p\">));</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">else</span>\n            <span class=\"p\">{</span>\n               <span class=\"n\">TRACE_ACTION</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"deleted\"</span><span class=\"p\">),</span> <span class=\"n\">pos</span><span class=\"o\">-&gt;</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"o\">-&gt;</span><span class=\"n\">second</span><span class=\"p\">);</span>\n               <span class=\"n\">answer</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"&lt;deleted&gt;\"</span><span class=\"p\">));</span>\n               <span class=\"n\">keys</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n         <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">keys</span><span class=\"p\">)</span>\n         <span class=\"n\">dictionary</span><span class=\"p\">.</span><span class=\"n\">erase</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">);</span>\n   <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h2 id=\"22-client\">2.2 Client</h2>\n<ul>\n <li>HTTP request를 만드는 <code class=\"language-plaintext highlighter-rouge\">http_client</code> 객체를 생성한다.</li>\n <li>request method, path 및 json 값을 지정할 수 있는 오버로드 된 <code class=\"language-plaintext highlighter-rouge\">make_request()</code> 함수를 가진다.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">make_request()</code>의 경우 reqeust를 디스패치하고, 받은 response를 콘솔에 표시하는 역할을 한다.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">GET</code> 매소드의 경우 json 값을 보내지 않는다.</li>\n</ul>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;cpprest/http_client.h&gt;\n#include &lt;cpprest/json.h&gt;\n</span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">web</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">web</span><span class=\"o\">::</span><span class=\"n\">http</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">web</span><span class=\"o\">::</span><span class=\"n\">http</span><span class=\"o\">::</span><span class=\"n\">client</span><span class=\"p\">;</span>\n\n<span class=\"cp\">#include &lt;iostream&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">display_json</span><span class=\"p\">(</span>\n   <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">jvalue</span><span class=\"p\">,</span> \n   <span class=\"n\">utility</span><span class=\"o\">::</span><span class=\"n\">string_t</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">prefix</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n   <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">prefix</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">jvalue</span><span class=\"p\">.</span><span class=\"n\">serialize</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">pplx</span><span class=\"o\">::</span><span class=\"n\">task</span><span class=\"o\">&lt;</span><span class=\"n\">http_response</span><span class=\"o\">&gt;</span> <span class=\"n\">make_task_request</span><span class=\"p\">(</span>\n   <span class=\"n\">http_client</span> <span class=\"o\">&amp;</span> <span class=\"n\">client</span><span class=\"p\">,</span>\n   <span class=\"n\">method</span> <span class=\"n\">mtd</span><span class=\"p\">,</span>\n   <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">jvalue</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n   <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">mtd</span> <span class=\"o\">==</span> <span class=\"n\">methods</span><span class=\"o\">::</span><span class=\"n\">GET</span> <span class=\"o\">||</span> <span class=\"n\">mtd</span> <span class=\"o\">==</span> <span class=\"n\">methods</span><span class=\"o\">::</span><span class=\"n\">HEAD</span><span class=\"p\">)</span> <span class=\"o\">?</span>\n      <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"n\">mtd</span><span class=\"p\">,</span> <span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"/restdemo\"</span><span class=\"p\">))</span> <span class=\"o\">:</span>\n      <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"n\">mtd</span><span class=\"p\">,</span> <span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"/restdemo\"</span><span class=\"p\">),</span> <span class=\"n\">jvalue</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">make_request</span><span class=\"p\">(</span>\n   <span class=\"n\">http_client</span> <span class=\"o\">&amp;</span> <span class=\"n\">client</span><span class=\"p\">,</span> \n   <span class=\"n\">method</span> <span class=\"n\">mtd</span><span class=\"p\">,</span> \n   <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">jvalue</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n   <span class=\"n\">make_task_request</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">mtd</span><span class=\"p\">,</span> <span class=\"n\">jvalue</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"n\">then</span><span class=\"p\">([](</span><span class=\"n\">http_response</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n      <span class=\"p\">{</span>\n         <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">status_code</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">status_codes</span><span class=\"o\">::</span><span class=\"n\">OK</span><span class=\"p\">)</span>\n         <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">extract_json</span><span class=\"p\">();</span>\n         <span class=\"p\">}</span>\n         <span class=\"k\">return</span> <span class=\"n\">pplx</span><span class=\"o\">::</span><span class=\"n\">task_from_result</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span><span class=\"p\">());</span>\n      <span class=\"p\">})</span>\n      <span class=\"p\">.</span><span class=\"n\">then</span><span class=\"p\">([](</span><span class=\"n\">pplx</span><span class=\"o\">::</span><span class=\"n\">task</span><span class=\"o\">&lt;</span><span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span><span class=\"o\">&gt;</span> <span class=\"n\">previousTask</span><span class=\"p\">)</span>\n      <span class=\"p\">{</span>\n         <span class=\"k\">try</span>\n         <span class=\"p\">{</span>\n            <span class=\"n\">display_json</span><span class=\"p\">(</span><span class=\"n\">previousTask</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(),</span> <span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"R: \"</span><span class=\"p\">));</span>\n         <span class=\"p\">}</span>\n         <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"n\">http_exception</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n         <span class=\"p\">{</span>\n            <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">what</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n         <span class=\"p\">}</span>\n      <span class=\"p\">})</span>\n      <span class=\"p\">.</span><span class=\"n\">wait</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n   <span class=\"n\">http_client</span> <span class=\"n\">client</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"http://localhost:9090\"</span><span class=\"p\">));</span>\n\n   <span class=\"k\">auto</span> <span class=\"n\">putvalue</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span><span class=\"o\">::</span><span class=\"n\">object</span><span class=\"p\">();</span>\n   <span class=\"n\">putvalue</span><span class=\"p\">[</span><span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"one\"</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"100\"</span><span class=\"p\">));</span>\n   <span class=\"n\">putvalue</span><span class=\"p\">[</span><span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"two\"</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"200\"</span><span class=\"p\">));</span>\n\n   <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">PUT (add values)</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n   <span class=\"n\">display_json</span><span class=\"p\">(</span><span class=\"n\">putvalue</span><span class=\"p\">,</span> <span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"S: \"</span><span class=\"p\">));</span>\n   <span class=\"n\">make_request</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">::</span><span class=\"n\">PUT</span><span class=\"p\">,</span> <span class=\"n\">putvalue</span><span class=\"p\">);</span>\n\n   <span class=\"k\">auto</span> <span class=\"n\">getvalue</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span><span class=\"o\">::</span><span class=\"n\">array</span><span class=\"p\">();</span>\n   <span class=\"n\">getvalue</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"one\"</span><span class=\"p\">));</span>\n   <span class=\"n\">getvalue</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"two\"</span><span class=\"p\">));</span>\n   <span class=\"n\">getvalue</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"three\"</span><span class=\"p\">));</span>\n\n   <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">POST (get some values)</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n   <span class=\"n\">display_json</span><span class=\"p\">(</span><span class=\"n\">getvalue</span><span class=\"p\">,</span> <span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"S: \"</span><span class=\"p\">));</span>\n   <span class=\"n\">make_request</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">::</span><span class=\"n\">POST</span><span class=\"p\">,</span> <span class=\"n\">getvalue</span><span class=\"p\">);</span>\n\n   <span class=\"k\">auto</span> <span class=\"n\">delvalue</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span><span class=\"o\">::</span><span class=\"n\">array</span><span class=\"p\">();</span>\n   <span class=\"n\">delvalue</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"one\"</span><span class=\"p\">));</span>\n\n   <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">DELETE (delete values)</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n   <span class=\"n\">display_json</span><span class=\"p\">(</span><span class=\"n\">delvalue</span><span class=\"p\">,</span> <span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"S: \"</span><span class=\"p\">));</span>\n   <span class=\"n\">make_request</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">::</span><span class=\"n\">DEL</span><span class=\"p\">,</span> <span class=\"n\">delvalue</span><span class=\"p\">);</span>\n\n   <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">POST (get some values)</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n   <span class=\"n\">display_json</span><span class=\"p\">(</span><span class=\"n\">getvalue</span><span class=\"p\">,</span> <span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"S: \"</span><span class=\"p\">));</span>\n   <span class=\"n\">make_request</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">::</span><span class=\"n\">POST</span><span class=\"p\">,</span> <span class=\"n\">getvalue</span><span class=\"p\">);</span>\n\n   <span class=\"k\">auto</span> <span class=\"n\">nullvalue</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">::</span><span class=\"n\">value</span><span class=\"o\">::</span><span class=\"n\">null</span><span class=\"p\">();</span>\n\n   <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">GET (get all values)</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n   <span class=\"n\">display_json</span><span class=\"p\">(</span><span class=\"n\">nullvalue</span><span class=\"p\">,</span> <span class=\"n\">U</span><span class=\"p\">(</span><span class=\"s\">\"S: \"</span><span class=\"p\">));</span>\n   <span class=\"n\">make_request</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">::</span><span class=\"n\">GET</span><span class=\"p\">,</span> <span class=\"n\">nullvalue</span><span class=\"p\">);</span>\n\n   <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h2 id=\"23-result\">2.3 Result</h2>\n<p><img src=\"Example.png\" width=\"650\" height=\"250\" /></p>\n","dir":"/0004Tools/0002Knowledges/0004RESTAPI/","name":"0002cpprestSDK.md","path":"0004Tools/0002Knowledges/0004RESTAPI/0002cpprestSDK.md","url":"/0004Tools/0002Knowledges/0004RESTAPI/0002cpprestSDK.html"},{"sort":2,"layout":"default","title":"SQLite","content":"<h1 id=\"sqlite\">SQLite</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n\n<p><em>- <a href=\"https://www.sqlite.org/index.html\">sqlite 홈페이지</a></em></p>\n\n<p><em>- <a href=\"https://wikidocs.net/book/1530\">SQLite3로 가볍게 배우는 데이터베이스: SQL 기초 실습</a></em></p>\n\n<p><em>- <a href=\"https://www.sqlite.org/cintro.html\">sqlite3 C++ API</a></em></p>\n\n<p><em>- <a href=\"https://www.tutorialspoint.com/sqlite/sqlite_c_cpp.htm\">sqlite3 C/C++ tutorials</a></em></p>\n\n<h2 id=\"1-sqlite란\">1. SQLite란?</h2>\n<p>SQLite는 가장 널리 사용되는 데이터베이스 엔진으로, 임베디드 디바이스, 사물 인터넷, 데이터 분석, 작은 규모의 웹사이트에 사용하기 적합하다.</p>\n\n<p>SQLite의 특징은 다음과 같다.</p>\n\n<ul>\n <li>SQLite는 임베디드 SQL 데이터베이스 엔진으로, 독립적인 서버 프로세스를 갖지 않는다.</li>\n <li>설치 과정이 없고, 설정 파일도 존재하지 않는다.</li>\n <li>테이블, 인덱스, 트리거, 뷰 등을 포함한 완전한 데이터베이스가 디스크 상에 단 하나의 파일로 존재한다.</li>\n <li>퍼블릭 도메인5으로서 개인적 또는 상업적 목적으로 사용할 수 있다.</li>\n</ul>\n\n<h2 id=\"2-sqlite-설치\">2. SQLite 설치</h2>\n\n<p>SQLite3 설치방법은 다음과 같다.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install </span>sqlite3\n</code></pre>  </div></div>\n\n<p>설치가 완료되면 다음의 명령으로 설치를 확인할 수 있다.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sqlite3\n</code></pre>  </div></div>\n\n<p><a href=\"https://sqlitestudio.pl/\">SQLite Studio 설치 페이지</a>에서 SQLite Studio를 설치한다. 설치 후 압축 파일의 압축을 해제하고, 설치된 폴더에서 다음의 명령을 수행하면 SQLite Studio가 실행된다.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./sqlitestduio\n</code></pre>  </div></div>\n\n<p><img src=\"sqlitestudio.png\" width=\"1000\" height=\"500\" /></p>\n\n<h2 id=\"3-tutorials\">3. Tutorials</h2>\n\n<h3 id=\"31-connect-to-database\">3.1 Connect to Database</h3>\n<p>다음은 <code class=\"language-plaintext highlighter-rouge\">test.db</code>라는 데이터베이스 파일을 open하여 연결하는 예제 코드이다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;stdio.h&gt;\n#include &lt;sqlite3.h&gt; \n</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">argv</span><span class=\"p\">[])</span> <span class=\"p\">{</span>\n   <span class=\"n\">sqlite3</span> <span class=\"o\">*</span><span class=\"n\">db</span><span class=\"p\">;</span>\n   <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">zErrMsg</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n   <span class=\"kt\">int</span> <span class=\"n\">rc</span><span class=\"p\">;</span>\n\n   <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">sqlite3_open</span><span class=\"p\">(</span><span class=\"s\">\"test.db\"</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">db</span><span class=\"p\">);</span>\n\n   <span class=\"k\">if</span><span class=\"p\">(</span> <span class=\"n\">rc</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">\"Can't open database: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">sqlite3_errmsg</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">));</span>\n      <span class=\"k\">return</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">\"Opened database successfully</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">sqlite3_close</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h3 id=\"32-create-a-table\">3.2 Create a Table</h3>\n<p>다음은 <code class=\"language-plaintext highlighter-rouge\">test.db</code> 파일에 테이블을 <code class=\"language-plaintext highlighter-rouge\">CREATE</code> 하는 예제 코드이다.\nsql을 보면, <code class=\"language-plaintext highlighter-rouge\">CREATE TABLE</code>이라는 명령을 이용하여 <code class=\"language-plaintext highlighter-rouge\">COMPANY</code>라는 테이블을 만들고 있음을 알 수 있다. 해당 테이블에는 <code class=\"language-plaintext highlighter-rouge\">INT</code>형 <code class=\"language-plaintext highlighter-rouge\">PRIMERY KEY</code>인 <code class=\"language-plaintext highlighter-rouge\">ID</code>, <code class=\"language-plaintext highlighter-rouge\">TEXT</code>인 <code class=\"language-plaintext highlighter-rouge\">NAME</code>, <code class=\"language-plaintext highlighter-rouge\">INT</code>형 <code class=\"language-plaintext highlighter-rouge\">AGE</code>, 길이가 50인 <code class=\"language-plaintext highlighter-rouge\">CHAR</code>형 <code class=\"language-plaintext highlighter-rouge\">ADDRESS</code>, float 형태인 <code class=\"language-plaintext highlighter-rouge\">REAL</code>인 <code class=\"language-plaintext highlighter-rouge\">SALARY</code>을 항목으로 가진다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sqlite3.h&gt; \n</span>\n<span class=\"k\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">NotUsed</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">azColName</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">argc</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%s = %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">azColName</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">?</span> <span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">:</span> <span class=\"s\">\"NULL\"</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n   <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">argv</span><span class=\"p\">[])</span> <span class=\"p\">{</span>\n   <span class=\"n\">sqlite3</span> <span class=\"o\">*</span><span class=\"n\">db</span><span class=\"p\">;</span>\n   <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">zErrMsg</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n   <span class=\"kt\">int</span> <span class=\"n\">rc</span><span class=\"p\">;</span>\n   <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">sql</span><span class=\"p\">;</span>\n\n   <span class=\"cm\">/* Open database */</span>\n   <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">sqlite3_open</span><span class=\"p\">(</span><span class=\"s\">\"test.db\"</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">db</span><span class=\"p\">);</span>\n   \n   <span class=\"k\">if</span><span class=\"p\">(</span> <span class=\"n\">rc</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">\"Can't open database: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">sqlite3_errmsg</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">));</span>\n      <span class=\"k\">return</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"s\">\"Opened database successfully</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"cm\">/* Create SQL statement */</span>\n   <span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"s\">\"CREATE TABLE COMPANY(\"</span>  \\\n      <span class=\"s\">\"ID INT PRIMARY KEY     NOT NULL,\"</span> \\\n      <span class=\"s\">\"NAME           TEXT    NOT NULL,\"</span> \\\n      <span class=\"s\">\"AGE            INT     NOT NULL,\"</span> \\\n      <span class=\"s\">\"ADDRESS        CHAR(50),\"</span> \\\n      <span class=\"s\">\"SALARY         REAL );\"</span><span class=\"p\">;</span>\n\n   <span class=\"cm\">/* Execute SQL statement */</span>\n   <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">sqlite3_exec</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">zErrMsg</span><span class=\"p\">);</span>\n   \n   <span class=\"k\">if</span><span class=\"p\">(</span> <span class=\"n\">rc</span> <span class=\"o\">!=</span> <span class=\"n\">SQLITE_OK</span> <span class=\"p\">){</span>\n      <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">\"SQL error: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">zErrMsg</span><span class=\"p\">);</span>\n      <span class=\"n\">sqlite3_free</span><span class=\"p\">(</span><span class=\"n\">zErrMsg</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"s\">\"Table created successfully</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">sqlite3_close</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">);</span>\n   <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h3 id=\"33-insert-operation\">3.3 INSERT Operation</h3>\n<p>다음은 <code class=\"language-plaintext highlighter-rouge\">test.db</code>에 새로운 값을 추가(<code class=\"language-plaintext highlighter-rouge\">INSERT</code>)하는 예제이다. sql을 보면, <code class=\"language-plaintext highlighter-rouge\">COMPANY</code> 테이블에 <code class=\"language-plaintext highlighter-rouge\">INSERT</code>를 하는데, <code class=\"language-plaintext highlighter-rouge\">ID</code>, <code class=\"language-plaintext highlighter-rouge\">NAME</code>, <code class=\"language-plaintext highlighter-rouge\">AGE</code>, <code class=\"language-plaintext highlighter-rouge\">ADDRESS</code>, <code class=\"language-plaintext highlighter-rouge\">SALARY</code> 항목을 묶어서 추가하는 것을 알 수 있다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sqlite3.h&gt; \n</span>\n<span class=\"k\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">NotUsed</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">azColName</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">argc</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%s = %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">azColName</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">?</span> <span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">:</span> <span class=\"s\">\"NULL\"</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n   <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">argv</span><span class=\"p\">[])</span> <span class=\"p\">{</span>\n   <span class=\"n\">sqlite3</span> <span class=\"o\">*</span><span class=\"n\">db</span><span class=\"p\">;</span>\n   <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">zErrMsg</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n   <span class=\"kt\">int</span> <span class=\"n\">rc</span><span class=\"p\">;</span>\n   <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">sql</span><span class=\"p\">;</span>\n\n   <span class=\"cm\">/* Open database */</span>\n   <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">sqlite3_open</span><span class=\"p\">(</span><span class=\"s\">\"test.db\"</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">db</span><span class=\"p\">);</span>\n   \n   <span class=\"k\">if</span><span class=\"p\">(</span> <span class=\"n\">rc</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">\"Can't open database: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">sqlite3_errmsg</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">));</span>\n      <span class=\"k\">return</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">\"Opened database successfully</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"cm\">/* Create SQL statement */</span>\n   <span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"s\">\"INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) \"</span>  \\\n         <span class=\"s\">\"VALUES (1, 'Paul', 32, 'California', 20000.00 ); \"</span> \\\n         <span class=\"s\">\"INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) \"</span>  \\\n         <span class=\"s\">\"VALUES (2, 'Allen', 25, 'Texas', 15000.00 ); \"</span>     \\\n         <span class=\"s\">\"INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)\"</span> \\\n         <span class=\"s\">\"VALUES (3, 'Teddy', 23, 'Norway', 20000.00 );\"</span> \\\n         <span class=\"s\">\"INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)\"</span> \\\n         <span class=\"s\">\"VALUES (4, 'Mark', 25, 'Rich-Mond ', 65000.00 );\"</span><span class=\"p\">;</span>\n\n   <span class=\"cm\">/* Execute SQL statement */</span>\n   <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">sqlite3_exec</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">zErrMsg</span><span class=\"p\">);</span>\n   \n   <span class=\"k\">if</span><span class=\"p\">(</span> <span class=\"n\">rc</span> <span class=\"o\">!=</span> <span class=\"n\">SQLITE_OK</span> <span class=\"p\">){</span>\n      <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">\"SQL error: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">zErrMsg</span><span class=\"p\">);</span>\n      <span class=\"n\">sqlite3_free</span><span class=\"p\">(</span><span class=\"n\">zErrMsg</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"s\">\"Records created successfully</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">sqlite3_close</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">);</span>\n   <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n</code></pre>  </div></div>\n\n<h3 id=\"34-select-operation\">3.4 SELECT Operation</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">SELECT</code>는 테이블의 영역을 선택하는 것으로 여기서는 <code class=\"language-plaintext highlighter-rouge\">test.db</code>의 <code class=\"language-plaintext highlighter-rouge\">COMPANY</code> 테이블의 데이터를 가져온다. 또한 <code class=\"language-plaintext highlighter-rouge\">callback()</code> 함수를 이용하여 가져온 데이터를 콘솔창에 띄워준다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sqlite3.h&gt; \n</span>\n<span class=\"k\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">azColName</span><span class=\"p\">){</span>\n   <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n   <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">\"%s: \"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">data</span><span class=\"p\">);</span>\n   \n   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">argc</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n      <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%s = %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">azColName</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">?</span> <span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">:</span> <span class=\"s\">\"NULL\"</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n   \n   <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n   <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">argv</span><span class=\"p\">[])</span> <span class=\"p\">{</span>\n   <span class=\"n\">sqlite3</span> <span class=\"o\">*</span><span class=\"n\">db</span><span class=\"p\">;</span>\n   <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">zErrMsg</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n   <span class=\"kt\">int</span> <span class=\"n\">rc</span><span class=\"p\">;</span>\n   <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">sql</span><span class=\"p\">;</span>\n   <span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"s\">\"Callback function called\"</span><span class=\"p\">;</span>\n\n   <span class=\"cm\">/* Open database */</span>\n   <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">sqlite3_open</span><span class=\"p\">(</span><span class=\"s\">\"test.db\"</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">db</span><span class=\"p\">);</span>\n   \n   <span class=\"k\">if</span><span class=\"p\">(</span> <span class=\"n\">rc</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">\"Can't open database: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">sqlite3_errmsg</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">));</span>\n      <span class=\"k\">return</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">\"Opened database successfully</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"cm\">/* Create SQL statement */</span>\n   <span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"s\">\"SELECT * from COMPANY\"</span><span class=\"p\">;</span>\n\n   <span class=\"cm\">/* Execute SQL statement */</span>\n   <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">sqlite3_exec</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">zErrMsg</span><span class=\"p\">);</span>\n   \n   <span class=\"k\">if</span><span class=\"p\">(</span> <span class=\"n\">rc</span> <span class=\"o\">!=</span> <span class=\"n\">SQLITE_OK</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">\"SQL error: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">zErrMsg</span><span class=\"p\">);</span>\n      <span class=\"n\">sqlite3_free</span><span class=\"p\">(</span><span class=\"n\">zErrMsg</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"s\">\"Operation done successfully</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">sqlite3_close</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">);</span>\n   <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h3 id=\"35-update-operation\">3.5 UPDATE Operation</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">UPDATE</code> 기존 TABLE에 있는 항목을 최신화하기 위해 사용된다. 다음은 <code class=\"language-plaintext highlighter-rouge\">test.db</code>의 <code class=\"language-plaintext highlighter-rouge\">COMPANY</code> 테이블을 업데이트 하는 예제이다. 여기서는 <code class=\"language-plaintext highlighter-rouge\">ID</code>가 1번인 항목에서 <code class=\"language-plaintext highlighter-rouge\">SALARY</code> 값을 변경시킨다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sqlite3.h&gt; \n</span>\n<span class=\"k\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">azColName</span><span class=\"p\">){</span>\n   <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n   <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">\"%s: \"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">data</span><span class=\"p\">);</span>\n   \n   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">argc</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%s = %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">azColName</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">?</span> <span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">:</span> <span class=\"s\">\"NULL\"</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n   <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">argv</span><span class=\"p\">[])</span> <span class=\"p\">{</span>\n   <span class=\"n\">sqlite3</span> <span class=\"o\">*</span><span class=\"n\">db</span><span class=\"p\">;</span>\n   <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">zErrMsg</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n   <span class=\"kt\">int</span> <span class=\"n\">rc</span><span class=\"p\">;</span>\n   <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">sql</span><span class=\"p\">;</span>\n   <span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"s\">\"Callback function called\"</span><span class=\"p\">;</span>\n\n   <span class=\"cm\">/* Open database */</span>\n   <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">sqlite3_open</span><span class=\"p\">(</span><span class=\"s\">\"test.db\"</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">db</span><span class=\"p\">);</span>\n   \n   <span class=\"k\">if</span><span class=\"p\">(</span> <span class=\"n\">rc</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">\"Can't open database: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">sqlite3_errmsg</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">));</span>\n      <span class=\"k\">return</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">\"Opened database successfully</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"cm\">/* Create merged SQL statement */</span>\n   <span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"s\">\"UPDATE COMPANY set SALARY = 25000.00 where ID=1; \"</span> \\\n         <span class=\"s\">\"SELECT * from COMPANY\"</span><span class=\"p\">;</span>\n\n   <span class=\"cm\">/* Execute SQL statement */</span>\n   <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">sqlite3_exec</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">zErrMsg</span><span class=\"p\">);</span>\n   \n   <span class=\"k\">if</span><span class=\"p\">(</span> <span class=\"n\">rc</span> <span class=\"o\">!=</span> <span class=\"n\">SQLITE_OK</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">\"SQL error: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">zErrMsg</span><span class=\"p\">);</span>\n      <span class=\"n\">sqlite3_free</span><span class=\"p\">(</span><span class=\"n\">zErrMsg</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"s\">\"Operation done successfully</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">sqlite3_close</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">);</span>\n   <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h3 id=\"36-delete-operation\">3.6 DELETE Operation</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">DELETE</code>는 테이블에서 특정 데이터 값을 삭제시키는 동작이며, 해당 예제는 <code class=\"language-plaintext highlighter-rouge\">test.db</code>의 <code class=\"language-plaintext highlighter-rouge\">COMPANY</code>테이블에서 <code class=\"language-plaintext highlighter-rouge\">ID</code>가 2인 데이터를 삭제하는 예제이다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sqlite3.h&gt; \n</span>\n<span class=\"k\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">azColName</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n   <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">\"%s: \"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">data</span><span class=\"p\">);</span>\n   \n   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">argc</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%s = %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">azColName</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">?</span> <span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">:</span> <span class=\"s\">\"NULL\"</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n   <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">argv</span><span class=\"p\">[])</span> <span class=\"p\">{</span>\n   <span class=\"n\">sqlite3</span> <span class=\"o\">*</span><span class=\"n\">db</span><span class=\"p\">;</span>\n   <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">zErrMsg</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n   <span class=\"kt\">int</span> <span class=\"n\">rc</span><span class=\"p\">;</span>\n   <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">sql</span><span class=\"p\">;</span>\n   <span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"s\">\"Callback function called\"</span><span class=\"p\">;</span>\n\n   <span class=\"cm\">/* Open database */</span>\n   <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">sqlite3_open</span><span class=\"p\">(</span><span class=\"s\">\"test.db\"</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">db</span><span class=\"p\">);</span>\n   \n   <span class=\"k\">if</span><span class=\"p\">(</span> <span class=\"n\">rc</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">\"Can't open database: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">sqlite3_errmsg</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">));</span>\n      <span class=\"k\">return</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">\"Opened database successfully</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"cm\">/* Create merged SQL statement */</span>\n   <span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"s\">\"DELETE from COMPANY where ID=2; \"</span> \\\n         <span class=\"s\">\"SELECT * from COMPANY\"</span><span class=\"p\">;</span>\n\n   <span class=\"cm\">/* Execute SQL statement */</span>\n   <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">sqlite3_exec</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">zErrMsg</span><span class=\"p\">);</span>\n   \n   <span class=\"k\">if</span><span class=\"p\">(</span> <span class=\"n\">rc</span> <span class=\"o\">!=</span> <span class=\"n\">SQLITE_OK</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">\"SQL error: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">zErrMsg</span><span class=\"p\">);</span>\n      <span class=\"n\">sqlite3_free</span><span class=\"p\">(</span><span class=\"n\">zErrMsg</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"s\">\"Operation done successfully</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">sqlite3_close</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">);</span>\n   <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n","dir":"/0004Tools/0002Knowledges/0005DB/","name":"0002SQLite.md","path":"0004Tools/0002Knowledges/0005DB/0002SQLite.md","url":"/0004Tools/0002Knowledges/0005DB/0002SQLite.html"},{"sort":2,"permalink":"/0004Tools/0002Knowledges/","layout":"default","title":"Knowledges","content":"<h1 id=\"knowledges\">Knowledges</h1>\n\n<ul>\n <li><a href=\"/0004Tools/0002Knowledges/0001CycloneDDS/\">CycloneDDS</a>\n <ul>\n <li><a href=\"/0004Tools/0002Knowledges/0001CycloneDDS/0001Install.html\">Install</a></li>\n <li><a href=\"/0004Tools/0002Knowledges/0001CycloneDDS/0002Tutorials.html\">Tutorials</a></li>\n <li><a href=\"/0004Tools/0002Knowledges/0001CycloneDDS/0003IDLC.html\">IDLC</a></li>\n <li><a href=\"/0004Tools/0002Knowledges/0001CycloneDDS/0004ROSCycloneDDS_intro.html\">ROS-CycloneDDS Introduce</a></li>\n <li><a href=\"/0004Tools/0002Knowledges/0001CycloneDDS/0005ROSCycloneDDS_code.html\">ROS-CycloneDDS Code</a></li>\n </ul>\n </li>\n <li><a href=\"/0004Tools/0002Knowledges/0002Docker/\">Docker</a></li>\n <li><a href=\"/0004Tools/0002Knowledges/0003TCPIP/\">TCP/IP</a></li>\n <li><a href=\"/0004Tools/0002Knowledges/0004RESTAPI/\">REST API</a>\n <ul>\n <li><a href=\"/0004Tools/0002Knowledges/0004RESTAPI/0001RESTAPI.html\">REST API</a></li>\n <li><a href=\"/0004Tools/0002Knowledges/0004RESTAPI/0002cpprestSDK.html\">C++ REST SDK</a></li>\n </ul>\n </li>\n <li><a href=\"/0004Tools/0002Knowledges/0005DB/\">DB</a>\n <ul>\n <li><a href=\"/0004Tools/0002Knowledges/0005DB/0001DB.html\">DB</a></li>\n <li><a href=\"/0004Tools/0002Knowledges/0005DB/0002SQLite.html\">SQLite</a></li>\n </ul>\n </li>\n <li><a href=\"/0004Tools/0002Knowledges/0006MQ/\">MQ</a></li>\n <li><a href=\"/0004Tools/0002Knowledges/0007MQTT/\">MQTT</a></li>\n <li><a href=\"/0004Tools/0002Knowledges/0008CMake/\">CMAKE</a></li>\n</ul>\n","dir":"/0004Tools/0002Knowledges/","name":"README.md","path":"0004Tools/0002Knowledges/README.md","url":"/0004Tools/0002Knowledges/"},{"sort":3,"layout":"default","title":"CMakeLists.txt","content":"<h1 id=\"cmakeliststxt\">CMakeLists.txt</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- <a href=\"http://wiki.ros.org/catkin/CMakeLists.txt\">CmakeLists.txt ros wiki page</a></em></p>\n\n<p><em>- <a href=\"https://cmake.org/\">CMake Main page</a></em></p>\n\n<h2 id=\"1-cmakeliststxt란\">1. CMakeLists.txt란?</h2>\n\n<p>해당 페이지는 <code class=\"language-plaintext highlighter-rouge\">CmakeLists.txt ros wiki page</code>의 내용을 주로 옮겨왔다.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">CMakeLists.txt</code>파일은 소프트웨어 패키지 빌드를 위한 <code class=\"language-plaintext highlighter-rouge\">CMake</code> 빌드 시스템의 입력 파일이다. <code class=\"language-plaintext highlighter-rouge\">CMake</code>와 호환되는 패키지는 하나 이상의 <code class=\"language-plaintext highlighter-rouge\">CMakeLists.txt</code> 파일을 가지며, 이 파일을 통해 어떻게 패키지 내의 코드를 빌드하고 어디에 설치할 지를 기술하게 된다.</p>\n\n<h2 id=\"2-cmake-버전\">2. CMake 버전</h2>\n<p>패키지를 빌드하기 위해 최소로 필요한 <code class=\"language-plaintext highlighter-rouge\">CMake</code> 버전을 입력한다. <code class=\"language-plaintext highlighter-rouge\">ROS 1.0</code>의 <code class=\"language-plaintext highlighter-rouge\">catkin</code>에서는 최소 2.8.3 이상을 필요로 한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cmake_minimum_required</span><span class=\"p\">(</span>VERSION 2.8.3<span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<h2 id=\"3-package-name\">3. Package Name</h2>\n<p>패키지 명을 project 함수를 통해 전달한다. 현재 패키지의 폴더 명과 동일해야 한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">project</span><span class=\"p\">(</span>[PACKAGE_NAME]<span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<h2 id=\"4-빌드에-필요한-cmake-패키지-찾기\">4. 빌드에 필요한 CMake 패키지 찾기</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">find_package()</code> 함수를 이용하여 패키지 빌드를 위해 필요한 다른 의존 패키지들을 입력한다.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">ROS 1.0</code>의 경우 <code class=\"language-plaintext highlighter-rouge\">catkin</code> 패키지가 필요하므로 항상 <code class=\"language-plaintext highlighter-rouge\">catkin</code> 패키지를 추가해야 한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">find_package</span><span class=\"p\">(</span>catkin REQUIRED<span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<p>또한 <code class=\"language-plaintext highlighter-rouge\">COMPONENTS</code> 인자를 통해 해당 패키지에서 가져올 부분을 다음 예시처럼 명시해주어야 한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">find_package</span><span class=\"p\">(</span>catkin REQUIRED COMPONENTS\n  roscpp\n  std_msgs\n  tf\n  ...\n<span class=\"p\">)</span>\n</code></pre>  </div></div>\n<p>이렇게 하면, 해당 패키지에 대한 헤더 파일 경로, 라이브러리 정보 등이 <code class=\"language-plaintext highlighter-rouge\">catkin_</code> 환경 변수에 적용될 것이다. 즉 <code class=\"language-plaintext highlighter-rouge\">catkin_INCLUDE_DIRS</code> 안에 각 <code class=\"language-plaintext highlighter-rouge\">catkin</code> 패키지에 대한 헤더 파일 경로 뿐 아니라, 각 패키지에 대한 환경변수도 생성이 된다. 이렇게 해두면 나중에 편리할 수 있다.</p>\n\n<p>물론 각각의 패키지에 대해서 <code class=\"language-plaintext highlighter-rouge\">find_package()</code> 함수를 사용할 수 있으며, 각 패키지에 대한 <code class=\"language-plaintext highlighter-rouge\">[PACKAGE_NAME]_INCLUDE_DIRS</code>, <code class=\"language-plaintext highlighter-rouge\">[PACKAGE_NAME]_LIBRARIES</code> 등과 같이 별도의 환경변수 세트가 생성된다.</p>\n\n<p>그 이외의 <code class=\"language-plaintext highlighter-rouge\">catkin</code> 패키지가 아닌 패키지들을 추가적으로 필요한 다른 의존성 패키지들을 추가하면 된다. 예를 들어 <code class=\"language-plaintext highlighter-rouge\">Boost</code> 패키지를 사용할 때, 다음과 같이 패키지를 추가해주어야 한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">find_package</span><span class=\"p\">(</span>Boost REQUIRED COMPONENTS\n  system\n<span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<h2 id=\"5-파이썬-모듈-지원-활성화\">5. 파이썬 모듈 지원 활성화</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">ROS</code> 패키지에 파이썬 모듈이 포함되는 경우(즉, <code class=\"language-plaintext highlighter-rouge\">rospy</code>를 사용하는 경우)에 사용된다. <code class=\"language-plaintext highlighter-rouge\">setup.py</code> 파일이 필요하며, 아래와 같은 호출이 <code class=\"language-plaintext highlighter-rouge\">CMakeLists.txt</code>에 추가되어야 하며, 그 위치는 <code class=\"language-plaintext highlighter-rouge\">generate_messages()</code>와 <code class=\"language-plaintext highlighter-rouge\">catkin_package()</code> 호출 전이어야 한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">catkin_python_setup</span><span class=\"p\">()</span>\n</code></pre>  </div></div>\n\n<h2 id=\"6-메세지-서비스-액션-타겟\">6. 메세지, 서비스, 액션 타겟</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">ROS</code>의 메시지 파일(<code class=\"language-plaintext highlighter-rouge\">.msg</code>), 서비스 파일(<code class=\"language-plaintext highlighter-rouge\">.srv</code>), 액션 파일(<code class=\"language-plaintext highlighter-rouge\">.action</code>)을 사용하려면 패키지 빌드 전에 이들 파일을 위한 특별한 전처리 빌드 단계가 필요하다. 매크로를 통해 사용하는 프로그래밍 언어에 적합한 형태로 메시지, 서비스, 액션을 전처리하게 된다. 빌드 시스템은 <code class=\"language-plaintext highlighter-rouge\">gencpp</code>, <code class=\"language-plaintext highlighter-rouge\">genpy</code>, <code class=\"language-plaintext highlighter-rouge\">genlisp</code> 등의 생성 도구를 이용하여 바인딩을 위한 전처리를 수행한다. 아래와 같이 매시지, 서비스, 액션 각각을 위한 세 개의 매크로가 제공된다.</p>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">add_message_files()</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">add_service_files()</code></li>\n <li><code class=\"language-plaintext highlighter-rouge\">add_action_files()</code></li>\n</ul>\n\n<p>ROS 메세지, 서비스, 액션을 생성하기 전에 먼저 <code class=\"language-plaintext highlighter-rouge\">find_package()</code> 에서 <code class=\"language-plaintext highlighter-rouge\">message_generation</code>을 불러와야 한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">find_package</span><span class=\"p\">(</span>catkin REQUIRED COMPONENTS\n  message_generation\n<span class=\"p\">)</span>\n</code></pre>  </div></div>\n<p>그 이외에도 메세지, 서비스, 액션 파일에 <code class=\"language-plaintext highlighter-rouge\">std_msgs</code>나 <code class=\"language-plaintext highlighter-rouge\">geometry_msgs</code>를 사용한다면, <code class=\"language-plaintext highlighter-rouge\">find_package()</code>에 추가해야 한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">find_package</span><span class=\"p\">(</span>catkin REQUIRED COMPONENTS\n  std_msgs\n  geometry_msgs\n  message_generation\n<span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<p>그 이후에, <code class=\"language-plaintext highlighter-rouge\">add_message_files()</code>, <code class=\"language-plaintext highlighter-rouge\">add_service_files()</code>, <code class=\"language-plaintext highlighter-rouge\">add_action_files()</code> 매크로를 이용해, 메세지, 서비스, 액션 파일을 추가한다. 여기서 <code class=\"language-plaintext highlighter-rouge\">FILES</code> 인자는 패키지 폴더의 각각 <code class=\"language-plaintext highlighter-rouge\">msg</code>, <code class=\"language-plaintext highlighter-rouge\">srv</code>, <code class=\"language-plaintext highlighter-rouge\">action</code> 폴더 아래의 <code class=\"language-plaintext highlighter-rouge\">.msg</code>, <code class=\"language-plaintext highlighter-rouge\">.srv</code>, <code class=\"language-plaintext highlighter-rouge\">.action</code> 파일들을 참조하도록 한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># 메세지 추가</span>\n<span class=\"nf\">add_message_files</span><span class=\"p\">(</span>\n   FILES\n   [MessageName_1.msg]\n   [MessageName_2.msg]\n   [MessageName_3.msg]\n   ...\n<span class=\"p\">)</span>\n<span class=\"c1\"># 서비스 추가</span>\n<span class=\"nf\">add_service_files</span><span class=\"p\">(</span>\n   FILES\n   [ServiceName_1.srv]\n   [ServiceName_2.srv]\n   [ServiceName_3.srv]\n   ...\n<span class=\"p\">)</span>\n<span class=\"c1\"># 액션 추가</span>\n<span class=\"nf\">add_action_files</span><span class=\"p\">(</span>\n   FILES\n   [ActionName_1.action]\n   [ActionName_2.action]\n   [ActionName_3.action]\n   ...\n<span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<p>매크로 이후에 <code class=\"language-plaintext highlighter-rouge\">generate_message()</code> 함수를 이용하여 메세지를 생성한다. 이 때, 의존성으로 필요한 <code class=\"language-plaintext highlighter-rouge\">ROS</code> 표준 메세지 타입이 있다면 추가해주어야 한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">generate_messages</span><span class=\"p\">(</span>\n  DEPENDENCIES\n  std_msgs\n  geometry_msgs\n<span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">generate_message()</code>를 수행한 다음에 <code class=\"language-plaintext highlighter-rouge\">catkin_package()</code>를 수행해야 하는데, <code class=\"language-plaintext highlighter-rouge\">catkin_package()</code>에서 <code class=\"language-plaintext highlighter-rouge\">CATKIN_DEPENDS</code>로 <code class=\"language-plaintext highlighter-rouge\">message_runtime</code>을 추가해야 한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">catkin_package</span><span class=\"p\">(</span>\n ...\n CATKIN_DEPENDS message_runtime ...\n ...\n<span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<h2 id=\"7-catkin_package\">7. catkin_package()</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">catkin_package()</code> 는 <code class=\"language-plaintext highlighter-rouge\">catkin</code>이 제공하는 <code class=\"language-plaintext highlighter-rouge\">CMake</code> 매크로 함수로 <code class=\"language-plaintext highlighter-rouge\">catkin</code> 관련 정보를 빌드 시스템에 전달하여 <code class=\"language-plaintext highlighter-rouge\">pkg-config</code>와 <code class=\"language-plaintext highlighter-rouge\">CMake</code> 파일을 생성하기 위해 필요하다. 이 함수는 반드시 <code class=\"language-plaintext highlighter-rouge\">add_library()</code> or <code class=\"language-plaintext highlighter-rouge\">add_executable()</code>로 빌드 타겟을 선언하기 전에 호출하여야 하며, 다음의 5 개의 선택가능한 인자를 가진다. 주로 <code class=\"language-plaintext highlighter-rouge\">CATKIN_DEPENDS</code>를 사용하는 것 같다.</p>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">INCLUDE_DIRS</code> - 패키지 내부 폴더인 <code class=\"language-plaintext highlighter-rouge\">include</code>의 헤더 파일을 사용하겠다는 설정</li>\n <li><code class=\"language-plaintext highlighter-rouge\">LIBRARIES</code> - 사용할 의존성 라이브러리를 설정</li>\n <li><code class=\"language-plaintext highlighter-rouge\">CATKIN_DEPENDS</code> - <code class=\"language-plaintext highlighter-rouge\">roscpp</code>나 <code class=\"language-plaintext highlighter-rouge\">std_msgs</code>와 같이 프로젝트가 의존성을 가진 다른 <code class=\"language-plaintext highlighter-rouge\">catkin</code> 프로젝트</li>\n <li><code class=\"language-plaintext highlighter-rouge\">DEPENDS</code> - 프로젝트가 의존성을 가진 <code class=\"language-plaintext highlighter-rouge\">Non-catkin CMake</code> 프로젝트</li>\n <li><code class=\"language-plaintext highlighter-rouge\">CFG_EXTRAS</code> - 기타 설정 옵션</li>\n</ul>\n\n<h2 id=\"8-빌드-타겟-정의\">8. 빌드 타겟 정의</h2>\n<p>빌드 타겟은 일반적으로 아래 두 가지 방법 중 하나를 선택한다.</p>\n<ul>\n <li>실행 파일 타겟 - 실행할 수 있는 프로그램 형태</li>\n <li>라이브러리 타겟 - 빌드나 실행시 실행 파일 타겟이 사용할 라이브러리</li>\n</ul>\n\n<h3 id=\"81-타겟-설정\">8.1 타겟 설정</h3>\n<p>*우선 <code class=\"language-plaintext highlighter-rouge\">catkin에서 빌드 타겟의 이름은 어느 폴더에 빌드/설치되느냐와 관계 없이 중복되지 않는 유일한 것이어야 한다. 이는 CMake의 규칙이다.* 타겟의 이름을 변경하고자 할때에는 아래와 같이 </code>set_target_properties()` 함수를 사용하면 된다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">set_target_properties</span><span class=\"p\">(</span>rviz_image_view\n                      PROPERTIES OUTPUT_NAME image_view\n                      PREFIX <span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n<p>이 명령은 타겟의 이름이 <code class=\"language-plaintext highlighter-rouge\">rviz_image_view</code>에서 <code class=\"language-plaintext highlighter-rouge\">image_view</code>로 변경되어 빌드/설치 결과물에 반영된다.</p>\n\n<h3 id=\"82-출력-디렉토리-설정\">8.2 출력 디렉토리 설정</h3>\n<p>실행 파일과 라이브러리를 위한 기본 출력 디렉토리가 정해져 있으나 특별한 경우 이를 원하는 대로 수정할 수 있다. 예로 파이썬 바인딩이 필요한 라이브러리의 경우 파이썬 <code class=\"language-plaintext highlighter-rouge\">import</code>가 가능한 폴더에 위치해야 할 수 있다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">set_target_properties</span><span class=\"p\">(</span>python_module_library\n  PROPERTIES LIBRARY_OUTPUT_DIRECTORY <span class=\"si\">${</span><span class=\"nv\">CATKIN_DEVEL_PREFIX</span><span class=\"si\">}</span>/<span class=\"si\">${</span><span class=\"nv\">CATKIN_PACKAGE_PYTHON_DESTINATION</span><span class=\"si\">}</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<h3 id=\"83-include-경로와-library-경로\">8.3 Include 경로와 Library 경로</h3>\n<p>타겟을 정의하기 전에 빌드에 필요한 헤더 파일이나 라이브러리 등의 경로에 대한 정보를 기술해 두어야 한다.</p>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">Include</code> 경로 - 코드 빌드를 위해 필요한 헤더 파일의 위치 지정</li>\n <li><code class=\"language-plaintext highlighter-rouge\">Library</code> 경로 - 실행 파일 타겟 빌드를 위해 필요한 라이브러리의 위치 지정</li>\n</ul>\n\n<h4 id=\"831-include_directories\">8.3.1 include_directories()</h4>\n<p><code class=\"language-plaintext highlighter-rouge\">include_directories()</code>의 인자는 앞서 <code class=\"language-plaintext highlighter-rouge\">find_package()</code> 호출 시 생성된 <code class=\"language-plaintext highlighter-rouge\">*_INCLUDE_DIRS</code> 환경 변수와 추가로 지정한 디렉토리 경로가 반영된다. 예를 들어, <code class=\"language-plaintext highlighter-rouge\">catkin</code>과 <code class=\"language-plaintext highlighter-rouge\">Boost</code>를 사용하는 경우, 아래와 같이 기술하면 된다. 여기서 맨 앞의 <code class=\"language-plaintext highlighter-rouge\">include</code>는 패키지 내부의 <code class=\"language-plaintext highlighter-rouge\">include</code> 폴더를 나타내며, 해당 경로를 추가해주어야 패키지 내부의 헤더파일들을 추가할 수 있다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">include_directories</span><span class=\"p\">(</span>include <span class=\"si\">${</span><span class=\"nv\">Boost_INCLUDE_DIRS</span><span class=\"si\">}</span> <span class=\"si\">${</span><span class=\"nv\">catkin_INCLUDE_DIRS</span><span class=\"si\">}</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<h4 id=\"832-link_directories\">8.3.2 link_directories()</h4>\n<p>라이브러리 경로를 추가하기 위해 <code class=\"language-plaintext highlighter-rouge\">CMake</code>의 <code class=\"language-plaintext highlighter-rouge\">link_directories()</code> 함수를 사용할 수 있으나, 추천되는 방법은 아니다. 왜냐하면 <code class=\"language-plaintext highlighter-rouge\">find_package()</code> 실행 시 모든 <code class=\"language-plaintext highlighter-rouge\">catkin</code>과 <code class=\"language-plaintext highlighter-rouge\">CMake</code> 패키지를 위한 <code class=\"language-plaintext highlighter-rouge\">link</code> 정보를 얻게 되기 때문이다. <code class=\"language-plaintext highlighter-rouge\">target_link_libraries()</code>를 이용하여 라이브러리를 링크하면 된다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">link_directories</span><span class=\"p\">(</span>~/my_libs<span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<h3 id=\"84-실행-파일-추가\">8.4 실행 파일 추가</h3>\n<p>빌드 후 생성할 실행 파일을 추가하기 위해 <code class=\"language-plaintext highlighter-rouge\">add_executable()</code> 함수를 사용한다. 다음 예시는 <code class=\"language-plaintext highlighter-rouge\">src/main.cpp</code>, <code class=\"language-plaintext highlighter-rouge\">src/some_file.cpp</code>, <code class=\"language-plaintext highlighter-rouge\">src/another_file.cpp</code>을 참조하여 <code class=\"language-plaintext highlighter-rouge\">myProgram</code>이라는 실행파일을 생성한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">add_executable</span><span class=\"p\">(</span>myProgram src/main.cpp src/some_file.cpp src/another_file.cpp<span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<h3 id=\"85-라이브러리-타겟-추가\">8.5 라이브러리 타겟 추가</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">add_library()</code> 함수를 이용하여 빌드 후 생성할 라이브러리를 선언한다. 기본적으로 <code class=\"language-plaintext highlighter-rouge\">catkin</code>은 공유 라이브러리로 빌드한다. 다음 예시는 현재 패키지에 포함되어있는 소스 코드들을 참조하여 <code class=\"language-plaintext highlighter-rouge\">PROJECT_NAME</code>의 이름으로 라이브러리를 생성한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">add_library</span><span class=\"p\">(</span><span class=\"si\">${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"si\">}</span> <span class=\"si\">${${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"si\">}</span><span class=\"nv\">_SRCS</span><span class=\"si\">}</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<h3 id=\"86-target_link_libraries\">8.6 target_link_libraries()</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">target_link_libraries()</code> 함수로 실행 파일 타겟과 링크될 라이브러리를 지정한다. 일반적으로 <code class=\"language-plaintext highlighter-rouge\">add_executable()</code> 또는 <code class=\"language-plaintext highlighter-rouge\">add_library()</code> 호출 이후에 위치하며, 만약 <code class=\"language-plaintext highlighter-rouge\">ros is not found</code> 라는 오류가 확인되면 <code class=\"language-plaintext highlighter-rouge\">${catkin_LIBRARIES}</code>를 추가한다.</p>\n\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">target_link_libraries</span><span class=\"p\">(</span>&lt;executableTargetName&gt;, &lt;lib1&gt;, &lt;lib2&gt;, ... &lt;libN&gt;<span class=\"p\">)</span>\n</code></pre>  </div></div>\n<p>여기서 <code class=\"language-plaintext highlighter-rouge\">&lt;executableTargetName&gt;</code>은 <code class=\"language-plaintext highlighter-rouge\">add_executable()</code> 또는 <code class=\"language-plaintext highlighter-rouge\">add_library()</code> 함수의 첫 번째 인자(<code class=\"language-plaintext highlighter-rouge\">executable name</code> or <code class=\"language-plaintext highlighter-rouge\">library name</code>)과 같다.</p>\n\n<h3 id=\"87-add_dependencies\">8.7 add_dependencies()</h3>\n<p>빌드하려는 패키지가 타겟하는 의존성 패키지에서 <code class=\"language-plaintext highlighter-rouge\">messages/services/actions</code>을 사용한다면, <code class=\"language-plaintext highlighter-rouge\">catkin_EXPORTED_TARGETS</code>에 대한 의존성을 추가해주어야 한다.(예시에서 <code class=\"language-plaintext highlighter-rouge\">some_target</code>은 <code class=\"language-plaintext highlighter-rouge\">add_executable()</code>로 설정한 실행 파일 타겟 이름이다)</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">add_dependencies</span><span class=\"p\">(</span>some_target <span class=\"si\">${</span><span class=\"nv\">catkin_EXPORTED_TARGETS</span><span class=\"si\">}</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<p>또한 빌드하려는 패키지가 <code class=\"language-plaintext highlighter-rouge\">message/services/actions</code>을 사용한다면 역시 다음과 같이 의존성을 추가해주어야 한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">add_dependencies</span><span class=\"p\">(</span>some_target <span class=\"si\">${${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"si\">}</span><span class=\"nv\">_EXPORTED_TARGETS</span><span class=\"si\">}</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<p>만약 두 가지의 경우 모두 해당한다면, 다음과 같이 사용하며, 대부분의 <code class=\"language-plaintext highlighter-rouge\">ROS</code> 패키지에서는 해당 함수를 사용하게 된다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">add_dependencies</span><span class=\"p\">(</span>some_target <span class=\"si\">${${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"si\">}</span><span class=\"nv\">_EXPORTED_TARGETS</span><span class=\"si\">}</span> <span class=\"si\">${</span><span class=\"nv\">catkin_EXPORTED_TARGETS</span><span class=\"si\">}</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<h2 id=\"9-install\">9. install</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">workspace</code> 내의 <code class=\"language-plaintext highlighter-rouge\">build</code> 영역에 설치할 디렉토리를 설정한다. <code class=\"language-plaintext highlighter-rouge\">DIRECTORY</code> 인자 뒤에 설치할 디렉토리들을 선정하고, <code class=\"language-plaintext highlighter-rouge\">DESTINATION</code> 인자 뒤에는 설치 경로, 즉 공유할 경로를 설정하면 된다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">install</span><span class=\"p\">(</span>DIRECTORY launch rviz ...\n\tDESTINATION <span class=\"si\">${</span><span class=\"nv\">CATKIN_PACKAGE_SHARE_DESTINATION</span><span class=\"si\">}</span>\n<span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<p>실행 가능한 <code class=\"language-plaintext highlighter-rouge\">Python</code> 스크립트를 설치하는 경우에는 <code class=\"language-plaintext highlighter-rouge\">catkin_install_python()</code>을 사용한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">catkin_install_python</span><span class=\"p\">(</span>PROGRAMS scripts/test_script\n     DESTINATION <span class=\"si\">${</span><span class=\"nv\">CATKIN_PACKAGE_BIN_DESTINATION</span><span class=\"si\">}</span>\n<span class=\"p\">)</span>\n</code></pre>  </div></div>\n","dir":"/0001ROS/0001ROS1/0001Basic/","name":"0003CMakeList.md","path":"0001ROS/0001ROS1/0001Basic/0003CMakeList.md","url":"/0001ROS/0001ROS1/0001Basic/0003CMakeList.html"},{"sort":3,"layout":"default","title":"actionlib beginner tutorials(python)","content":"<h1 id=\"actionlib-beginner-tutorialspython\">actionlib beginner tutorials(python)</h1>\n\n<p><em>- <a href=\"http://wiki.ros.org/actionlib/Tutorials\">actionlib tutorials 위키 페이지</a></em></p>\n\n<h2 id=\"1-writing-a-simple-action-server-using-the-execute-callback\">1. Writing a Simple Action Server using the Execute Callback</h2>\n\n<h3 id=\"11-creating-the-action-messages\">1.1 Creating the Action Messages</h3>\n<p>이는 C++과 동일하므로 <a href=\"/0001ROS1/0002Intermediate/0002actionlibBeginnerTutorials_cpp.html/\">actionlib beginner tutorials(c++)</a>의 1.1을 참고한다.</p>\n\n<h3 id=\"12-writing-a-simple-server\">1.2 Writing a Simple Server</h3>\n<h4 id=\"121-the-code\">1.2.1 The Code</h4>\n<p>다음은 actionlib_tutorials/simple_action_servers/fibonacci_server.py 부분이다.</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#! /usr/bin/env python\n</span>\n<span class=\"kn\">import</span> <span class=\"nn\">rospy</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">actionlib</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">actionlib_tutorials.msg</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">FibonacciAction</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"c1\"># create messages that are used to publish feedback/result\n</span>    <span class=\"n\">_feedback</span> <span class=\"o\">=</span> <span class=\"n\">actionlib_tutorials</span><span class=\"p\">.</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">FibonacciFeedback</span><span class=\"p\">()</span>\n    <span class=\"n\">_result</span> <span class=\"o\">=</span> <span class=\"n\">actionlib_tutorials</span><span class=\"p\">.</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">FibonacciResult</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_action_name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_as</span> <span class=\"o\">=</span> <span class=\"n\">actionlib</span><span class=\"p\">.</span><span class=\"n\">SimpleActionServer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_action_name</span><span class=\"p\">,</span> <span class=\"n\">actionlib_tutorials</span><span class=\"p\">.</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">FibonacciAction</span><span class=\"p\">,</span> <span class=\"n\">execute_cb</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">execute_cb</span><span class=\"p\">,</span> <span class=\"n\">auto_start</span> <span class=\"o\">=</span> <span class=\"bp\">False</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_as</span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n      \n    <span class=\"k\">def</span> <span class=\"nf\">execute_cb</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">goal</span><span class=\"p\">):</span>\n        <span class=\"c1\"># helper variables\n</span>        <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">Rate</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n        \n        <span class=\"c1\"># append the seeds for the fibonacci sequence\n</span>        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_feedback</span><span class=\"p\">.</span><span class=\"n\">sequence</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_feedback</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_feedback</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        \n        <span class=\"c1\"># publish info to the console for the user\n</span>        <span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">loginfo</span><span class=\"p\">(</span><span class=\"s\">'%s: Executing, creating fibonacci sequence of order %i with seeds %i, %i'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_action_name</span><span class=\"p\">,</span> <span class=\"n\">goal</span><span class=\"p\">.</span><span class=\"n\">order</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_feedback</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_feedback</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n        \n        <span class=\"c1\"># start executing the action\n</span>        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">goal</span><span class=\"p\">.</span><span class=\"n\">order</span><span class=\"p\">):</span>\n            <span class=\"c1\"># check that preempt has not been requested by the client\n</span>            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_as</span><span class=\"p\">.</span><span class=\"n\">is_preempt_requested</span><span class=\"p\">():</span>\n                <span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">loginfo</span><span class=\"p\">(</span><span class=\"s\">'%s: Preempted'</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_action_name</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_as</span><span class=\"p\">.</span><span class=\"n\">set_preempted</span><span class=\"p\">()</span>\n                <span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n                <span class=\"k\">break</span>\n            <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_feedback</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_feedback</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_feedback</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"c1\"># publish the feedback\n</span>            <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_as</span><span class=\"p\">.</span><span class=\"n\">publish_feedback</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_feedback</span><span class=\"p\">)</span>\n            <span class=\"c1\"># this step is not necessary, the sequence is computed at 1 Hz for demonstration purposes\n</span>            <span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">sleep</span><span class=\"p\">()</span>\n          \n        <span class=\"k\">if</span> <span class=\"n\">success</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_result</span><span class=\"p\">.</span><span class=\"n\">sequence</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_feedback</span><span class=\"p\">.</span><span class=\"n\">sequence</span>\n            <span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">loginfo</span><span class=\"p\">(</span><span class=\"s\">'%s: Succeeded'</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_action_name</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_as</span><span class=\"p\">.</span><span class=\"n\">set_succeeded</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_result</span><span class=\"p\">)</span>\n        \n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">init_node</span><span class=\"p\">(</span><span class=\"s\">'fibonacci'</span><span class=\"p\">)</span>\n    <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">FibonacciAction</span><span class=\"p\">(</span><span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">get_name</span><span class=\"p\">())</span>\n    <span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">spin</span><span class=\"p\">()</span>\n</code></pre>  </div></div>\n<h4 id=\"122-the-code-explained\">1.2.2 The Code, explained</h4>\n<ul>\n <li>actionlib 라이브러리를 가져온다.\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">actionlib</span>\n</code></pre>  </div> </div>\n </li>\n <li>앞서 만든 <code class=\"language-plaintext highlighter-rouge\">.action</code>에 의해 빌드시 생성된 메세지들을 가져온다.\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">actionlib_tutorials.msg</span>\n</code></pre>  </div> </div>\n </li>\n <li>action server로 <code class=\"language-plaintext highlighter-rouge\">SimpleActionServer</code>가 생성이 되고, <code class=\"language-plaintext highlighter-rouge\">_action_name</code>은 action을 주고 받을 때 사용할 이름을 나타내고, <code class=\"language-plaintext highlighter-rouge\">actionlib_tutorials.msg.FibonacciAction</code>과 같이 action type과 실행하기 위한 콜백함수(선택사항)을 인자로 선언한다. 이 콜백함수는 새로운 <code class=\"language-plaintext highlighter-rouge\">goal</code>이 들어올 때마다 수행되도록 thread가 생성된다. 그리고 <code class=\"language-plaintext highlighter-rouge\">auto_start</code>는 무엇이 수행되고 있는지 모르는 경우에는 항상 <code class=\"language-plaintext highlighter-rouge\">False</code>로 두어야 한다.\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>      <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_as</span> <span class=\"o\">=</span> <span class=\"n\">actionlib</span><span class=\"p\">.</span><span class=\"n\">SimpleActionServer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_action_name</span><span class=\"p\">,</span> <span class=\"n\">actionlib_tutorials</span><span class=\"p\">.</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">FibonacciAction</span><span class=\"p\">,</span> <span class=\"n\">execute_cb</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">execute_cb</span><span class=\"p\">,</span> <span class=\"n\">auto_start</span> <span class=\"o\">=</span> <span class=\"bp\">False</span><span class=\"p\">)</span>\n      <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_as</span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</code></pre>  </div> </div>\n </li>\n <li><code class=\"language-plaintext highlighter-rouge\">execute_cb</code> 콜백함수를 선언하며, <code class=\"language-plaintext highlighter-rouge\">_feedback.sequence</code>를 초기화 한다.\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"k\">def</span> <span class=\"nf\">execute_cb</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">goal</span><span class=\"p\">):</span>\n      <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">Rate</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n      <span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n        \n      <span class=\"c1\"># append the seeds for the fibonacci sequence\n</span>      <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_feedback</span><span class=\"p\">.</span><span class=\"n\">sequence</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n      <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_feedback</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n      <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_feedback</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        \n      <span class=\"c1\"># publish info to the console for the user\n</span>      <span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">loginfo</span><span class=\"p\">(</span><span class=\"s\">'%s: Executing, creating fibonacci sequence of order %i with seeds %i, %i'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_action_name</span><span class=\"p\">,</span> <span class=\"n\">goal</span><span class=\"p\">.</span><span class=\"n\">order</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_feedback</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_feedback</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n</code></pre>  </div> </div>\n </li>\n <li>client로부터 요청받은 <code class=\"language-plaintext highlighter-rouge\">goal</code>을 수행하며, 수행 도중 새로운 action이 요청되면 <code class=\"language-plaintext highlighter-rouge\">is_preempt_requested()</code>가 호출되어 현재 <code class=\"language-plaintext highlighter-rouge\">goal</code>에 대한 수행이 중단되고, 새로운 <code class=\"language-plaintext highlighter-rouge\">goal</code>에 대한 작업을 수행한다.\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>      <span class=\"c1\"># start executing the action\n</span>      <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">goal</span><span class=\"p\">.</span><span class=\"n\">order</span><span class=\"p\">):</span>\n          <span class=\"c1\"># check that preempt has not been requested by the client\n</span>          <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_as</span><span class=\"p\">.</span><span class=\"n\">is_preempt_requested</span><span class=\"p\">():</span>\n              <span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">loginfo</span><span class=\"p\">(</span><span class=\"s\">'%s: Preempted'</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_action_name</span><span class=\"p\">)</span>\n              <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_as</span><span class=\"p\">.</span><span class=\"n\">set_preempted</span><span class=\"p\">()</span>\n              <span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n</code></pre>  </div> </div>\n </li>\n <li>피보나치 수열을 담은 <code class=\"language-plaintext highlighter-rouge\">_feedback</code> 변수를 action server를 통해 publish하며, 이는 for문을 돌며 지속적으로 feedback 된다.\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>          <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_feedback</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_feedback</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_feedback</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n          <span class=\"c1\"># publish the feedback\n</span>          <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_as</span><span class=\"p\">.</span><span class=\"n\">publish_feedback</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_feedback</span><span class=\"p\">)</span>\n</code></pre>  </div> </div>\n </li>\n <li>모든 작업이 종료되고, <code class=\"language-plaintext highlighter-rouge\">success</code>가 <code class=\"language-plaintext highlighter-rouge\">true</code>상태라면 action server를 통해 <code class=\"language-plaintext highlighter-rouge\">_result</code> 변수를 publish 한다.\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>      <span class=\"k\">if</span> <span class=\"n\">success</span><span class=\"p\">:</span>\n          <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_result</span><span class=\"p\">.</span><span class=\"n\">sequence</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_feedback</span><span class=\"p\">.</span><span class=\"n\">sequence</span>\n          <span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">loginfo</span><span class=\"p\">(</span><span class=\"s\">'%s: Succeeded'</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_action_name</span><span class=\"p\">)</span>\n          <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_as</span><span class=\"p\">.</span><span class=\"n\">set_succeeded</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_result</span><span class=\"p\">)</span>\n</code></pre>  </div> </div>\n </li>\n <li>main 함수는 노드 초기화 및 <code class=\"language-plaintext highlighter-rouge\">FibonacciAction</code>을 실행한다.\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n  <span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">init_node</span><span class=\"p\">(</span><span class=\"s\">'fibonacci'</span><span class=\"p\">)</span>\n  <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">FibonacciAction</span><span class=\"p\">(</span><span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">get_name</span><span class=\"p\">())</span>\n  <span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">spin</span><span class=\"p\">()</span>\n</code></pre>  </div> </div>\n </li>\n</ul>\n\n<h2 id=\"2-writing-a-simple-action-client\">2. Writing a Simple Action Client</h2>\n\n<h3 id=\"21-the-code\">2.1 The Code</h3>\n<p>다음은 actionlib_tutorials/simple_action_servers/fibonacci_client.py 부분이다.</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#! /usr/bin/env python\n</span>\n<span class=\"kn\">import</span> <span class=\"nn\">rospy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n\n<span class=\"c1\"># Brings in the SimpleActionClient\n</span><span class=\"kn\">import</span> <span class=\"nn\">actionlib</span>\n\n<span class=\"c1\"># Brings in the messages used by the fibonacci action, including the\n# goal message and the result message.\n</span><span class=\"kn\">import</span> <span class=\"nn\">actionlib_tutorials.msg</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">fibonacci_client</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Creates the SimpleActionClient, passing the type of the action\n</span>    <span class=\"c1\"># (FibonacciAction) to the constructor.\n</span>    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">actionlib</span><span class=\"p\">.</span><span class=\"n\">SimpleActionClient</span><span class=\"p\">(</span><span class=\"s\">'fibonacci'</span><span class=\"p\">,</span> <span class=\"n\">actionlib_tutorials</span><span class=\"p\">.</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">FibonacciAction</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Waits until the action server has started up and started\n</span>    <span class=\"c1\"># listening for goals.\n</span>    <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">wait_for_server</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Creates a goal to send to the action server.\n</span>    <span class=\"n\">goal</span> <span class=\"o\">=</span> <span class=\"n\">actionlib_tutorials</span><span class=\"p\">.</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">FibonacciGoal</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Sends the goal to the action server.\n</span>    <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">send_goal</span><span class=\"p\">(</span><span class=\"n\">goal</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Waits for the server to finish performing the action.\n</span>    <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">wait_for_result</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Prints out the result of executing the action\n</span>    <span class=\"k\">return</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get_result</span><span class=\"p\">()</span>  <span class=\"c1\"># A FibonacciResult\n</span>\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Initializes a rospy node so that the SimpleActionClient can\n</span>        <span class=\"c1\"># publish and subscribe over ROS.\n</span>        <span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">init_node</span><span class=\"p\">(</span><span class=\"s\">'fibonacci_client_py'</span><span class=\"p\">)</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">fibonacci_client</span><span class=\"p\">()</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Result:\"</span><span class=\"p\">,</span> <span class=\"s\">', '</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">sequence</span><span class=\"p\">]))</span>\n    <span class=\"k\">except</span> <span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">ROSInterruptException</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"program interrupted before completion\"</span><span class=\"p\">,</span> <span class=\"nb\">file</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<h3 id=\"22-the-code-explained\">2.2 The Code, explained</h3>\n<ul>\n <li>앞서 만든 <code class=\"language-plaintext highlighter-rouge\">.action</code>에 의해 빌드시 생성된 메세지들을 가져온다.\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">actionlib_tutorials.msg</span>\n</code></pre>  </div> </div>\n </li>\n <li>SimpleActionClient는 client와 server가 주고받을 action 이름을 정의하고, 메세지 타입을 정의한다.\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">actionlib</span><span class=\"p\">.</span><span class=\"n\">SimpleActionClient</span><span class=\"p\">(</span><span class=\"s\">'fibonacci'</span><span class=\"p\">,</span> <span class=\"n\">actionlib_tutorials</span><span class=\"p\">.</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">FibonacciAction</span><span class=\"p\">)</span>\n</code></pre>  </div> </div>\n </li>\n <li>action server가 수행될 때까지 기다리도록 <code class=\"language-plaintext highlighter-rouge\">wait_for_server()</code> 함수를 수행한다.\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">wait_for_server</span><span class=\"p\">()</span>\n</code></pre>  </div> </div>\n </li>\n <li><code class=\"language-plaintext highlighter-rouge\">goal</code>을 설정하고 <code class=\"language-plaintext highlighter-rouge\">send_goal()</code> 함수를 통해 goal을 요청한다.\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"c1\"># Creates a goal to send to the action server.\n</span>  <span class=\"n\">goal</span> <span class=\"o\">=</span> <span class=\"n\">actionlib_tutorials</span><span class=\"p\">.</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">FibonacciGoal</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># Sends the goal to the action server.\n</span>  <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">send_goal</span><span class=\"p\">(</span><span class=\"n\">goal</span><span class=\"p\">)</span>\n</code></pre>  </div> </div>\n </li>\n <li><code class=\"language-plaintext highlighter-rouge\">wait_for_result()</code>함수는 action server로 goal을 요청하고 결과를 콜백 받을 때까지 기다리며, 서버가 결과를 보내오면 client를 종료한다.\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"c1\"># Waits for the server to finish performing the action.\n</span>  <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">wait_for_result</span><span class=\"p\">()</span>\n\n  <span class=\"c1\"># Prints out the result of executing the action\n</span>  <span class=\"k\">return</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">get_result</span><span class=\"p\">()</span>  <span class=\"c1\"># A FibonacciResult\n</span></code></pre>  </div> </div>\n </li>\n</ul>\n","dir":"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/","name":"0003actionlibBeginnerTutorials_python.md","path":"0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0003actionlibBeginnerTutorials_python.md","url":"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0003actionlibBeginnerTutorials_python.html"},{"sort":3,"permalink":"/0001ROS/0001ROS1/0002Intermediate/0003rosdistro/","layout":"default","title":"rosdistro","content":"<h1 id=\"rosdistro\">rosdistro</h1>\n\n","dir":"/0001ROS/0001ROS1/0002Intermediate/0003rosdistro/","name":"README.md","path":"0001ROS/0001ROS1/0002Intermediate/0003rosdistro/README.md","url":"/0001ROS/0001ROS1/0002Intermediate/0003rosdistro/"},{"sort":3,"layout":"default","title":"Odometry","content":"<h1 id=\"odometry\">Odometry</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n\n<p><em>- <a href=\"http://wiki.ros.org/navigation/Tutorials/RobotSetup/Odom\">Publishing Odometry Information over ROS</a></em></p>\n","dir":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/","name":"0003Odometry.md","path":"0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0003Odometry.md","url":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0003Odometry.html"},{"sort":3,"layout":"default","title":"dwa_local_planner","content":"<h1 id=\"dwa_local_planner\">dwa_local_planner</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n\n<p><em>- <a href=\"http://wiki.ros.org/dwa_local_planner?distro=noetic\">dwa_local_planner 위키 페이지</a></em></p>\n\n<h2 id=\"1-dwa_local_planner\">1. dwa_local_planner</h2>\n<p><img src=\"dwa.png\" width=\"800\" height=\"400\" /></p>\n\n<p>주어진 글로벌 플래너를 따르기 위한 속도 명령을 생성하는 패키지로, nav_core 패키지의 BaseLocalPlanner 인터페이스를 준수한다.\n로컬 플래너는 로봇 주위에 그리드 형태의 가치 맵을 생성하고, 샘플링 타임 동안의 dx,dy,dth를 이용한 시뮬레이션을 통해 가장 높은 점수를 받은 속도 명령(dx,dy,dth)를 내린다.</p>\n\n<ul>\n <li>dwa 참조 문서\n <ol>\n <li><a href=\"http://www.cs.washington.edu/ai/Mobile_Robotics/postscripts/colli-ieee.ps.gz\">D. Fox, W. Burgard, and S. Thrun. “The dynamic window approach to collision avoidance”. The Dynamic Window Approach to local control.</a></li>\n <li><a href=\"http://www.ri.cmu.edu/pub_files/pub1/kelly_alonzo_1994_7/kelly_alonzo_1994_7.pdf\">Alonzo Kelly. “An Intelligent Predictive Controller for Autonomous Vehicles”. A previous system that takes a similar approach to control.</a></li>\n <li><a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.330.2120&amp;rep=rep1&amp;type=pdf\">Brian P. Gerkey and Kurt Konolige. “Planning and Control in Unstructured Terrain “. Discussion of the Trajectory Rollout algorithm in use on the LAGR robot.</a></li>\n </ol>\n </li>\n</ul>\n\n<h2 id=\"2-dwaplannerros\">2. DWAPlannerROS</h2>\n<p>dwa_local_planner::DWAPlannerROS는 dwa_local_planner::DWAPlanner의 C++ ROS로 래핑한 개체로, nav_core::BaseLocalPlanner 인터페이스를 기반으로 한다.</p>\n\n<h2 id=\"3-published-topics\">3. Published Topics</h2>\n<ol>\n <li>~[name]/global_plan(<a href=\"http://docs.ros.org/en/api/nav_msgs/html/msg/Path.html\">nav_msgs/Path</a>) : local planner가 따르기 위한 global plan 경로, 주로 시각화 목적으로 사용</li>\n <li>~[name]/local_plan(<a href=\"http://docs.ros.org/en/api/nav_msgs/html/msg/Path.html\">nav_msgs/Path</a>) : 가장 마지막 사이클에 생성된 local plan 경로, 주로 시각화 목적으로 사용</li>\n</ol>\n\n<h2 id=\"4-subscribed-topics\">4. Subscribed Topics</h2>\n<ol>\n <li>odom (<a href=\"http://docs.ros.org/en/api/nav_msgs/html/msg/Odometry.html\">nav_msgs/Odometry</a>) : planner에 로봇의 현재 속도를 제공</li>\n</ol>\n\n<h2 id=\"5-parameters\">5. Parameters</h2>\n<p>dwa은 parameter 설정에 따라 커스터마이징 할 수 있다. 자세한 parameter 내용은 <a href=\"http://wiki.ros.org/dwa_local_planner?distro=noetic\">dwa_local_planner 위키 페이지</a> 및 <a href=\"http://wiki.ros.org/navigation/Tutorials/Navigation%20Tuning%20Guide\">Navigation Tunning Guide 위키 페이지</a>를 참조</p>\n\n<blockquote>\n <p><a href=\"https://docs.ros.org/en/api/dwa_local_planner/html/classdwa__local__planner_1_1DWAPlannerROS.html\">DWAPlannerROS C++ API doc</a></p>\n</blockquote>\n","dir":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/","name":"0003DWALocalPlanner.md","path":"0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0003DWALocalPlanner.md","url":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0003DWALocalPlanner.html"},{"sort":3,"permalink":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/03MoveBaseFlex/","layout":"default","title":"MoveBaseFlex","content":"<h1 id=\"movebaseflex\">MoveBaseFlex</h1>\n\n","dir":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/03MoveBaseFlex/","name":"README.md","path":"0001ROS/0001ROS1/0003Advanced/0001Navigation/03MoveBaseFlex/README.md","url":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/03MoveBaseFlex/"},{"sort":3,"layout":"default","title":"Developing Basic States","content":"<h1 id=\"developing-basic-states\">Developing Basic States</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n\n<p><em>- <a href=\"http://philserver.bplaced.net/fbe/\">FlexBe 홈페이지</a></em></p>\n\n<p><em>- <a href=\"http://wiki.ros.org/flexbe/Tutorials\">FlexBe Tutorials ROS 위키 페이지</a></em></p>\n\n<p><em>- <a href=\"http://wiki.ros.org/flexbe/Tutorials/Developing%20Basic%20States\">FlexBe Tutorials Developing Basic States ROS 위키 페이지</a></em></p>\n\n<h2 id=\"1-state\">1. State</h2>\n\n<h3 id=\"11-state-class-생성\">1.1 State class 생성</h3>\n<p>States는 Python으로 적상되며, state의 클래스는 EventState 클래스를 상속받아 만든다. 여기서 Logger는 FlexBE의 log 메세지를 나타내기 위해 사용된다.</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">flexbe_core</span> <span class=\"kn\">import</span> <span class=\"n\">EventState</span><span class=\"p\">,</span> <span class=\"n\">Logger</span>\n</code></pre>  </div></div>\n\n<p>EventState 클래스의 생성자는 다음과 같다</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">target_time</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">ExampleState</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">).</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"n\">outcomes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'continue'</span><span class=\"p\">,</span> <span class=\"s\">'failed'</span><span class=\"p\">])</span>\n\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_target_time</span> <span class=\"o\">=</span> <span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">Duration</span><span class=\"p\">(</span><span class=\"n\">target_time</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_start_time</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n</code></pre>  </div></div>\n<p>생성자를 통해서 변수을 선언하고, proxy를 초기화 한다. 특히 생성자의 superclass의 생성자를 호출해야 하는데, superclass는 다음의 세 가지의 인수를 사용한다.</p>\n<ul>\n <li>outcomes(required) : 해당 state가 리턴하는 값들의 리스트로, 해당 값에 따라 다음 state를 선택할 수 있다.</li>\n <li>input_keys(optional) : 해당 state에 필요한 userdata의 리스트로, 이전 state로부터 받은 input_keys 값들을 userdata에 선언되어 있어 접근할 수 있다.</li>\n <li>output_keys(optional) : 해당 state에 의해 제공되는 userdata의 리스트로, 다음 state가 해당 state에서 생성된 output_keys값들을 받을 수 있다.</li>\n <li>input key는 read만 할 수있고, output key는 write만 할 수 있음.\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">my_value</span> <span class=\"o\">=</span> <span class=\"n\">userdata</span><span class=\"p\">.</span><span class=\"n\">my_defined_input_key</span>\n<span class=\"n\">userdata</span><span class=\"p\">.</span><span class=\"n\">my_defined_output_key</span> <span class=\"o\">=</span> <span class=\"n\">my_value</span>\n</code></pre>  </div> </div>\n </li>\n</ul>\n\n<p>Execution loop는 <code class=\"language-plaintext highlighter-rouge\">execute</code> 함수에 의해 실행되며, state가 활성 상태에 있는 동안에 주기적으로 실행된다(default: 10hz). <code class=\"language-plaintext highlighter-rouge\">execute</code>함수는 <code class=\"language-plaintext highlighter-rouge\">outcomes</code>에 해당하는 리스트 중 어떤 값을 리턴할 지 정하게 되는데, 예를 들어 위의 예에서 조건이 충족되지 않아 리턴이 되지 않는 경우, 계속 활성 상태에 있게 된다.</p>\n\n<p>또한 <code class=\"language-plaintext highlighter-rouge\">execute</code>함수는 <code class=\"language-plaintext highlighter-rouge\">userdata</code>를 인자로 받는데, 이 변수는 생성자에 정의된 <code class=\"language-plaintext highlighter-rouge\">input/output key</code>에 접근할 수 있도록 한다.</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">userdata</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">Time</span><span class=\"p\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_start_time</span> <span class=\"o\">&lt;</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_target_time</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"s\">'continue'</span>\n</code></pre>  </div></div>\n\n<h3 id=\"12-event-callbacks\">1.2 Event Callbacks</h3>\n<p><a href=\"http://wiki.ros.org/flexbe/Tutorials/The%20State%20Lifecycle\">Events 정의 사이트</a>에서 세부 내용을 확인할 수 있다. State는 특정 이벤트를 호출하기 위한 몇 가지 추가 함수를 제공한다.</p>\n<ul>\n <li>on_start : 동작이 시작될 때 트리거 되나, 일반적으로 생성자가 해당 역할을 하므로 해당 이벤트는 잘 사용되지 않는다. 만약 behavior가 실패하는 경우 해당 이벤트는 동작하지 않기 때문에 생성자를 사용하는 것이 더 좋다.\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">on_start</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n</code></pre>  </div> </div>\n </li>\n <li>on_enter : state가 활성 상태로 활성화 될 때 한 번 호출되며, 일반적으로 변수를 초기 값으로 설정하거나 action goal을 보낼 때 사용된다.\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">on_enter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">userdata</span><span class=\"p\">):</span>\n</code></pre>  </div> </div>\n </li>\n <li>on_exit :결과가 반환되고 다른 state가 활성화될 때 트리거된다. on_enter에 의해 시작된 실행 프로세스를 중지하는 데 사용할 수 있다.\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">on_exit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">userdata</span><span class=\"p\">):</span>\n</code></pre>  </div> </div>\n </li>\n <li>on_stop : behavior가 중지 또는 취소 될 때 트리거된다. 이 이벤트를 사용하여 state가 활성되지 않더라도 요청되거나 실행중인 state를 정리한다. 만약 proxy를 사용한다면, 이를 해제할 필요가 없다.\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">on_stop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n</code></pre>  </div> </div>\n </li>\n <li>on_pause : 외부 인터페이스에서 pause 명령이 실행될 때 트리거된다. 이 상태에서 이루어지는 작업이 로봇에 영향이 생기지 않도록 이벤트를 구현해야 한다. state가 일시 중단된 동안에는 execute loop가 호출되지 않는다. 이이벤트는 on_exit과 유사하게 이벤트를 구현할 수 있다.\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">on_pause</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n</code></pre>  </div> </div>\n </li>\n <li>on_resume : 중지 이후 on_pause 이벤트를 벗어나 execute loop를 다시 실행할 때 트리거된다. 이 이벤트는 on_enter과 유사하게 이벤트를 구현할 수 있다.\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">on_resume</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">userdata</span><span class=\"p\">):</span>\n</code></pre>  </div> </div>\n </li>\n</ul>\n\n<h2 id=\"2-proxies\">2. Proxies</h2>\n<p>state에서 topic을 pub/sub 하거나, service 또는 action 메세지를 사용을 하게 되는데, 이를 효율적으로 사용하기 위해 FlexBE에서 다음과 같은 proxies를 제공한다.</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">flexbe_core.proxy</span> <span class=\"kn\">import</span> <span class=\"n\">ProxyPublisher</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flexbe_core.proxy</span> <span class=\"kn\">import</span> <span class=\"n\">ProxySubscriberCached</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flexbe_core.proxy</span> <span class=\"kn\">import</span> <span class=\"n\">ProxyServiceCaller</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flexbe_core.proxy</span> <span class=\"kn\">import</span> <span class=\"n\">ProxyActionClient</span>\n\n<span class=\"c1\"># Publisher\n</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_pub</span> <span class=\"o\">=</span> <span class=\"n\">RpoxyPublisher</span><span class=\"p\">({</span><span class=\"s\">'/publisher/topic'</span> <span class=\"p\">:</span> <span class=\"n\">TopicMsgType</span><span class=\"p\">})</span>\n<span class=\"c1\"># Examples\n</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_pub</span><span class=\"p\">.</span><span class=\"n\">publish</span><span class=\"p\">(</span><span class=\"s\">'/publisher/topic'</span><span class=\"p\">,</span> <span class=\"n\">TopicMsgs</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Subscriber\n</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_sub</span> <span class=\"o\">=</span> <span class=\"n\">ProxySubscriberCached</span><span class=\"p\">({</span><span class=\"s\">'/subscriber/topic'</span><span class=\"p\">:</span> <span class=\"n\">TopicMsgType</span><span class=\"p\">})</span>\n<span class=\"c1\"># Examples\n</span><span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_sub</span><span class=\"p\">.</span><span class=\"n\">has_msg</span><span class=\"p\">(</span><span class=\"s\">'/subscriber/topic'</span><span class=\"p\">):</span>\n    <span class=\"n\">TopicMsgs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_sub</span><span class=\"p\">.</span><span class=\"n\">get_last_msg</span><span class=\"p\">(</span><span class=\"s\">'/subscriber/topic'</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_sub</span><span class=\"p\">.</span><span class=\"n\">remove_last_msg</span><span class=\"p\">(</span><span class=\"s\">'/subscriber/topic'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Service Client\n</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_srv_client</span> <span class=\"o\">=</span> <span class=\"n\">ProxyServiceCaller</span><span class=\"p\">({</span><span class=\"s\">'/service/topic'</span> <span class=\"p\">:</span> <span class=\"n\">ServiceMsgType</span><span class=\"p\">})</span>\n<span class=\"c1\"># Examples\n</span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_srv_client</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"s\">'/service/topic'</span><span class=\"p\">,</span> <span class=\"n\">ServiceMsgTypeRequest</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Action Client\n</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_action_client</span> <span class=\"o\">=</span> <span class=\"n\">ProxyActionClient</span><span class=\"p\">({</span><span class=\"s\">'/action/topic'</span> <span class=\"p\">:</span> <span class=\"n\">ActionMsgType</span><span class=\"p\">})</span>\n<span class=\"c1\"># Examples\n</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_action_client</span><span class=\"p\">.</span><span class=\"n\">send_goal</span><span class=\"p\">(</span><span class=\"s\">'/action/topic'</span><span class=\"p\">,</span> <span class=\"n\">ActionGoal</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_action_client</span><span class=\"p\">.</span><span class=\"n\">has_result</span><span class=\"p\">(</span><span class=\"s\">'/action/topic'</span><span class=\"p\">):</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_action_client</span><span class=\"p\">.</span><span class=\"n\">get_result</span><span class=\"p\">(</span><span class=\"s\">'/action/topic'</span><span class=\"p\">)</span>\n    \n<span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_action_client</span><span class=\"p\">.</span><span class=\"n\">has_feedback</span><span class=\"p\">(</span><span class=\"s\">'/action/topic'</span><span class=\"p\">):</span>\n    <span class=\"n\">feedback</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_action_client</span><span class=\"p\">.</span><span class=\"n\">get_feedback</span><span class=\"p\">(</span><span class=\"s\">'/action/topic'</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">_action_client</span><span class=\"p\">.</span><span class=\"n\">remove_feedback</span><span class=\"p\">(</span><span class=\"s\">'/action/topic'</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n","dir":"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/","name":"0003DevelopingBasicStates.md","path":"0001ROS/0001ROS1/0003Advanced/0002FlexBe/0003DevelopingBasicStates.md","url":"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/0003DevelopingBasicStates.html"},{"sort":3,"permalink":"/0001ROS/0001ROS1/0003Advanced/0003Moveit/","layout":"default","title":"Moveit","content":"<h1 id=\"moveit\">Moveit</h1>\n\n","dir":"/0001ROS/0001ROS1/0003Advanced/0003Moveit/","name":"README.md","path":"0001ROS/0001ROS1/0003Advanced/0003Moveit/README.md","url":"/0001ROS/0001ROS1/0003Advanced/0003Moveit/"},{"sort":3,"permalink":"/0001ROS/0001ROS1/0003Advanced/","layout":"default","title":"ADVANCED","content":"<h1 id=\"advanced\">ADVANCED</h1>\n\n<ul>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/\">NAVIGATION</a>\n <ul>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/\">RobotSetup</a>\n <ul>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0001TF.html\">TF</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0002SensorStream.html\">SensorStream</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0003Odometry.html\">Odometry</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0004BaseController.html\">BaseController</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0005Mapping.html\">Mapping</a></li>\n </ul>\n </li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/\">NavigationStackSetup</a>\n <ul>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0001NavCore.html\">nav_core</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0002MoveBase.html\">move_base</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0003DWALocalPlanner.html\">dwa_local_planner</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0004GlobalPlanner.html\">global_planner</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0005DefaultRecoveryBehavior.html\">DefaultRecoveryBehavior</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0006Costmap.html\">Costmap</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0007AMCL.html\">amcl</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0008MapServer.html\">map_server</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0009NavigationTunning.html\">Navigation Tunning Guide</a></li>\n </ul>\n </li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/03MoveBaseFlex/\">MoveBaseFlex</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0001Navigation/04CustomPlanner/\">CustomPlanner</a></li>\n </ul>\n </li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/\">FlexBe</a>\n <ul>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/0001Installation.html\">Installation</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/0002Tutorials.html\">FlexBe Tutorials</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/0003DevelopingBasicStates.html\">Developing Basic States</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/0004RunningBehaviors.html\">Running Behaviors Without Operator</a></li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/0005FlexBe_MBF_Example.html\">FlexBe Example for MoveBaseFlex</a></li>\n </ul>\n </li>\n <li><a href=\"/0001ROS/0001ROS1/0003Advanced/0003Moveit/\">Moveit</a></li>\n</ul>\n","dir":"/0001ROS/0001ROS1/0003Advanced/","name":"README.md","path":"0001ROS/0001ROS1/0003Advanced/README.md","url":"/0001ROS/0001ROS1/0003Advanced/"},{"sort":3,"layout":"default","title":"CMakeLists.txt","content":"<h1 id=\"cmakeliststxt\">CMakeLists.txt</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- <a href=\"https://docs.ros.org/en/foxy/Guides/Ament-CMake-Documentation.html\">ROS 2.0 foxy Ament CMake Documentation</a></em></p>\n\n<p><em>- <a href=\"https://cmake.org/\">CMake Main page</a></em></p>\n\n<p><em>- <a href=\"https://docs.ros.org/en/foxy/Contributing/Migration-Guide.html\">Migration Guide from ROS 1.0 to ROS 2.0</a></em></p>\n\n<h2 id=\"1-cmakeliststxt란\">1. CMakeLists.txt란?</h2>\n\n<p>해당 페이지는 ROS 1.0의 <code class=\"language-plaintext highlighter-rouge\">CMakeLists.txt</code>와 비교하며, <code class=\"language-plaintext highlighter-rouge\">ROS 2.0</code>의 <code class=\"language-plaintext highlighter-rouge\">CMakeLists.txt</code>의 특징과 세부사항에대해 기술하였다.</p>\n\n<h2 id=\"2-cmake-버전\">2. CMake 버전</h2>\n<p>패키지를 빌드하기 위해 최소로 필요한 <code class=\"language-plaintext highlighter-rouge\">CMake</code> 버전을 입력한다. <code class=\"language-plaintext highlighter-rouge\">ROS 1.0</code>의 <code class=\"language-plaintext highlighter-rouge\">catkin</code>에서는 최소 <code class=\"language-plaintext highlighter-rouge\">2.8.3</code> 이상을 필요로 하며, <code class=\"language-plaintext highlighter-rouge\">ROS 2.0</code>에서는 그보다 더 높은 버전인 <code class=\"language-plaintext highlighter-rouge\">3.5.0</code> 버전을 사용한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cmake_minimum_required</span><span class=\"p\">(</span>VERSION 3.5.0<span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<h2 id=\"3-package-name\">3. Package Name</h2>\n<p>패키지 명을 <code class=\"language-plaintext highlighter-rouge\">project</code> 함수를 통해 전달한다. 현재 패키지의 폴더 명과 동일해야 한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">project</span><span class=\"p\">(</span>[PACKAGE_NAME]<span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<h2 id=\"4-set-c-version\">4. Set C++ version</h2>\n\n<p>해당 명령은 <code class=\"language-plaintext highlighter-rouge\">ROS 1.0</code>보다는 <code class=\"language-plaintext highlighter-rouge\">ROS 2.0</code> 버전에서 고려되는 점으로, <code class=\"language-plaintext highlighter-rouge\">ROS 2.0</code>은 최소 <code class=\"language-plaintext highlighter-rouge\">C++ 14 standard</code> 를 기반으로 하기 때문에, 컴파일러가 <code class=\"language-plaintext highlighter-rouge\">C++ 14</code> 또는 그 이상의 버전으로 컴파일하도록 설정해주어야 한다.\n다음은 <code class=\"language-plaintext highlighter-rouge\">C++ 14 standard</code>로 컴파일되도록 설정하는 부분이다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">if</span><span class=\"p\">(</span>NOT CMAKE_CXX_STANDARD<span class=\"p\">)</span>\n  <span class=\"nb\">set</span><span class=\"p\">(</span>CMAKE_CXX_STANDARD 14<span class=\"p\">)</span>\n<span class=\"nb\">endif</span><span class=\"p\">()</span>\n<span class=\"nb\">if</span><span class=\"p\">(</span>CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES <span class=\"s2\">\"Clang\"</span><span class=\"p\">)</span>\n  <span class=\"nb\">add_compile_options</span><span class=\"p\">(</span>-Wall -Wextra -Wpedantic<span class=\"p\">)</span>\n<span class=\"nb\">endif</span><span class=\"p\">()</span>\n</code></pre>  </div></div>\n\n<h2 id=\"5-빌드에-필요한-cmake-패키지-찾기\">5. 빌드에 필요한 CMake 패키지 찾기</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">find_package()</code> 함수를 이용하여 패키지 빌드를 위해 필요한 다른 의존 패키지들을 입력한다.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">ROS 2.0</code>의 경우 <code class=\"language-plaintext highlighter-rouge\">ament_cmake</code> 패키지를 통해 빌드되므로, <code class=\"language-plaintext highlighter-rouge\">ament_cmake</code> 패키지를 추가한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">find_package</span><span class=\"p\">(</span>ament_cmake REQUIRED<span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<p>또한, <code class=\"language-plaintext highlighter-rouge\">ROS 2.0</code>의 경우, <code class=\"language-plaintext highlighter-rouge\">ROS 1.0</code>과 다르게 <code class=\"language-plaintext highlighter-rouge\">COMPONENTS</code> 인자를 사용하지 않고, 각각의 패키지들을 다음 예시처럼 <code class=\"language-plaintext highlighter-rouge\">find_package()</code> 함수로 명시해주어야 한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">find_package</span><span class=\"p\">(</span>ament_cmake REQUIRED<span class=\"p\">)</span>\n<span class=\"nb\">find_package</span><span class=\"p\">(</span>sensor_msgs REQUIRED<span class=\"p\">)</span>\n<span class=\"nb\">find_package</span><span class=\"p\">(</span>tf2 REQUIRED<span class=\"p\">)</span>\n...\n</code></pre>  </div></div>\n\n<p>그 이외의 추가적으로 필요한 다른 의존성 패키지들을 추가하면 된다.</p>\n\n<h2 id=\"6-메세지-서비스-액션-타겟\">6. 메세지, 서비스, 액션 타겟</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">ROS 2.0</code>에서는 메세지, 서비스, 액션 타겟을 생성하기 위해서 <code class=\"language-plaintext highlighter-rouge\">rosidl_generate_interfaces()</code> 함수를 이용한다. 아래는 <code class=\"language-plaintext highlighter-rouge\">set()</code>함수를 이용해서 <code class=\"language-plaintext highlighter-rouge\">msg_files</code>, <code class=\"language-plaintext highlighter-rouge\">srv_files</code>, <code class=\"language-plaintext highlighter-rouge\">action_files</code>를 생성하여 추가하고, 다른 필요한 <code class=\"language-plaintext highlighter-rouge\">DEPENDENCIES</code>를 추가한 예제이다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># msg_files</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span>msg_files\n  <span class=\"s2\">\"msg/[MessageName1].msg\"</span>\n  <span class=\"s2\">\"msg/[MessageName2].msg\"</span>\n  <span class=\"s2\">\"msg/[MessageName3].msg\"</span>\n  ...\n<span class=\"p\">)</span>\n<span class=\"c1\"># srv_files</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span>srv_files\n  <span class=\"s2\">\"srv/[ServiceName1].srv\"</span>\n  <span class=\"s2\">\"srv/[ServiceName2].srv\"</span>\n  <span class=\"s2\">\"srv/[ServiceName2].srv\"</span>\n  ...\n<span class=\"p\">)</span>\n<span class=\"c1\"># action_files</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span>action_files\n  <span class=\"s2\">\"action/[ActionName1].action\"</span>\n  <span class=\"s2\">\"action/[ActionName2].action\"</span>\n  <span class=\"s2\">\"action/[ActionName3].action\"</span>\n  ...\n<span class=\"p\">)</span>\n\n<span class=\"nf\">rosidl_generate_interfaces</span><span class=\"p\">(</span><span class=\"si\">${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"si\">}</span>\n  <span class=\"si\">${</span><span class=\"nv\">msg_files</span><span class=\"si\">}</span>\n  <span class=\"si\">${</span><span class=\"nv\">srv_files</span><span class=\"si\">}</span>\n  <span class=\"si\">${</span><span class=\"nv\">action_files</span><span class=\"si\">}</span>\n  DEPENDENCIES std_msgs ...\n<span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<p>또한, <code class=\"language-plaintext highlighter-rouge\">find_package()</code>함수를 이용하여 <code class=\"language-plaintext highlighter-rouge\">rosidl_default_generators</code>를 추가해야 한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">find_package</span><span class=\"p\">(</span>rosidl_default_generators REQUIRED<span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<h2 id=\"7-빌드-타겟-정의\">7. 빌드 타겟 정의</h2>\n<p>빌드 타겟은 라이브러리와 실행 파일을 빌드 타겟으로 정의할 수 있다. 라이브러리는 <code class=\"language-plaintext highlighter-rouge\">add_library()</code>함수로 정의하며, 실행 파일은 <code class=\"language-plaintext highlighter-rouge\">add_executable()</code>함수르 정의한다.</p>\n\n<h3 id=\"71-실행-파일-추가\">7.1 실행 파일 추가</h3>\n<p>빌드할 대상인 실행 파일을 추가하기 위해 <code class=\"language-plaintext highlighter-rouge\">add_executable()</code> 함수를 사용한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">add_executable</span><span class=\"p\">(</span>myProgram src/main.cpp src/위 예제는 3 개의 소스 파일<span class=\"p\">(</span>src/main.cpp, src/some_file.cpp, src/another_file.cpp<span class=\"p\">)</span>을 빌드하여 `myProgram이라는 이름의 실행 파일을 만들어낸다.\n</code></pre>  </div></div>\n<p>위 예제는 3 개의 소스 파일(src/main.cpp, src/some_file.cpp, src/another_file.cpp)을 빌드하여 myProgram이라는 이름의 실행 파일을 만들어낸다.</p>\n\n<h3 id=\"72-라이브러리-타겟-추가\">7.2 라이브러리 타겟 추가</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">add_library()</code> 함수를 이용하여 빌드할 라이브러리를 기술한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">add_library</span><span class=\"p\">(</span><span class=\"si\">${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"si\">}</span> <span class=\"si\">${${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"si\">}</span><span class=\"nv\">_SRCS</span><span class=\"si\">}</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<h3 id=\"73-헤더파일-추가\">7.3 헤더파일 추가</h3>\n<p>아래의 명령으로 빌드에 필요한 헤더파일들을 추가할 수 있으며, 그 이외에도 앞서 <code class=\"language-plaintext highlighter-rouge\">find_package()</code> 호출 시 생성된 <code class=\"language-plaintext highlighter-rouge\">*_INCLUDE_DIRS</code> 환경 변수를 통해 추가적인 헤더파일들을 추가할 수 있다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">target_include_directories</span><span class=\"p\">(</span>my_target\n  PUBLIC\n    $&lt;BUILD_INTERFACE:<span class=\"si\">${</span><span class=\"nv\">CMAKE_CURRENT_SOURCE_DIR</span><span class=\"si\">}</span>/include&gt;\n    $&lt;INSTALL_INTERFACE:include&gt;<span class=\"p\">)</span>\n    <span class=\"si\">${</span><span class=\"nv\">[PACKAGE_NAME]_INCLUDE_DIRS</span><span class=\"si\">}</span>\n    ...\n</code></pre>  </div></div>\n\n<h3 id=\"74-dependencies-추가\">7.4 DEPENDENCIES 추가</h3>\n<p>의존성 추가 방법에는 <code class=\"language-plaintext highlighter-rouge\">ament_target_dependencies()</code> 함수를 이용하는 방법과 <code class=\"language-plaintext highlighter-rouge\">target_link_libraries()</code> 함수를 이용하는 방법이 있다. 의존성 추가를 위해, 앞서 <code class=\"language-plaintext highlighter-rouge\">find_package()</code>를 통해 의존성을 추가할 패키지를 추가해야 한다.</p>\n\n<p>우선, <code class=\"language-plaintext highlighter-rouge\">ament</code> 매크로인 <code class=\"language-plaintext highlighter-rouge\">ament_target_dependencies()</code>는 의존성이 필요한 헤더, 라이브러리 및 그와 관련된 <code class=\"language-plaintext highlighter-rouge\">dependencies</code>들을 가져온다. 다음은 <code class=\"language-plaintext highlighter-rouge\">my_target</code>이라는 <code class=\"language-plaintext highlighter-rouge\">link</code> 이름에 <code class=\"language-plaintext highlighter-rouge\">Eigen3</code>의 의존성을 추가하는 방법이다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">find_package</span><span class=\"p\">(</span>Eigen3 REQUIRED<span class=\"p\">)</span>\n<span class=\"nf\">ament_target_dependencies</span><span class=\"p\">(</span>my_target Eigen3<span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<p>다음으로 <code class=\"language-plaintext highlighter-rouge\">target_link_libraries()</code>는 라이브러리의 <code class=\"language-plaintext highlighter-rouge\">namespace</code>를 명명한다. 다음은 <code class=\"language-plaintext highlighter-rouge\">my_target</code>이라는 <code class=\"language-plaintext highlighter-rouge\">link</code> 이름에 <code class=\"language-plaintext highlighter-rouge\">Eigen3</code>의 의존성을 추가하는 방법이다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">find_package</span><span class=\"p\">(</span>Eigen3 REQUIRED<span class=\"p\">)</span>\n<span class=\"nb\">target_link_libraries</span><span class=\"p\">(</span>my_target Eigen3::Eigen<span class=\"p\">)</span>\n</code></pre>  </div></div>\n<p><code class=\"language-plaintext highlighter-rouge\">ament_target_dependencies()</code>는 모든 <code class=\"language-plaintext highlighter-rouge\">dependency</code>의 순서가 올바르게 지정되지만, <code class=\"language-plaintext highlighter-rouge\">target_link_libraries()</code>는 <code class=\"language-plaintext highlighter-rouge\">dependency</code>의 순서가 올바르지 않을 수도 있다.</p>\n\n<p>그리고, <code class=\"language-plaintext highlighter-rouge\">ament package</code>가 아닌 경우에는 <code class=\"language-plaintext highlighter-rouge\">target_link_libraries()</code>를 이용해 라이브러리를 추가해야 한다. 물론, <code class=\"language-plaintext highlighter-rouge\">ament package</code>가 있는 경우에도, <code class=\"language-plaintext highlighter-rouge\">ROS 1.0</code>에서처럼 다음의 방법으로 추가할 수 있다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">target_link_libraries</span><span class=\"p\">(</span>target <span class=\"si\">${</span><span class=\"nv\">Boost_LIBRARIES</span><span class=\"si\">}</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<h2 id=\"8-install\">8. install</h2>\n<p>다음 예시는 <code class=\"language-plaintext highlighter-rouge\">workspace</code> 내의 <code class=\"language-plaintext highlighter-rouge\">install</code> 폴더에 설치할 디렉토리를 설정한다. <code class=\"language-plaintext highlighter-rouge\">DIRECTORY</code> 인자 뒤에 설치할 디렉토리들을 선정하고, <code class=\"language-plaintext highlighter-rouge\">DESTINATION</code> 인자 뒤에는 설치 경로, 즉 공유할 경로를 설정하면 된다.</p>\n\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">install</span><span class=\"p\">(</span>\n  DIRECTORY include/\n  DESTINATION include\n<span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<p>다음 예시는 <code class=\"language-plaintext highlighter-rouge\">install</code> 함수를 이용하여 라이브러리를 설치하는 명령이다. <code class=\"language-plaintext highlighter-rouge\">ARCHIVE</code> 및 <code class=\"language-plaintext highlighter-rouge\">LIBRARY</code> 파일은 <code class=\"language-plaintext highlighter-rouge\">lib</code> 폴더에 설치되고, <code class=\"language-plaintext highlighter-rouge\">RUNTIME binary</code> 파일은 <code class=\"language-plaintext highlighter-rouge\">bin</code> 폴더에 설치되며, 설치된 헤더의 경로가 포함된다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">install</span><span class=\"p\">(</span>\n  TARGETS my_library\n  EXPORT export_my_library\n  LIBRARY DESTINATION lib\n  ARCHIVE DESTINATION lib\n  RUNTIME DESTINATION bin\n  INCLUDES DESTINATION include\n<span class=\"p\">)</span>\n</code></pre>  </div></div>\n","dir":"/0001ROS/0002ROS2/0001Basic/","name":"0003CMakeList.md","path":"0001ROS/0002ROS2/0001Basic/0003CMakeList.md","url":"/0001ROS/0002ROS2/0001Basic/0003CMakeList.html"},{"sort":3,"permalink":"/0001ROS/0002ROS2/0002Intermediate/0003rosdistro/","layout":"default","title":"rosdistro","content":"<h1 id=\"rosdistro\">rosdistro</h1>\n\n","dir":"/0001ROS/0002ROS2/0002Intermediate/0003rosdistro/","name":"README.md","path":"0001ROS/0002ROS2/0002Intermediate/0003rosdistro/README.md","url":"/0001ROS/0002ROS2/0002Intermediate/0003rosdistro/"},{"sort":3,"permalink":"/0001ROS/0002ROS2/0003Advanced/0003Moveit2/","layout":"default","title":"Moveit2","content":"<h1 id=\"moveit2\">Moveit2</h1>\n\n","dir":"/0001ROS/0002ROS2/0003Advanced/0003Moveit2/","name":"README.md","path":"0001ROS/0002ROS2/0003Advanced/0003Moveit2/README.md","url":"/0001ROS/0002ROS2/0003Advanced/0003Moveit2/"},{"sort":3,"permalink":"/0001ROS/0002ROS2/0003Advanced/","layout":"default","title":"ADVANCED","content":"<h1 id=\"advanced\">ADVANCED</h1>\n\n<ul>\n <li><a href=\"/0001ROS/0002ROS2/0003Advanced/0001Navigation2/\">NAVIGATION2</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0003Advanced/0002RMF/\">RMF</a></li>\n <li><a href=\"/0001ROS/0002ROS2/0003Advanced/0003Moveit2/\">Moveit2</a></li>\n</ul>\n","dir":"/0001ROS/0002ROS2/0003Advanced/","name":"README.md","path":"0001ROS/0002ROS2/0003Advanced/README.md","url":"/0001ROS/0002ROS2/0003Advanced/"},{"sort":3,"layout":"default","title":"Inverse Kinematics","content":"<h1 id=\"inverse-kinematics\">Inverse Kinematics</h1>\n\n<p><em>- <a href=\"https://books.google.co.kr/books?id=DdjNDwAAQBAJ&amp;printsec=frontcover&amp;dq=Robot+Modeling+and+Control&amp;hl=ko&amp;sa=X&amp;redir_esc=y#v=onepage&amp;q=Robot%20Modeling%20and%20Control&amp;f=false\">Robot Modeling and Control(M. W. Spong, ‎Seth Hutchinson, ‎M. Vidyasagar)</a></em></p>\n\n<p><em>- <a href=\"https://books.google.co.kr/books?id=6SoQRAAACAAJ&amp;dq=Robot+Dynamics+and+Control+2nd+Edition&amp;hl=ko&amp;sa=X&amp;redir_esc=y\">Robot Dynamics and Control 2nd Edition(M. W. Spong, M. Vidyasagar)</a></em></p>\n","dir":"/0002ROBOTICS/0001RobotDynamics/","name":"0003InverseKinematics.md","path":"0002ROBOTICS/0001RobotDynamics/0003InverseKinematics.md","url":"/0002ROBOTICS/0001RobotDynamics/0003InverseKinematics.html"},{"sort":3,"permalink":"/0002ROBOTICS/","layout":"default","title":"ROBOTICS","content":"<h1 id=\"robotics\">ROBOTICS</h1>\n\n<ul>\n <li><a href=\"/0002ROBOTICS/0001RobotDynamics/\">Robot Dynamics</a>\n <ul>\n <li><a href=\"/0002ROBOTICS/0001RobotDynamics/0001HomogeneousTransformations.html\">Homogeneous Transformations</a></li>\n <li><a href=\"/0002ROBOTICS/0001RobotDynamics/0002ForwardKinematics.html\">Forward Kinematics</a></li>\n <li><a href=\"/0002ROBOTICS/0001RobotDynamics/0003InverseKinematics.html\">Inverse Kinematics</a></li>\n <li><a href=\"/0002ROBOTICS/0001RobotDynamics/0004VelocityKinematics.html\">Velocity Kinematics</a></li>\n <li><a href=\"/0002ROBOTICS/0001RobotDynamics/0005Dynamics.html\">Dynamics</a></li>\n <li><a href=\"/0002ROBOTICS/0001RobotDynamics/0006TrajectoryPlanning.html\">Trajectory Planning</a></li>\n <li><a href=\"/0002ROBOTICS/0001RobotDynamics/0007IndependentJointControl.html\">Independent Joint Control</a></li>\n <li><a href=\"/0002ROBOTICS/0001RobotDynamics/0008ForceControl.html\">Force Control</a></li>\n </ul>\n </li>\n <li><a href=\"/0002ROBOTICS/0002RobotDesign/\">Robot Design</a></li>\n <li><a href=\"/0002ROBOTICS/0003ControlEngineering/\">ControlEngineering</a></li>\n</ul>\n","dir":"/0002ROBOTICS/","name":"README.md","path":"0002ROBOTICS/README.md","url":"/0002ROBOTICS/"},{"sort":3,"layout":"default","title":"vector 기초","content":"<h1 id=\"vector-기초\">vector 기초</h1>\n\n<ul>\n <li>참고문헌 : 전문가를 위한 C++(마크 그레고리 / 한빛미디어)</li>\n</ul>\n\n<p><code class=\"language-plaintext highlighter-rouge\">std::vector</code>는 <code class=\"language-plaintext highlighter-rouge\">C++</code> 표준 라이브러리로, <code class=\"language-plaintext highlighter-rouge\">C</code> 스타일의 배열을 대체하며, 메모리 관리를 신경 쓸 필요가 없기 때문에 배열보다 훨씬 유연하고 안전하다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">myVector</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span> <span class=\"p\">};</span>\n\n<span class=\"n\">myVector</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">33</span><span class=\"p\">);</span>\n<span class=\"n\">myVector</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">44</span><span class=\"p\">);</span>\n\n<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"1st element: \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">myVector</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">vector</code>는 제네릭 컨테이너로, 거의 모든 종류의 객체를 담을 수 있다.</li>\n</ul>\n","dir":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/","name":"0003vector.md","path":"0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0003vector.md","url":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0003vector.html"},{"sort":3,"permalink":"/0003Software/0002Computer/0003AI/","layout":"default","title":"AI","content":"<h1 id=\"ai\">AI</h1>\n\n","dir":"/0003Software/0002Computer/0003AI/","name":"README.md","path":"0003Software/0002Computer/0003AI/README.md","url":"/0003Software/0002Computer/0003AI/"},{"sort":3,"layout":"default","title":"Library","content":"<h1 id=\"library\">Library</h1>\n","dir":"/0003Software/0002Computer/0004Knowledges/","name":"0003Library.md","path":"0003Software/0002Computer/0004Knowledges/0003Library.md","url":"/0003Software/0002Computer/0004Knowledges/0003Library.html"},{"sort":3,"permalink":"/0003Software/","layout":"default","title":"Software","content":"<h1 id=\"software\">Software</h1>\n\n<ul>\n <li><a href=\"/0003Software/0001Languages/\">Programming Languages</a>\n <ul>\n <li><a href=\"/0003Software/0001Languages/0001C++/\">C++</a>\n <ul>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/\">Professional C++</a>\n <ul>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/\">Part 1. Introduction to Professional C++</a>\n <ul>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/\">Chapter 1. A Crash Course in C++ and the Standard Library</a>\n <ul>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0001If-initializer.html\">If Initializer</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0002Switch-initializer.html\">Switch Initializer</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0003vector.html\">vector 기초</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0004Initializer-list.html\">initializer_list</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0005Range-based-for-statement.html\">범위 기반 for 문</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0006Smart-pointer-basic.html\">스마트 포인터 기본</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0007Exception.html\">Exception</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0008Type-inference.html\">타입 추론</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0009Class_definition.html\">Class 정의</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0010Uniform-initialization.html\">유니폼 이니셜라이저</a></li>\n </ul>\n </li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/\">Chapter 2. Working with Strings and String Views</a>\n <ul>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/0001C_string.html\">C style String</a></li>\n <li><a href=\"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter2/0002StringLiteral.html\">String Literal</a></li>\n </ul>\n </li>\n </ul>\n </li>\n </ul>\n </li>\n </ul>\n </li>\n <li><a href=\"/0003Software/0001Languages/0002Python/\">Python</a></li>\n </ul>\n </li>\n <li><a href=\"/0003Software/0002Computer/\">Computer</a>\n <ul>\n <li><a href=\"/0003Software/0002Computer/0001Algorithm/\">Algorithm</a></li>\n <li><a href=\"/0003Software/0002Computer/0002DataStructure/\">Data Structure</a></li>\n <li><a href=\"/0003Software/0002Computer/0003AI/\">AI</a></li>\n <li><a href=\"/0003Software/0002Computer/0004Knowledges/\">Knowledges</a>\n <ul>\n <li><a href=\"/0003Software/0002Computer/0004Knowledges/0001OS.html\">OS</a></li>\n <li><a href=\"/0003Software/0002Computer/0004Knowledges/0002Network.html\">Network</a></li>\n <li><a href=\"/0003Software/0002Computer/0004Knowledges/0003Library.html\">Library</a></li>\n </ul>\n </li>\n </ul>\n </li>\n</ul>\n","dir":"/0003Software/","name":"README.md","path":"0003Software/README.md","url":"/0003Software/"},{"sort":3,"layout":"default","title":"Commit","content":"<h1 id=\"commit\">Commit</h1>\n\n<p>github 기초 개념</p>\n","dir":"/0004Tools/0001DevelopmentTool/0001Git/","name":"0003Commit.md","path":"0004Tools/0001DevelopmentTool/0001Git/0003Commit.md","url":"/0004Tools/0001DevelopmentTool/0001Git/0003Commit.html"},{"sort":3,"layout":"default","title":"BootingScript","content":"<h1 id=\"bootingscript\">BootingScript</h1>\n","dir":"/0004Tools/0001DevelopmentTool/0002Linux/","name":"0003BootingScript.md","path":"0004Tools/0001DevelopmentTool/0002Linux/0003BootingScript.md","url":"/0004Tools/0001DevelopmentTool/0002Linux/0003BootingScript.html"},{"sort":3,"permalink":"/0004Tools/0001DevelopmentTool/0003VSCode/","layout":"default","title":"VSCode","content":"<h1 id=\"vscode\">VSCode</h1>\n\n<ul>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0003VSCode/0001ROSSetting.html\">ROS Setting</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0003VSCode/0002Extension.html\">Extensions</a></li>\n</ul>\n","dir":"/0004Tools/0001DevelopmentTool/0003VSCode/","name":"README.md","path":"0004Tools/0001DevelopmentTool/0003VSCode/README.md","url":"/0004Tools/0001DevelopmentTool/0003VSCode/"},{"sort":3,"layout":"default","title":"IDLC","content":"<h1 id=\"idlc\">IDLC</h1>\n\n<h2 id=\"1-idlc\">1. IDLC</h2>\n\n<p>다음은 <code class=\"language-plaintext highlighter-rouge\">.idl</code> 파일을 이용하여 해당 메세지 형태의 헤더파일과 소스코드 파일을 생성하는 방법을 소개한다.</p>\n\n<p>2장 Tutorials에서 CMakeLists.txt에 명시된 <code class=\"language-plaintext highlighter-rouge\">idlc_generate()</code>를 이용하여 cmake build 시 헤더 및 소스 파일이 생성된다고 하였으나, ROS 빌드 시 자동으로 생성되지 않는 문제가 발생한다. 이를 해결하기 <strong>위해 수동으로 <code class=\"language-plaintext highlighter-rouge\">.idl</code>파일을 헤더 및 소스코드로 변환하는 방법을 소개한다.</strong></p>\n\n<p>먼저 <code class=\"language-plaintext highlighter-rouge\">idlc</code> 실행파일이 있는 위치이다.\n<code class=\"language-plaintext highlighter-rouge\">~/cyclondds/build/bin/</code></p>\n\n<p>해댱 위치에서 다음 명령을 내리면 해당 <code class=\"language-plaintext highlighter-rouge\">.idl</code>에 해당하는 메세지 파일이 ``~/cyclondds/build/bin/`에 생성된다.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./idlc /idl/file/location/&lt;idl_file_name.idl&gt;\n</code></pre>  </div></div>\n","dir":"/0004Tools/0002Knowledges/0001CycloneDDS/","name":"0003IDLC.md","path":"0004Tools/0002Knowledges/0001CycloneDDS/0003IDLC.md","url":"/0004Tools/0002Knowledges/0001CycloneDDS/0003IDLC.html"},{"sort":3,"permalink":"/0004Tools/0002Knowledges/0003TCPIP/","layout":"default","title":"TCP/IP","content":"<h1 id=\"tcpip\">TCP/IP</h1>\n\n","dir":"/0004Tools/0002Knowledges/0003TCPIP/","name":"README.md","path":"0004Tools/0002Knowledges/0003TCPIP/README.md","url":"/0004Tools/0002Knowledges/0003TCPIP/"},{"sort":4,"layout":"default","title":"Package.xml","content":"<h1 id=\"packagexml\">Package.xml</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- Programming Robots with ROS(Morgan Quigley, Brian Gerkey, William D. Smart)</em></p>\n\n<p><em>- <a href=\"https://wiki.ros.org/catkin/conceptual_overview\">catkin overview ros wiki pages</a></em></p>\n\n<h2 id=\"1-catkin-이란\">1. Catkin 이란?</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">catkin</code>은 <code class=\"language-plaintext highlighter-rouge\">ROS</code>에 사용되는 실행 프로그램, 라이브러리, 스크립트 및 다른 코드에서 사용할 인터페이스를 생성할 수 있도록 하는 <code class=\"language-plaintext highlighter-rouge\">ROS</code> 빌드 시스템이다. <code class=\"language-plaintext highlighter-rouge\">catkin</code>은 <code class=\"language-plaintext highlighter-rouge\">CMake</code> 매크로들과 일반적인 <code class=\"language-plaintext highlighter-rouge\">CMake</code> workflow에 추가적인 기능을 제공하기 위한 전용 파이썬 스크립트로 구성된다.</p>\n\n<h2 id=\"2-ros-프로젝트를-진행하며-자주-사용한-catkin-cli\">2. ROS 프로젝트를 진행하며 자주 사용한 catkin CLI</h2>\n<p>다음은 <code class=\"language-plaintext highlighter-rouge\">ROS</code> 프로젝트를 진행하면서 주로 사용되는 <code class=\"language-plaintext highlighter-rouge\">command line arguments</code>를 정리하였다.</p>\n\n<ul>\n <li>\n <p><code class=\"language-plaintext highlighter-rouge\">catkin_create_pkg [package_name] [dependency_package1] [dependency_package2] ...</code>\n<code class=\"language-plaintext highlighter-rouge\">ROS</code> 패키지를 생성하는 명령으로, <code class=\"language-plaintext highlighter-rouge\">package_name</code>으로 패키지를 생성하며, <code class=\"language-plaintext highlighter-rouge\">CMakeLists.txt</code>와 <code class=\"language-plaintext highlighter-rouge\">package.xml</code>을 포함한 패키지 폴더를 생성한다. 이 때, 패키지 이름은 모두 소문자를 사용해야하며, 공백이 있으면 안된다.</p>\n </li>\n <li>\n <p><code class=\"language-plaintext highlighter-rouge\">catkin_make</code>\n<code class=\"language-plaintext highlighter-rouge\">catkin</code> 빌드 명령어로, <code class=\"language-plaintext highlighter-rouge\">workspace</code> 위치에서 해당 명령어로 <code class=\"language-plaintext highlighter-rouge\">workspace</code> 내부에 있는 패키지들을 빌드할 수 있다.</p>\n </li>\n</ul>\n","dir":"/0001ROS/0001ROS1/0001Basic/","name":"0004Package-xml.md","path":"0001ROS/0001ROS1/0001Basic/0004Package-xml.md","url":"/0001ROS/0001ROS1/0001Basic/0004Package-xml.html"},{"sort":4,"layout":"default","title":"actionlib intermediate tutorials","content":"<h1 id=\"actionlib-intermediate-tutorials\">actionlib intermediate tutorials</h1>\n\n<p><em>- <a href=\"http://wiki.ros.org/actionlib/Tutorials\">actionlib tutorials 위키 페이지</a></em></p>\n","dir":"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/","name":"0004actionlibIntermediateTutorials.md","path":"0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0004actionlibIntermediateTutorials.md","url":"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0004actionlibIntermediateTutorials.html"},{"sort":4,"layout":"default","title":"BaseController","content":"<h1 id=\"basecontroller\">BaseController</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n\n<p><em>- <a href=\"http://wiki.ros.org/navigation/Tutorials/RobotSetup/Odom\">Publishing Odometry Information over ROS</a></em></p>\n\n","dir":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/","name":"0004BaseController.md","path":"0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0004BaseController.md","url":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0004BaseController.html"},{"sort":4,"layout":"default","title":"global_planner","content":"<h1 id=\"global_planner\">global_planner</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n\n<p><em>- <a href=\"http://wiki.ros.org/global_planner?distro=noetic\">global_planner 위키 페이지</a></em></p>\n\n<h2 id=\"1-global_planner\">1. global_planner</h2>\n<p>로봇의 시작 위치로부터 목표 위치까지의 경로를 생성하기 위해 nav_core::BaseGlobalPlanner 인터페이스를 이용하여 구현된 글로벌 플래너이다.</p>\n\n<h2 id=\"2-global_planner-종류\">2. global_planner 종류</h2>\n\n<p>global_planner는 파라미터 설정에 따라 구현되어 있는 global_planner를 가져와 사용할 수 있으며, 이는 <a href=\"http://wiki.ros.org/navfn\">navFn</a>을 기반으로 유연하게 global_planner을 구현할 수 있다.</p>\n\n<h3 id=\"21-standard-behavior\">2.1 Standard Behavior</h3>\n<p>Standard Behavior는 모든 파라미터를 default로 설정했을 때의 global_planner이다.\n<img src=\"global_planner_standard.png\" width=\"800\" height=\"600\" /></p>\n\n<h3 id=\"22-grid-path\">2.2 Grid Path</h3>\n<p>그리드의 경계를 따라 경로가 생성된다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">use_grid_path</span><span class=\"o\">=</span>True\n</code></pre>  </div></div>\n<p><img src=\"global_planner_grid.png\" width=\"800\" height=\"600\" /></p>\n\n<h3 id=\"23-simple-potential-calculation\">2.3 Simple Potential Calculation</h3>\n<p>navFn의 potential 계산 방법을 Quadratic하게 구현하지 않고, 단순화하여 계산하는 방법이다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">use_quadratic</span><span class=\"o\">=</span>False\n</code></pre>  </div></div>\n<p><img src=\"global_planner_simple_potential.png\" width=\"800\" height=\"600\" /></p>\n\n<h3 id=\"24-a\">2.4 A*</h3>\n<p>A* 알고리즘은 주어진 출발지에서, 목적지까지 가는 최단 경로를 찾아내기 위한 알고리즘이다다. A* 알고리즘은 완전한 최단 경로를 찾지 않고 최단 경로의 근사값을 찾아내는 것을 목표로 한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">use_dijkstra</span><span class=\"o\">=</span>False\n</code></pre>  </div></div>\n<p><img src=\"global_planner_A_star.png\" width=\"800\" height=\"600\" /></p>\n\n<h3 id=\"25-dijkstra\">2.5 Dijkstra</h3>\n<p>Dijkstra 알고리즘도 A* 알고리즘과 마찬가지로 최단 경로를 찾아내기 위한 알고리즘으로, A*와 다르게 완전한 최단 경로를 찾는 것을 목표로 한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">use_dijkstra</span><span class=\"o\">=</span>True\n</code></pre>  </div></div>\n<p><img src=\"global_planner_Dijkstra.png\" width=\"800\" height=\"600\" /></p>\n\n<h3 id=\"26-old-navfn-behavior\">2.6 Old NavFn Behavior</h3>\n<p>이 글로벌 플래너는 다음과 같은 특징을 가ㅌ는다.</p>\n<ul>\n <li>경로의 시작이 실제 시작 위치와 일치하지 않습니다.</li>\n <li>경로의 맨 끝은 그리드 선을 따라 이동합니다.</li>\n <li>모든 좌표가 반 격자 셀만큼 약간씩 움직인다.</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">old_navfn_behavior</span><span class=\"o\">=</span>True\n</code></pre>  </div></div>\n<p><img src=\"global_planner_OldNavFn.png\" width=\"800\" height=\"600\" /></p>\n\n<h2 id=\"3-orientation-filter\">3. Orientation Filter</h2>\n<p>글로벌 플래너 생성 이후 후처리 과정으로 경로 상의 점에 방향을 추가할 수 있다. ~orientation_mode 파라미터를 통해 아래와 같은 방향 모드를 설정할 수 있다.</p>\n<ul>\n <li>None=0 : 방향 추가 없음</li>\n <li>Forward=1 : 마지막 목표 방향을 제외한, 경로의 +x 방향으로 방향 지정</li>\n <li>Interpolate=2 : 시작 방향과 목표 방향의 인터폴레이션 이용하여 방향 지정</li>\n <li>ForwardThenInterpolate=3 : 직선 경로에서는 Foward 이용, 그 이후는 Interpolate 이용</li>\n <li>Backward=4 : 마지막 목표 방향을 제외한, 경로의 -x 방향으로 방향 지정</li>\n <li>Leftward=5 : 마지막 목표 방향을 제외한, 경로의 +y 방향으로 방향 지정</li>\n <li>Rightward=6 : 마지막 목표 방향을 제외한, 경로의 -y 방향으로 방향 지정</li>\n</ul>\n\n<h2 id=\"4-published-topics\">4. Published Topics</h2>\n<ol>\n <li>~[name]/plan (<a href=\"http://docs.ros.org/en/api/nav_msgs/html/msg/Path.html\">nav_msgs/Path</a>) : 마지막으로 계산된 경로로, 주로 visualization 목적으로 사용</li>\n</ol>\n\n<h2 id=\"5-parameters\">5. Parameters</h2>\n<p>parameter 설정에 따라 global_planner를 커스터마이징 할 수 있다. 자세한 parameter 내용은 <a href=\"http://wiki.ros.org/global_planner?distro=noetic\">global_planner 위키 페이지</a>를 참조</p>\n","dir":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/","name":"0004GlobalPlanner.md","path":"0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0004GlobalPlanner.md","url":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0004GlobalPlanner.html"},{"sort":4,"permalink":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/04CustomPlanner/","layout":"default","title":"CustomPlanner","content":"<h1 id=\"customplanner\">CustomPlanner</h1>\n\n","dir":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/04CustomPlanner/","name":"README.md","path":"0001ROS/0001ROS1/0003Advanced/0001Navigation/04CustomPlanner/README.md","url":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/04CustomPlanner/"},{"sort":4,"layout":"default","title":"Running Behaviors Without Operator","content":"<h1 id=\"running-behaviors-without-operator\">Running Behaviors Without Operator</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n\n<p><em>- <a href=\"http://philserver.bplaced.net/fbe/\">FlexBe 홈페이지</a></em></p>\n\n<p><em>- <a href=\"http://wiki.ros.org/flexbe/Tutorials\">FlexBe Tutorials ROS 위키 페이지</a></em></p>\n\n<p><em>- <a href=\"http://wiki.ros.org/flexbe/Tutorials/Running%20Behaviors%20Without%20Operator\">FlexBe Tutorials Running Behaviors Without Operator ROS 위키 페이지</a></em></p>\n\n<h2 id=\"1-flexbe만을-이용한-로봇-제어를-하는-경우\">1. FlexBe만을 이용한 로봇 제어를 하는 경우</h2>\n<p>이 경우는 전체 시스템이 실행이 되었을 때, FlexBe를 최상위 제어기로 사용하는 경우이다.</p>\n\n<ol>\n <li>onboard behavior engine luanch\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>roslaunch flexbe_onboard behavior_onboard.launch\n</code></pre>  </div> </div>\n </li>\n <li>ROS master가 연결된 상태에서 [Example Behavior] 이름의 behavior 실행\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>rosrun flexbe_widget be_launcher <span class=\"nt\">-b</span> <span class=\"s1\">'Example Behavior'</span>\n</code></pre>  </div> </div>\n </li>\n</ol>\n\n<p>위 내용을 launch 파일 작성하여 launch하는 경우는 다음과 같이 작성한다.</p>\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;arg</span> <span class=\"na\">name=</span><span class=\"s\">\"behavior_name\"</span> <span class=\"na\">default=</span><span class=\"s\">\"Example Behavior\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;include</span> <span class=\"na\">file=</span><span class=\"s\">\"$(find flexbe_onboard)/launch/behavior_onboard.launch\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;node</span> <span class=\"na\">name=</span><span class=\"s\">\"behavior_launcher\"</span> <span class=\"na\">pkg=</span><span class=\"s\">\"flexbe_widget\"</span> <span class=\"na\">type=</span><span class=\"s\">\"be_launcher\"</span> <span class=\"na\">output=</span><span class=\"s\">\"screen\"</span> <span class=\"na\">args=</span><span class=\"s\">\"-b '$(arg behavior_name)'\"</span> <span class=\"nt\">/&gt;</span>\n</code></pre>  </div></div>\n\n<h2 id=\"2-상위-제어기에-flexbe가-포함되어-실행되는-경우\">2. 상위 제어기에 FlexBe가 포함되어 실행되는 경우</h2>\n<p>이 경우에는 action call을 통해 behavior를 실행시킬 수 있는데, FlexBe 동작을 다른 상위 제어 인스턴스에 포함하는 경우에 사용된다.</p>\n<ol>\n <li>onboard behavior engine launch\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>roslaunch flexbe_onboard behavior_onboard.launch\n</code></pre>  </div> </div>\n </li>\n <li>FlexBE action server 실행 : 이 action server는 action topic인 /flexbe/execute_behavior (flexbe_msgs/BehaviorExecution)를 받는다.(<a href=\"https://github.com/team-vigir/flexbe_behavior_engine/blob/master/flexbe_msgs/action/BehaviorExecution.action\">flexbe_behavior_engine 참고</a>)\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>rosrun flexbe_widget be_action_server\n</code></pre>  </div> </div>\n </li>\n</ol>\n\n<p>위 내용을 launch 파일에 포함시키고, 상위 제어기에서 behavior를 실행시키는 방법은 다음과 같다.</p>\n<ul>\n <li>luanch file:\n```xml</li>\n</ul>\n<include file=\"$(find flexbe_onboard)/launch/behavior_onboard.launch\" />\n\n<node name=\"be_action_server\" pkg=\"flexbe_widget\" type=\"be_action_server\" output=\"screen\" respawn=\"true\" />\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>* 상위 제어기에서의 behavior action 요청: \n```python\n# python\n# action client 생성\nself._action_client = actionlib.SimpleActionClient('flexbe/execute_behavior', BehaviorExecutionAction)\n\n# action goal 생성\nself._action_goal = BehaviorExecutionGoal(behavior_name=\"Example Behavior\")\n\n# behavior 실행\nself._action_client.send_goal(self._action_goal)\n</code></pre>  </div></div>\n\n<h2 id=\"3-사용자-인터페이스-이용\">3. 사용자 인터페이스 이용</h2>\n<p>이 경우는 behavior 동작을 모니터링하거나, 명령 전송, 런타임 수정 등에 사용된다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>roslaunch flexbe_widget behavior_ocs.launch\n</code></pre>  </div></div>\n","dir":"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/","name":"0004RunningBehaviors.md","path":"0001ROS/0001ROS1/0003Advanced/0002FlexBe/0004RunningBehaviors.md","url":"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/0004RunningBehaviors.html"},{"sort":4,"layout":"default","title":"Package.xml","content":"<h1 id=\"packagexml\">Package.xml</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- <a href=\"https://docs.ros.org/en/foxy/Tutorials/Creating-Your-First-ROS2-Package.html\">ROS 2.0 package creating tutorials</a></em></p>\n\n<p><em>- <a href=\"https://www.ros.org/reps/rep-0149.html\">REP 149</a></em></p>\n\n<h2 id=\"1-packagexml\">1. package.xml</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">package.xml</code> 파일은 패키지의 정보를 담은 <code class=\"language-plaintext highlighter-rouge\">XML</code> 파일이다. 패키지의 이름, 저작자, 라이선스, 의존성 패키지 등의 정보를 담고 있다.</p>\n\n<h2 id=\"2-packagexml-포맷\">2. package.xml 포맷</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">ROS 2.0</code>에서 포맷 3을 사용한다. 다음은 포맷 3의 기본적인 형태이다.</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;?xml version=\"1.0\"?&gt;</span>\n<span class=\"err\">&lt;</span>?xml-model\n  href=\"http://download.ros.org/schema/package_format3.xsd\"\n  schematypens=\"http://www.w3.org/2001/XMLSchema\"?&gt;\n<span class=\"nt\">&lt;package</span> <span class=\"na\">format=</span><span class=\"s\">\"3\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;name&gt;</span>my_package<span class=\"nt\">&lt;/name&gt;</span>\n<span class=\"nt\">&lt;version&gt;</span>0.0.0<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;description&gt;</span>TODO: Package description<span class=\"nt\">&lt;/description&gt;</span>\n<span class=\"nt\">&lt;maintainer</span> <span class=\"na\">email=</span><span class=\"s\">\"user@todo.todo\"</span><span class=\"nt\">&gt;</span>user<span class=\"nt\">&lt;/maintainer&gt;</span>\n<span class=\"nt\">&lt;license&gt;</span>TODO: License declaration<span class=\"nt\">&lt;/license&gt;</span>\n\n<span class=\"nt\">&lt;buildtool_depend&gt;</span>ament_cmake<span class=\"nt\">&lt;/buildtool_depend&gt;</span>\n\n<span class=\"nt\">&lt;test_depend&gt;</span>ament_lint_auto<span class=\"nt\">&lt;/test_depend&gt;</span>\n<span class=\"nt\">&lt;test_depend&gt;</span>ament_lint_common<span class=\"nt\">&lt;/test_depend&gt;</span>\n\n<span class=\"nt\">&lt;export&gt;</span>\n  <span class=\"nt\">&lt;build_type&gt;</span>ament_cmake<span class=\"nt\">&lt;/build_type&gt;</span>\n<span class=\"nt\">&lt;/export&gt;</span>\n<span class=\"nt\">&lt;/package&gt;</span>\n</code></pre>  </div></div>\n\n<h2 id=\"3-패키지-정보\">3. 패키지 정보</h2>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;?xm version=\"1.0?&gt;</code> : <code class=\"language-plaintext highlighter-rouge\">xml</code> 버전을 명시. 보통 <code class=\"language-plaintext highlighter-rouge\">1.0</code>을 사용한다.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;package format=\"3\"&gt;</code>: <code class=\"language-plaintext highlighter-rouge\">format 3</code>형태의 <code class=\"language-plaintext highlighter-rouge\">ROS</code> 패키지 설정 부분</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;name&gt;</code> : 패키지 이름 명시</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;version&gt;</code> : 패키지의 버전. 패키지를 release 하게 된다면, 버전 관리도 중요하다.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;description&gt;</code> : 패키지에 대한 간략한 설명</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;maintainer&gt;</code> : 패키지 관리자의 이름과 이메일 주소 기재</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;license&gt;</code> : 패키지의 라이센스 기재.(BSD, MIT, Apache, …)</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;url&gt;</code> : 패키지와 관련된 url 기재.(깃북, 저장소, 웹페이지, …)</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;author&gt;</code> : 패키지 개발에 참여한 개발자들의 이름과 이메일 주소 기재</li>\n</ul>\n\n<h2 id=\"4-dependency\">4. Dependency</h2>\n<p>패키지의 의존성과 관련된 사항을 명시하는 부분이다.</p>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;buildtool_depend&gt;</code> : 빌드 시스템의 의존성 기술. <code class=\"language-plaintext highlighter-rouge\">ROS 2.0</code>은 <code class=\"language-plaintext highlighter-rouge\">ament_cmake</code> 빌드 시스템을 사용하므로, <code class=\"language-plaintext highlighter-rouge\">ament_cmake</code> 입력</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;depend&gt;</code> : 반복을 피하기위해 사용되며, <code class=\"language-plaintext highlighter-rouge\">&lt;build_depend&gt;</code>, <code class=\"language-plaintext highlighter-rouge\">&lt;build_export_depend&gt;</code>, <code class=\"language-plaintext highlighter-rouge\">&lt;exec_depend&gt;</code>의 기능을 모두 합친 명령으로, 반복적으로 같은 패키지를 명시하는 것을 피하기 위해 사용된다.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;build_depend&gt;</code> : 패키지 빌드 시 필요한 의존성 패키지 추가</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;build_export_depend&gt;</code> : 현재 패키지의 의존성 패키지가 다른 패키지의 빌드시 필요한 의존성 패키지인 경우 추가</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;exec_depend&gt;</code> : 패키지 실행 시 필요한 의존성 패키지 추가</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;test_depend&gt;</code> : 패키지 테스트 시 필요한 의존성 패키지 추가</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;doc_depend&gt;</code> : 문서 파일을 빌드하는데 필요한 의존성 패키지 추가</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;conflict&gt;</code> : 패키지와 충돌하는 패키지 추가</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;replace&gt;</code> : 현재 패키지로 대체할 수 있는 패키지 명시</li>\n</ul>\n\n<h2 id=\"5-export\">5. export</h2>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;export&gt;</code> : ROS에서 명시하지 않은 태그명을 사용할 때 사용, 다양한 패키지 및 서브시스템의 추가 정보를 명시한다. 이 때, 태그의 이름이 해당 태그를 처리하는 패키지와 동일해야 한다. 특히, ROS 2.0 에서는 <code class=\"language-plaintext highlighter-rouge\">&lt;build_type&gt;</code>을 항상 명시한다.</li>\n</ul>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># build_type\n<span class=\"nt\">&lt;export&gt;</span>\n  <span class=\"nt\">&lt;build_type&gt;</span>ament_cmake<span class=\"nt\">&lt;/build_type&gt;</span>\n<span class=\"nt\">&lt;/export&gt;</span>\n\n# rviz 태그의 plugin 명시\n<span class=\"nt\">&lt;export&gt;</span>\n  <span class=\"nt\">&lt;rviz</span> <span class=\"na\">plugin=</span><span class=\"s\">\"${prefix}/plugin_description.xml\"</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/export&gt;</span>\n\n# gazebo_ros 태그의 모델 경로 명시\n<span class=\"nt\">&lt;export&gt;</span>\n  <span class=\"nt\">&lt;gazebo_ros</span> <span class=\"na\">gazebo_model_path=</span><span class=\"s\">\"${prefix}/models\"</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/export&gt;</span>\n</code></pre>  </div></div>\n","dir":"/0001ROS/0002ROS2/0001Basic/","name":"0004Package-xml.md","path":"0001ROS/0002ROS2/0001Basic/0004Package-xml.md","url":"/0001ROS/0002ROS2/0001Basic/0004Package-xml.html"},{"sort":4,"layout":"default","title":"Velocity Kinematics","content":"<h1 id=\"velocity-kinematics\">Velocity Kinematics</h1>\n\n<p><em>- <a href=\"https://books.google.co.kr/books?id=DdjNDwAAQBAJ&amp;printsec=frontcover&amp;dq=Robot+Modeling+and+Control&amp;hl=ko&amp;sa=X&amp;redir_esc=y#v=onepage&amp;q=Robot%20Modeling%20and%20Control&amp;f=false\">Robot Modeling and Control(M. W. Spong, ‎Seth Hutchinson, ‎M. Vidyasagar)</a></em></p>\n\n<p><em>- <a href=\"https://books.google.co.kr/books?id=6SoQRAAACAAJ&amp;dq=Robot+Dynamics+and+Control+2nd+Edition&amp;hl=ko&amp;sa=X&amp;redir_esc=y\">Robot Dynamics and Control 2nd Edition(M. W. Spong, M. Vidyasagar)</a></em></p>\n","dir":"/0002ROBOTICS/0001RobotDynamics/","name":"0004VelocityKinematics.md","path":"0002ROBOTICS/0001RobotDynamics/0004VelocityKinematics.md","url":"/0002ROBOTICS/0001RobotDynamics/0004VelocityKinematics.html"},{"sort":4,"layout":"default","title":"initializer_list","content":"<h1 id=\"initializer_list\">initializer_list</h1>\n\n<ul>\n <li>참고문헌 : 전문가를 위한 C++(마크 그레고리 / 한빛미디어)</li>\n</ul>\n\n<p>이니셜라이저 리스트(<code class=\"language-plaintext highlighter-rouge\">initializer_list</code>)는 <code class=\"language-plaintext highlighter-rouge\">&lt;initializer_list&gt;</code> 헤더 파일에 정의되어 있으며, 이를 활용하여 여러 인수를 받는 함수를 작성할 수 있음.</p>\n\n<p>다음 예제는 <code class=\"language-plaintext highlighter-rouge\">makeSum()</code> 함수가 정수에 대한 이니셜라이저 리스트를 인수로 받는다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;initializer_list&gt;\n</span>\n<span class=\"kt\">int</span> <span class=\"nf\">makeSum</span><span class=\"p\">(</span><span class=\"n\">initializer_list</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">lst</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">lst</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">total</span> <span class=\"o\">+=</span> <span class=\"n\">value</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">total</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<p>위에서 정의한 <code class=\"language-plaintext highlighter-rouge\">makeSum()</code> 함수를 호출하는 방법은 다음과 같다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">makeSum</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">});</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>이니셜라이저 리스트는 타입에 안전하다.</li>\n <li>이니셜라이저 리스트를 정의할 때는 지정한 타입만 허용한다.</li>\n</ul>\n","dir":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/","name":"0004Initializer-list.md","path":"0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0004Initializer-list.md","url":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0004Initializer-list.html"},{"sort":4,"permalink":"/0003Software/0002Computer/0004Knowledges/","layout":"default","title":"Knowledges","content":"<h1 id=\"knowledges\">Knowledges</h1>\n\n<ul>\n <li><a href=\"/0003Software/0002Computer/0004Knowledges/0001OS.html\">OS</a></li>\n <li><a href=\"/0003Software/0002Computer/0004Knowledges/0002Network.html\">Network</a></li>\n <li><a href=\"/0003Software/0002Computer/0004Knowledges/0003Library.html\">Library</a></li>\n</ul>\n","dir":"/0003Software/0002Computer/0004Knowledges/","name":"README.md","path":"0003Software/0002Computer/0004Knowledges/README.md","url":"/0003Software/0002Computer/0004Knowledges/"},{"sort":4,"layout":"default","title":"Merge &amp; Rebase","content":"<h1 id=\"merge--rebase\">Merge &amp; Rebase</h1>\n\n<p>github 기초 개념</p>\n","dir":"/0004Tools/0001DevelopmentTool/0001Git/","name":"0004Merge.md","path":"0004Tools/0001DevelopmentTool/0001Git/0004Merge.md","url":"/0004Tools/0001DevelopmentTool/0001Git/0004Merge.html"},{"sort":4,"layout":"default","title":"vi deitor","content":"<h1 id=\"vi-deitor\">vi deitor</h1>\n","dir":"/0004Tools/0001DevelopmentTool/0002Linux/","name":"0004vim.md","path":"0004Tools/0001DevelopmentTool/0002Linux/0004vim.md","url":"/0004Tools/0001DevelopmentTool/0002Linux/0004vim.html"},{"sort":4,"layout":"default","title":"ROS-CycloneDDS Introduce","content":"<h1 id=\"ros-cyclonedds-introduce\">ROS-CycloneDDS Introduce</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- <a href=\"https://github.com/open-rmf/free_fleet\">OSRF RMF free fleet github pages</a></em></p>\n\n<p><em>- <a href=\"https://github.com/whgdms1230/cyclone_bridge\">Cyclone Bridge</a></em></p>\n\n<p><em>- <a href=\"https://github.com/whgdms1230/cyclone_ros1_node\">Cyclone Ros1 Node</a></em></p>\n\n<p><em>- <a href=\"https://github.com/whgdms1230/cyclone_ros2_node\">Cyclone Ros Node</a></em></p>\n\n<h2 id=\"1-프로젝트-개요\">1. 프로젝트 개요</h2>\n<p>이 프로젝트는 ROS 1.0과 ROS 2.0과의 통신 구현체를 구현한 cyclone_bridge 패키지를 이용하여 ROS 1.0 노드(cyclone_ros1_node)와 ROS 2.0 노드(cyclone_ros2_node) 간의 메시지 통신을 하는 간단한 예제이다. 해당 프로젝트는 OSRF에서 개발한 <a href=\"https://osrf.github.io/ros2multirobotbook/intro.html\">RMF</a> 시스템 중 <a href=\"https://github.com/open-rmf/free_fleet\">Free Fleet</a>의 구현체를 베이스로 구현하였다.</p>\n\n<p>동작 시퀀스는 다음과 같다.</p>\n\n<ul>\n <li>cyclone_ros1_node는 <code class=\"language-plaintext highlighter-rouge\">/ros1_to_ros2_topic</code> 토픽을 subscribe하여 send할 메시지를 입력받고, cyclone_bridge의 send 함수를 이용하여 해당 메시지를 전송한다.</li>\n <li>cyclone_ros2_node는 cyclone_bridge의 read 함수를 이용하여 해당 토픽의 dds 메시지를 읽어오면, 해당 메시지를 <code class=\"language-plaintext highlighter-rouge\">/ros1_to_ros2_topic</code> 토픽 메시지에 저장하여 publish하고, 다시 send 함수를 이용하여 해당 메시지를 cyclone_ros1_node에 전송한다.</li>\n <li>cyclone_ros1_node에서 리턴된 값을 읽게 되면 <code class=\"language-plaintext highlighter-rouge\">/ros2_to_ros2_topic</code> 토픽 메시지에 저장하여 publish 함으로써, <code class=\"language-plaintext highlighter-rouge\">/ros1_to_ros2_topic</code>으로 publish한 메시지가 ros2 노드로 전송되고, 리턴값이 ros1 노드로 다시 돌아온 것을 확인할 수 있다.</li>\n</ul>\n\n<h2 id=\"2-설치-및-실행\">2. 설치 및 실행</h2>\n\n<h3 id=\"21-cyclone_ros1_node\">2.1 cyclone_ros1_node</h3>\n\n<p>cyclone_ros1_node 패키지의 설치 방법은 다음과 같다.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">mkdir</span> <span class=\"nt\">-p</span> cyclone_ros1_ws/src\n<span class=\"nb\">cd </span>cyclone_ros1_ws/src\ngit clone https://github.com/whgdms1230/cyclone_bridge\ngit clone https://github.com/whgdms1230/cyclone_ros1_node\ngit clone https://github.com/eclipse-cyclonedds/cyclonedds\n</code></pre>  </div></div>\n\n<p>다음으로 ROS 1.0(noetic) 환경에서 빌드를 수행한다.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cd</span> ~/cyclon_ros1_ws\n<span class=\"nb\">source</span> /opt/ros/notic/setup.bash\ncolcon build\n</code></pre>  </div></div>\n\n<h3 id=\"22-cyclone_ros2_node\">2.2 cyclone_ros2_node</h3>\n\n<p>cyclone_ros2_node 패키지의 설치 방법은 다음과 같다.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">mkdir</span> <span class=\"nt\">-p</span> cyclone_ros2_ws/src\n<span class=\"nb\">cd </span>cyclone_ros2_ws/src\ngit clone https://github.com/whgdms1230/cyclone_bridge\ngit clone https://github.com/whgdms1230/cyclone_ros2_node\ngit clone https://github.com/eclipse-cyclonedds/cyclonedds\n</code></pre>  </div></div>\n\n<p>다음으로 ROS 2.0(foxy) 환경에서 빌드를 수행한다.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cd</span> ~/cyclon_ros2_ws\n<span class=\"nb\">source</span> /opt/ros/foxy/setup.bash\ncolcon build\n</code></pre>  </div></div>\n\n<h3 id=\"23-실행\">2.3 실행</h3>\n\n<h4 id=\"231-launch\">2.3.1 Launch</h4>\n<p>cyclone_ros1_node의 실행 방법은 다음과 같다.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cd</span> ~/cyclone_ros1_ws\n<span class=\"nb\">source install</span>/setup.bash\n\nroslaunch cyclone_ros1_node cyclone_ros1_node.launch\n</code></pre>  </div></div>\n\n<p>cyclone_ros2_node의 실행 방법은 다음과 같다.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cd</span> ~/cyclone_ros2_ws\n<span class=\"nb\">source install</span>/setup.bash\n\nros2 launch cyclone_ros2_node cyclone_ros2_node.xml\n</code></pre>  </div></div>\n\n<h4 id=\"232-명령-송수신\">2.3.2 명령 송수신</h4>\n\n<p>TODO</p>\n\n<h2 id=\"3-송수신-메시지\">3. 송수신 메시지</h2>\n\n<h3 id=\"31-messagesidl\">3.1 Messages.idl</h3>\n<p>해당 패키지에서 사용한 <code class=\"language-plaintext highlighter-rouge\">.idl</code> 파일인 <a href=\"https://github.com/whgdms1230/cyclone_bridge/blob/main/src/messages/Messages.idl\">Messages.idl</a>은 다음과 같다.</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">module</span> <span class=\"n\">CycloneBridgeData</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">struct</span> <span class=\"n\">IntNumber</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">uint32</span> <span class=\"n\">int_num</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n  <span class=\"k\">struct</span> <span class=\"n\">StrString</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">string</span> <span class=\"n\">messages</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n  <span class=\"k\">struct</span> <span class=\"n\">Msg</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">IntNumber</span> <span class=\"n\">cnt</span><span class=\"p\">;</span>\n    <span class=\"n\">StrString</span> <span class=\"n\">messages</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">};</span>\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">IntNumber</code> 메시지는 정수형 변수인 int_num 하나를 가지고 있다. 물론 정수형 변수 하나만 dds 통신하는 경우에 이러한 메시지 구조에 담을 필요가 없지만 예시를 위해 <code class=\"language-plaintext highlighter-rouge\">IntNumber</code>라는 메시지 구조에 담았다.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">StrString</code> 메시지는 string 변수인 messages 변수 하나를 가지고 있다.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">Msg</code> 메시지는 위에서 선언한 <code class=\"language-plaintext highlighter-rouge\">IntNumber</code> 변수 cnt와 <code class=\"language-plaintext highlighter-rouge\">StrString</code> 변수 messages 를 가지고 있으며, <code class=\"language-plaintext highlighter-rouge\">Msg</code> 메시지 구조를 이용하여 DDS 메시지 통신을 할 것이다.</li>\n</ul>\n\n<h3 id=\"32-messagesh와-messagesc\">3.2 Messages.h와 Messages.c</h3>\n<p><a href=\"https://github.com/whgdms1230/cyclone_bridge/blob/main/src/messages/Messages.h\">Messages.h</a>와 <a href=\"https://github.com/whgdms1230/cyclone_bridge/blob/main/src/messages/Messages.c\">Message.c</a>는 Messages.idl로부터 idlc를 이용하여 변환한 파일이다.</p>\n\n<h4 id=\"321-messageh\">3.2.1 Message.h</h4>\n<p>Messages.h는 Messages.idl에서 정의한 메시지에 대한 구조체 선언과 dds 통신 시 동적 할당을 위한 <code class=\"language-plaintext highlighter-rouge\">alloc</code>, <code class=\"language-plaintext highlighter-rouge\">free</code> 함수를 선언한 헤더파일이다.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">Msg</code> 각각의 메시지에 대해 선언된 구조체를 보면 다음과 같다.</p>\n\n<pre><code class=\"language-h\">typedef struct CycloneBridgeData_Msg\n{\n  struct CycloneBridgeData_IntNumber cnt;\n  struct CycloneBridgeData_StrString messages;\n} CycloneBridgeData_Msg;\n\nextern const dds_topic_descriptor_t CycloneBridgeData_Msg_desc;\n\n#define CycloneBridgeData_Msg__alloc() \\\n((CycloneBridgeData_Msg*) dds_alloc (sizeof (CycloneBridgeData_Msg)));\n\n#define CycloneBridgeData_Msg_free(d,o) \\\ndds_sample_free ((d), &amp;CycloneBridgeData_Msg_desc, (o))\n</code></pre>  \n\n<p><code class=\"language-plaintext highlighter-rouge\">Msg</code> 메시지는 <code class=\"language-plaintext highlighter-rouge\">CycloneBridgeData_Msg</code>라는 구조체로 선언되어있으며, 그 안의 <code class=\"language-plaintext highlighter-rouge\">IntNumber</code>, <code class=\"language-plaintext highlighter-rouge\">StrString</code> 데이터 타입은 <code class=\"language-plaintext highlighter-rouge\">CycloneBridgeData_IntNumber</code>, <code class=\"language-plaintext highlighter-rouge\">CycloneBridgeData_StrString</code>라는 구조체로 선언되어 있다. 해당 부분은 생략했지만, Messages.h 파일을 보면 나머지 두 메시지 형태에 대한 구초제 선언도 확인할 수 있다.</p>\n\n<p>다음으로 dds topic을 만들 때 사용되는 dds_create_topic() 함수의 인자로 사용되는 <code class=\"language-plaintext highlighter-rouge\">CycloneBridgeData_Msg_desc</code>를 선언한다.</p>\n\n<p>마지막으로 <code class=\"language-plaintext highlighter-rouge\">CycloneBridgeData_Msg__alloc()</code> 매크로 함수와 <code class=\"language-plaintext highlighter-rouge\">CycloneBridgeData_Msg_free()</code> 매크로 함수를 선언한다.</p>\n\n<h4 id=\"322-messagesc\">3.2.2. Messages.c</h4>\n<p><code class=\"language-plaintext highlighter-rouge\">Msg</code> 메시지만 살펴보면, Messages.c에는 <code class=\"language-plaintext highlighter-rouge\">CycloneBridgeData_Msg_desc</code>을 정의하기 위한 <code class=\"language-plaintext highlighter-rouge\">CycloneBridgeData_Msg_ops</code>정의와 <code class=\"language-plaintext highlighter-rouge\">CycloneBridgeData_Msg_desc</code> 정의가 구현되어있다. 해당 부분은 해당 자료구조에 대한 데이터의 크기를 정의하는 부분으로 생각되며, 자료구조의 크기가 잘못 선언되면 dds 통신 시 데이터의 손실이나 누수가 발생할 수 있다.</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">static</span> <span class=\"k\">const</span> <span class=\"kt\">uint32_t</span> <span class=\"n\">CycloneBridgeData_Msg_ops</span> <span class=\"p\">[]</span> <span class=\"o\">=</span>\n<span class=\"p\">{</span>\n  <span class=\"cm\">/* Msg */</span>\n  <span class=\"n\">DDS_OP_ADR</span> <span class=\"o\">|</span> <span class=\"n\">DDS_OP_TYPE_EXT</span><span class=\"p\">,</span> <span class=\"n\">offsetof</span> <span class=\"p\">(</span><span class=\"n\">CycloneBridgeData_Msg</span><span class=\"p\">,</span> <span class=\"n\">cnt</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3u</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">16u</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">7u</span> <span class=\"cm\">/* IntNumber */</span><span class=\"p\">,</span>\n  <span class=\"n\">DDS_OP_ADR</span> <span class=\"o\">|</span> <span class=\"n\">DDS_OP_TYPE_EXT</span><span class=\"p\">,</span> <span class=\"n\">offsetof</span> <span class=\"p\">(</span><span class=\"n\">CycloneBridgeData_Msg</span><span class=\"p\">,</span> <span class=\"n\">messages</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3u</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">16u</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">7u</span> <span class=\"cm\">/* StrString */</span><span class=\"p\">,</span>\n  <span class=\"n\">DDS_OP_RTS</span><span class=\"p\">,</span>\n\n  <span class=\"cm\">/* IntNumber */</span>\n  <span class=\"n\">DDS_OP_ADR</span> <span class=\"o\">|</span> <span class=\"n\">DDS_OP_TYPE_4BY</span><span class=\"p\">,</span> <span class=\"n\">offsetof</span> <span class=\"p\">(</span><span class=\"n\">CycloneBridgeData_IntNumber</span><span class=\"p\">,</span> <span class=\"n\">int_num</span><span class=\"p\">),</span>\n  <span class=\"n\">DDS_OP_RTS</span><span class=\"p\">,</span>\n\n  <span class=\"cm\">/* StrString */</span>\n  <span class=\"n\">DDS_OP_ADR</span> <span class=\"o\">|</span> <span class=\"n\">DDS_OP_TYPE_STR</span><span class=\"p\">,</span> <span class=\"n\">offsetof</span> <span class=\"p\">(</span><span class=\"n\">CycloneBridgeData_StrString</span><span class=\"p\">,</span> <span class=\"n\">messages</span><span class=\"p\">),</span>\n  <span class=\"n\">DDS_OP_RTS</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">const</span> <span class=\"n\">dds_topic_descriptor_t</span> <span class=\"n\">CycloneBridgeData_Msg_desc</span> <span class=\"o\">=</span>\n<span class=\"p\">{</span>\n  <span class=\"p\">.</span><span class=\"n\">m_size</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span> <span class=\"p\">(</span><span class=\"n\">CycloneBridgeData_Msg</span><span class=\"p\">),</span>\n  <span class=\"p\">.</span><span class=\"n\">m_align</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span> <span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">),</span>\n  <span class=\"p\">.</span><span class=\"n\">m_flagset</span> <span class=\"o\">=</span> <span class=\"n\">DDS_TOPIC_NO_OPTIMIZE</span><span class=\"p\">,</span>\n  <span class=\"p\">.</span><span class=\"n\">m_nkeys</span> <span class=\"o\">=</span> <span class=\"mi\">0u</span><span class=\"p\">,</span>\n  <span class=\"p\">.</span><span class=\"n\">m_typename</span> <span class=\"o\">=</span> <span class=\"s\">\"CycloneBridgeData::Msg\"</span><span class=\"p\">,</span>\n  <span class=\"p\">.</span><span class=\"n\">m_keys</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span>\n  <span class=\"p\">.</span><span class=\"n\">m_nops</span> <span class=\"o\">=</span> <span class=\"mi\">7</span><span class=\"p\">,</span>\n  <span class=\"p\">.</span><span class=\"n\">m_ops</span> <span class=\"o\">=</span> <span class=\"n\">CycloneBridgeData_Msg_ops</span><span class=\"p\">,</span>\n  <span class=\"p\">.</span><span class=\"n\">m_meta</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n<span class=\"p\">};</span>\n</code></pre>  </div></div>\n","dir":"/0004Tools/0002Knowledges/0001CycloneDDS/","name":"0004ROSCycloneDDS_intro.md","path":"0004Tools/0002Knowledges/0001CycloneDDS/0004ROSCycloneDDS_intro.md","url":"/0004Tools/0002Knowledges/0001CycloneDDS/0004ROSCycloneDDS_intro.html"},{"sort":4,"permalink":"/0004Tools/0002Knowledges/0004RESTAPI/","layout":"default","title":"REST API","content":"<h1 id=\"rest-api\">REST API</h1>\n\n<ul>\n <li><a href=\"/0004Tools/0002Knowledges/0004RESTAPI/0001RESTAPI.html\">REST API</a></li>\n <li><a href=\"/0004Tools/0002Knowledges/0004RESTAPI/0002cpprestSDK.html\">C++ REST SDK</a></li>\n</ul>\n","dir":"/0004Tools/0002Knowledges/0004RESTAPI/","name":"README.md","path":"0004Tools/0002Knowledges/0004RESTAPI/README.md","url":"/0004Tools/0002Knowledges/0004RESTAPI/"},{"sort":4,"permalink":"/0004Tools/","layout":"default","title":"Tools &amp; Knowleges","content":"<h1 id=\"tools--knowleges\">Tools &amp; Knowleges</h1>\n\n<ul>\n <li><a href=\"/0004Tools/0001DevelopmentTool/\">Development Tools</a>\n <ul>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/\">GIT</a>\n <ul>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0001Command.html\">Command</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0002Git.html\">Git</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0003Commit.html\">Commit</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0004Merge.html\">Merge &amp; Rebase</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0005Branch.html\">Branch</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0006ISSUE.html\">PR &amp; ISSUE</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0007Fork.html\">Fork &amp; Pull Request</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0008License.html\">License</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0009Linter.html\">Linter &amp; Action</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0001Git/0010Submodule.html\">Submodule</a></li>\n </ul>\n </li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/\">Linux</a>\n <ul>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0001Command.html\">Command</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0002ShellScript.html\">ShellScript &amp; bashrc</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0003BootingScript.html\">BootingScript</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0004vim.html\">vi deitor</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0005SymbolicLink.html\">Symbolic Link</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0006EnvironmentVariable.html\">Environment Variable</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0007SSH.html\">SSH</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0008SCP.html\">SCP</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0002Linux/0009Process.html\">Process</a></li>\n </ul>\n </li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0003VSCode/\">VSCode</a>\n <ul>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0003VSCode/0001ROSSetting.html\">ROS Setting</a></li>\n <li><a href=\"/0004Tools/0001DevelopmentTool/0003VSCode/0002Extension.html\">Extensions</a></li>\n </ul>\n </li>\n </ul>\n </li>\n <li><a href=\"/0004Tools/0002Knowledges/\">Knowledges</a>\n <ul>\n <li><a href=\"/0004Tools/0002Knowledges/0001CycloneDDS/\">CycloneDDS</a>\n <ul>\n <li><a href=\"/0004Tools/0002Knowledges/0001CycloneDDS/0001Install.html\">Install</a></li>\n <li><a href=\"/0004Tools/0002Knowledges/0001CycloneDDS/0002Tutorials.html\">Tutorials</a></li>\n <li><a href=\"/0004Tools/0002Knowledges/0001CycloneDDS/0003IDLC.html\">IDLC</a></li>\n <li><a href=\"/0004Tools/0002Knowledges/0001CycloneDDS/0004ROSCycloneDDS_intro.html\">ROS-CycloneDDS Introduce</a></li>\n <li><a href=\"/0004Tools/0002Knowledges/0001CycloneDDS/0005ROSCycloneDDS_code.html\">ROS-CycloneDDS Code</a></li>\n </ul>\n </li>\n <li><a href=\"/0004Tools/0002Knowledges/0002Docker/\">Docker</a></li>\n <li><a href=\"/0004Tools/0002Knowledges/0003TCPIP/\">TCP/IP</a></li>\n <li><a href=\"/0004Tools/0002Knowledges/0004RESTAPI/\">REST API</a>\n <ul>\n <li><a href=\"/0004Tools/0002Knowledges/0004RESTAPI/0001RESTAPI.html\">REST API</a></li>\n <li><a href=\"/0004Tools/0002Knowledges/0004RESTAPI/0002cpprestSDK.html\">C++ REST SDK</a></li>\n </ul>\n </li>\n <li><a href=\"/0004Tools/0002Knowledges/0005DB/\">DB</a>\n <ul>\n <li><a href=\"/0004Tools/0002Knowledges/0005DB/0001DB.html\">DB</a></li>\n <li><a href=\"/0004Tools/0002Knowledges/0005DB/0002SQLite.html\">SQLite</a></li>\n </ul>\n </li>\n <li><a href=\"/0004Tools/0002Knowledges/0006MQ/\">MQ</a></li>\n <li><a href=\"/0004Tools/0002Knowledges/0007MQTT/\">MQTT</a></li>\n <li><a href=\"/0004Tools/0002Knowledges/0008CMake/\">CMAKE</a></li>\n </ul>\n </li>\n</ul>\n","dir":"/0004Tools/","name":"README.md","path":"0004Tools/README.md","url":"/0004Tools/"},{"sort":5,"layout":"default","title":"Launch System","content":"<h1 id=\"launch-system\">Launch System</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- ROS 로봇 프로그래밍(표윤석, 조한철, 정려운, 임태훈)</em></p>\n\n<p><em>- <a href=\"http://wiki.ros.org/roslaunch/Commandline%20Tools\">ROS wiki (roslaunch / Commandline Tools)</a></em></p>\n\n<p><em>- <a href=\"http://wiki.ros.org/roslaunch/XML\">ROS wiki (roslaunch / XML)</a></em></p>\n\n<h2 id=\"1-launch-system\">1. Launch system</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">Launch</code>는 복수의 노드를 함께 실행시키도록 하며, 노드 간의 메시지를 주고받을 수 있게 한다. 이 때, 노드를 실행할 때 패키지의 매개변수나 노드 이름, 노드 네임스페이스, 환경변수 변경 등을 설정할 수 있다.</p>\n\n<h2 id=\"2-launch-파일의-종류\">2. Launch 파일의 종류</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">ROS 1.0</code>에서는 <code class=\"language-plaintext highlighter-rouge\">XML</code> 형태를 기반으로 한 <code class=\"language-plaintext highlighter-rouge\">.launch</code> 파일을 사용한다.</p>\n\n<h2 id=\"3-launch-태그\">3. Launch 태그</h2>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;launch&gt;</code> : roslaunch 구분의 시작과 끝을 나타냄</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;node&gt;</code> : 노드 실행에 대한 태그. 패키지(<code class=\"language-plaintext highlighter-rouge\">pkg</code>), 실행 시 노드명(<code class=\"language-plaintext highlighter-rouge\">name</code>), 패키지 내 실행 파일의 이름(<code class=\"language-plaintext highlighter-rouge\">type</code>, <code class=\"language-plaintext highlighter-rouge\">exec</code>), 로그 출력(<code class=\"language-plaintext highlighter-rouge\">output</code>) 등을 설정</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;machine&gt;</code> : 노드를 실행하는 PC의 이름. address, ros-root, ros-package-path 등 설정</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;include&gt;</code> : 다른 패키지나 같은 패키지에 속해 있는 다른 launch를 불러옴</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;remap&gt;</code> : 노드 이름, 토픽 이름 등의 노드에서 사용 중인 ROS 변수의 이름 변경</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;env&gt;</code> : 경로, IP 등의 환경변수를 설정</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;param&gt;</code> : 파라미터 이름, 타이프, 값 등을 설정</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;rosparam&gt;</code> : rosparam 명령과 같이, load, dump, delete 등 파라미터 정보를 확인 및 수정</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;group&gt;</code> : 노드 그룹화</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;test&gt;</code> : 노드 테스트할 때 사용</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;arg&gt;</code> : launch 파일 내 변수 정의</li>\n</ul>\n","dir":"/0001ROS/0001ROS1/0001Basic/","name":"0005Launch-System.md","path":"0001ROS/0001ROS1/0001Basic/0005Launch-System.md","url":"/0001ROS/0001ROS1/0001Basic/0005Launch-System.html"},{"sort":5,"layout":"default","title":"actionlib advanced tutorials","content":"<h1 id=\"actionlib-advanced-tutorials\">actionlib advanced tutorials</h1>\n\n<p><em>- <a href=\"http://wiki.ros.org/actionlib/Tutorials\">actionlib tutorials 위키 페이지</a></em></p>\n","dir":"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/","name":"0005actionlibAdvancedTutorials.md","path":"0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0005actionlibAdvancedTutorials.md","url":"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0005actionlibAdvancedTutorials.html"},{"sort":5,"layout":"default","title":"Mapping","content":"<h1 id=\"mapping\">Mapping</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n\n<p><em>- <a href=\"http://wiki.ros.org/slam_gmapping/Tutorials/MappingFromLoggedData\">How to Build a Map Using Logged Data</a></em></p>\n","dir":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/","name":"0005Mapping.md","path":"0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0005Mapping.md","url":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/01RobotSetup/0005Mapping.html"},{"sort":5,"layout":"default","title":"DefaultRecoveryBehavior","content":"<h1 id=\"defaultrecoverybehavior\">DefaultRecoveryBehavior</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n\n<p><em>- <a href=\"http://wiki.ros.org/move_base\">move_base 위키 페이지</a></em></p>\n\n<h2 id=\"1-defaultrecoverybehavior\">1. DefaultRecoveryBehavior</h2>\n\n<p>로봇이 move_base 노드를 통해 주행하는 도중에, 어떠한 상황에 의해서 로봇 주변의 코스트를 확인했을 때, 고착 상태에 빠졌다고 판단하는 경우 Recovery 동작을 수행한다. 다음은 move_base에서 사용되는 기본적인 Recovery 동작이다.</p>\n\n<p><img src=\"default_recovery_behavior.png\" width=\"800\" height=\"300\" /></p>\n\n<p>다음의 과정 중 Recovery가 되면 Navigation을 지속 수행하고, 아니라면 다음 Recovery 동작을 수행한다.</p>\n\n<ol>\n <li>Conservative Reset : 사용자가 지정한 영역(~conservative_reset_dist)의 장애물 코스트를 지움.</li>\n <li>Cleaning Rotation : 제자리 회전을 통해 로봇 주변의 코스트를 지움.</li>\n <li>Aggresive Reset : 제자리 회전을 할 수 있도록 ~/local_costmap/circumscribed_radius의 4배 영역의 장애물 코스트를 지움.</li>\n <li>Cleaning Rotation : 한번 더 제자리 회전을 통해 로봇 주변의 코스트를 지움.</li>\n <li>Abort : 1~4의 동작이 모두 실패하면 Navigation 중지됨.</li>\n</ol>\n\n<h2 id=\"2-recoverybehavior-parameters\">2. RecoveryBehavior Parameters</h2>\n<p>move_base의 parameter 설정 시 RecoveryBehavior의 동작 parameter를 설정할 수 있다.</p>\n<ol>\n <li>~recovery_behaviors : recovery를 수행 순서를 정의할 수 있으며, default 값은 위의 그림과 같은 순서이다.</li>\n <li>~conservative_reset_dist : conservative reset 시 설정할 영역의 크기</li>\n <li>~recover_behavior_enabled : recovery behavior의 활성화 여부 설정</li>\n <li>~clearing_rotation_allowed : default recovery_behaviors를 사용할 때만 사용하는 parameter로 중간의 회전을 통해 코스트를 지우는 과정을 넣거나 뺄 수 있음.</li>\n</ol>\n","dir":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/","name":"0005DefaultRecoveryBehavior.md","path":"0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0005DefaultRecoveryBehavior.md","url":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0005DefaultRecoveryBehavior.html"},{"sort":5,"layout":"default","title":"FlexBe Example for MoveBaseFlex","content":"<h1 id=\"flexbe-example-for-movebaseflex\">FlexBe Example for MoveBaseFlex</h1>\n\n","dir":"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/","name":"0005FlexBe_MBF_Example.md","path":"0001ROS/0001ROS1/0003Advanced/0002FlexBe/0005FlexBe_MBF_Example.md","url":"/0001ROS/0001ROS1/0003Advanced/0002FlexBe/0005FlexBe_MBF_Example.html"},{"sort":5,"layout":"default","title":"setup.py","content":"<h1 id=\"setuppy\">setup.py</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- <a href=\"https://docs.ros.org/en/foxy/How-To-Guides/Developing-a-ROS-2-Package.html\">ROS 2.0 Package Documentation</a></em></p>\n\n<p><em>- ROS 2로 시작하는 로봇 프로그래밍(표윤석, 임태훈)</em></p>\n\n<h2 id=\"1-파이썬-패키지-설정-파일-setuppy\">1. 파이썬 패키지 설정 파일 setup.py</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">setup.py</code>는 ROS 2 파이썬 패키지에만 사용되는 파일로, 배포를 위한 설정 파일이다. 파이썬 패키지에서는 <code class=\"language-plaintext highlighter-rouge\">CMakeLists.txt</code>는 사용하지 않지만, <code class=\"language-plaintext highlighter-rouge\">package.xml</code> 파일은 ROS 패키지의 필수 구성요소이기 때문에 패키지에 포함시켜야 한다.</p>\n\n<p>다음은 ROS 2.0 documentation 페이지에서 가져온 <code class=\"language-plaintext highlighter-rouge\">setup.py</code> 예시이다.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">glob</span> <span class=\"kn\">import</span> <span class=\"n\">glob</span>\n<span class=\"kn\">from</span> <span class=\"nn\">setuptools</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span>\n\n<span class=\"n\">package_name</span> <span class=\"o\">=</span> <span class=\"s\">'my_package'</span>\n\n<span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">package_name</span><span class=\"p\">,</span>\n    <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s\">'0.0.0'</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Packages to export\n</span>    <span class=\"n\">packages</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">package_name</span><span class=\"p\">],</span>\n    <span class=\"c1\"># Files we want to install, specifically launch files\n</span>    <span class=\"n\">data_files</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"c1\"># Install marker file in the package index\n</span>        <span class=\"p\">(</span><span class=\"s\">'share/ament_index/resource_index/packages'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">'resource/'</span> <span class=\"o\">+</span> <span class=\"n\">package_name</span><span class=\"p\">]),</span>\n        <span class=\"c1\"># Include our package.xml file\n</span>        <span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s\">'share'</span><span class=\"p\">,</span> <span class=\"n\">package_name</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"s\">'package.xml'</span><span class=\"p\">]),</span>\n        <span class=\"c1\"># Include all launch files.\n</span>        <span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s\">'share'</span><span class=\"p\">,</span> <span class=\"n\">package_name</span><span class=\"p\">,</span> <span class=\"s\">'launch'</span><span class=\"p\">),</span> <span class=\"n\">glob</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s\">'launch'</span><span class=\"p\">,</span> <span class=\"s\">'*.launch.py'</span><span class=\"p\">))),</span>\n    <span class=\"p\">],</span>\n    <span class=\"c1\"># This is important as well\n</span>    <span class=\"n\">install_requires</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s\">'setuptools'</span><span class=\"p\">],</span>\n    <span class=\"n\">zip_safe</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">author</span><span class=\"o\">=</span><span class=\"s\">'ROS 2 Developer'</span><span class=\"p\">,</span>\n    <span class=\"n\">author_email</span><span class=\"o\">=</span><span class=\"s\">'ros2@ros.com'</span><span class=\"p\">,</span>\n    <span class=\"n\">maintainer</span><span class=\"o\">=</span><span class=\"s\">'ROS 2 Developer'</span><span class=\"p\">,</span>\n    <span class=\"n\">maintainer_email</span><span class=\"o\">=</span><span class=\"s\">'ros2@ros.com'</span><span class=\"p\">,</span>\n    <span class=\"n\">keywords</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s\">'foo'</span><span class=\"p\">,</span> <span class=\"s\">'bar'</span><span class=\"p\">],</span>\n    <span class=\"n\">classifiers</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"s\">'Intended Audience :: Developers'</span><span class=\"p\">,</span>\n        <span class=\"s\">'License :: TODO'</span><span class=\"p\">,</span>\n        <span class=\"s\">'Programming Language :: Python'</span><span class=\"p\">,</span>\n        <span class=\"s\">'Topic :: Software Development'</span><span class=\"p\">,</span>\n    <span class=\"p\">],</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s\">'My awesome package.'</span><span class=\"p\">,</span>\n    <span class=\"n\">license</span><span class=\"o\">=</span><span class=\"s\">'TODO'</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Like the CMakeLists add_executable macro, you can add your python\n</span>    <span class=\"c1\"># scripts here.\n</span>    <span class=\"n\">entry_points</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s\">'console_scripts'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s\">'my_script = my_package.my_script:main'</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>name : 패키지 이름</li>\n <li>version : 패키지의 버전</li>\n <li>packages : 의존하는 패키지</li>\n <li>data_files : 이 패키지에서 사용되는 파일들을 기입하여 함께 배포함</li>\n <li>install_requires : 의존하는 패키지로 이 패키지를 pip을 통해 설치할 때 함께 설치되는 패키지. ROS에서는 pip로 설치하지 않기 때문에 setuptools launch만을 기입한다.</li>\n <li>tests_require : 테스트에 필요한 패키지, ROS에서는 pytest를 사용한다.</li>\n <li>zip_safe : 설치 시 zip 파일로 아카이브할지 여부를 설정</li>\n <li>author, author_email, maintainer, maintainer_email : 저작자, 관리자의 이름과 이메일을 기입</li>\n <li>keywords : 이 패키지의 키워드</li>\n <li>classifiers : PyPI에 등록될 메타 데이터 설정</li>\n <li>description : 패키지 설명 기입</li>\n <li>license : 라이선스 종류 기입</li>\n <li>entry_points : 플랫폼 별로 콘솔 스크립트를 설치하도록 콘솔 스크립트 이름과 호출 함수를 기입</li>\n</ul>\n\n<h2 id=\"2-파이썬-패키지-환경설정-파일-setupcfg\">2. 파이썬 패키지 환경설정 파일 setup.cfg</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">setup.cfg</code> 파일은 ROS 2 파이썬 패키지에서만 사용되며, <code class=\"language-plaintext highlighter-rouge\">setup.py</code> 파일의 setup 함수에서 설정하지 못하는 기타 옵션을 <code class=\"language-plaintext highlighter-rouge\">setup.cfg</code> 파일에 정의할 수 있다. [develop]과 [install]옵션을 설정하여 스크립트의 저장 위치를 설정하는데, 다음은 ROS 2.0 documentation 페이지에서 가져온 <code class=\"language-plaintext highlighter-rouge\">setup.cfg</code> 예시이다.</p>\n\n<pre><code class=\"language-cfg\">[develop]\nscript-dir=$base/lib/&lt;package-name&gt;\n[install]\ninstall-scripts=$base/lib/&lt;package-name&gt;\n</code></pre>  \n","dir":"/0001ROS/0002ROS2/0001Basic/","name":"0005Setup.md","path":"0001ROS/0002ROS2/0001Basic/0005Setup.md","url":"/0001ROS/0002ROS2/0001Basic/0005Setup.html"},{"sort":5,"layout":"default","title":"Dynamics","content":"<h1 id=\"dynamics\">Dynamics</h1>\n\n<p><em>- <a href=\"https://books.google.co.kr/books?id=DdjNDwAAQBAJ&amp;printsec=frontcover&amp;dq=Robot+Modeling+and+Control&amp;hl=ko&amp;sa=X&amp;redir_esc=y#v=onepage&amp;q=Robot%20Modeling%20and%20Control&amp;f=false\">Robot Modeling and Control(M. W. Spong, ‎Seth Hutchinson, ‎M. Vidyasagar)</a></em></p>\n\n<p><em>- <a href=\"https://books.google.co.kr/books?id=6SoQRAAACAAJ&amp;dq=Robot+Dynamics+and+Control+2nd+Edition&amp;hl=ko&amp;sa=X&amp;redir_esc=y\">Robot Dynamics and Control 2nd Edition(M. W. Spong, M. Vidyasagar)</a></em></p>\n","dir":"/0002ROBOTICS/0001RobotDynamics/","name":"0005Dynamics.md","path":"0002ROBOTICS/0001RobotDynamics/0005Dynamics.md","url":"/0002ROBOTICS/0001RobotDynamics/0005Dynamics.html"},{"sort":5,"layout":"default","title":"범위 기반 for 문","content":"<h1 id=\"범위-기반-for-문\">범위 기반 for 문</h1>\n\n<ul>\n <li>참고문헌 : 전문가를 위한 C++(마크 그레고리 / 한빛미디어)</li>\n</ul>\n\n<p>범위 기반 <code class=\"language-plaintext highlighter-rouge\">for</code>문(range-based for statement)은 컨테이너에 담긴 원소에 대해 반복문을 실행하는데 주로 사용된다. <code class=\"language-plaintext highlighter-rouge\">C</code> 스타일의 루프, <a href=\"/c++/Cpp-switch-initializer/\">이니셜라이저 리스트(<code class=\"language-plaintext highlighter-rouge\">initializer_list</code>)</a>, <code class=\"language-plaintext highlighter-rouge\">std::array</code>, <code class=\"language-plaintext highlighter-rouge\">std::vector</code>, 표준 라이브러리에서 제공하는 컨테이너처럼 반복자를 리턴하는 <code class=\"language-plaintext highlighter-rouge\">begin()</code>/<code class=\"language-plaintext highlighter-rouge\">end()</code> 메서드가 정의된 모든 타입에 적용할 수 있다.</p>\n\n<p>다음 예제는 범위 기반 for문을 돌면서 배열의 모든 원소에 대한 복제본을 출력한다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">array</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"o\">&gt;</span> <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">};</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">arr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n","dir":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/","name":"0005Range-based-for-statement.md","path":"0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0005Range-based-for-statement.md","url":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0005Range-based-for-statement.html"},{"sort":5,"layout":"default","title":"Branch","content":"<h1 id=\"branch\">Branch</h1>\n\n<p>github 기초 개념</p>\n","dir":"/0004Tools/0001DevelopmentTool/0001Git/","name":"0005Branch.md","path":"0004Tools/0001DevelopmentTool/0001Git/0005Branch.md","url":"/0004Tools/0001DevelopmentTool/0001Git/0005Branch.html"},{"sort":5,"layout":"default","title":"Symbolic Link","content":"<h1 id=\"symbolic-link\">Symbolic Link</h1>\n","dir":"/0004Tools/0001DevelopmentTool/0002Linux/","name":"0005SymbolicLink.md","path":"0004Tools/0001DevelopmentTool/0002Linux/0005SymbolicLink.md","url":"/0004Tools/0001DevelopmentTool/0002Linux/0005SymbolicLink.html"},{"sort":5,"layout":"default","title":"ROS-CycloneDDS Code","content":"<h1 id=\"ros-cyclonedds-code\">ROS-CycloneDDS Code</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- <a href=\"https://github.com/open-rmf/free_fleet\">OSRF RMF free fleet github pages</a></em></p>\n\n<p><em>- <a href=\"https://github.com/whgdms1230/cyclone_bridge\">Cyclone Bridge</a></em></p>\n\n<p><em>- <a href=\"https://github.com/whgdms1230/cyclone_ros1_node\">Cyclone Ros1 Node</a></em></p>\n\n<p><em>- <a href=\"https://github.com/whgdms1230/cyclone_ros2_node\">Cyclone Ros Node</a></em></p>\n\n<h2 id=\"1-cyclone_bridge\">1. cyclone_bridge</h2>\n<p>cyclone_bridge의 구조는 다음과 같다.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>cyclone_bridge\n├── cmake\n│   └── cyclone_bridge-config.cmake.in\n├── CMakeLists.txt\n├── include\n│   └── cyclone_bridge\n│       ├── messages\n│       │   ├── IntNumber.hpp\n│       │   ├── Msg.hpp\n│       │   └── StrString.hpp\n│       ├── ROS1Bridge.hpp\n│       ├── ROS1Config.hpp\n│       ├── ROS2Bridge.hpp\n│       └── ROS2Config.hpp\n├── package.xml\n├── README.md\n└── src\n    ├── dds_utils\n    │   ├── common.cpp\n    │   ├── common.hpp\n    │   ├── DDSPublishHandler.hpp\n    │   └── DDSSubscribeHandler.hpp\n    ├── messages\n    │   ├── Messages.c\n    │   ├── Messages.h\n    │   └── Messages.idl\n    ├── ROS1Bridge.cpp\n    ├── ROS1Impl.cpp\n    ├── ROS1Impl.hpp\n    ├── ROS2Bridge.cpp\n    ├── ROS2Impl.cpp\n    └── ROS2Impl.hpp\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">cyclone_birdge-config.cmake.in</code>은 cmake 파일을 정의하기 위해 사용된 파일이다.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">include/cyclone_bridge</code>에는 DDS통신으로 받아온 데이터를 ROS 패키지 안에서 저장하기 위해 <code class=\"language-plaintext highlighter-rouge\">message</code>폴더 안에 헤더파일로 정의되어 있다. 그리고, <code class=\"language-plaintext highlighter-rouge\">*Bridge.hpp</code> 파일은 ros 노드에서 <code class=\"language-plaintext highlighter-rouge\">cyclone_bridge</code>의 함수를 호출하기 위해 사용되며 <code class=\"language-plaintext highlighter-rouge\">*Config.hpp</code>파일은 dds 통신시 필요한 configuration을 정의하기 위해 사용된다.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">src/dds_tuils</code>는 dds 통신에 필요한 util 파일들이며, <code class=\"language-plaintext highlighter-rouge\">common.cpp</code>, <code class=\"language-plaintext highlighter-rouge\">common.hpp</code>는 ros의 string 자료형 변수를 dds의 char* 자료형 변수에 할당하기 위한 <code class=\"language-plaintext highlighter-rouge\">dds_string_alloc_and_copy()</code>함수가 정의되어 있으며, <code class=\"language-plaintext highlighter-rouge\">DDSPublishHandler.hpp</code>와 <code class=\"language-plaintext highlighter-rouge\">DDSSubscribeHandler.hpp</code>에는 DDS 통신에 사용되는 handler를 정의한 클래스가 구현되어 있다.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">src</code> 내부의 <code class=\"language-plaintext highlighter-rouge\">*Bridge.cpp</code>는 ros 노드에서 <code class=\"language-plaintext highlighter-rouge\">cyclone_bridge</code> 함수를 호출하기 위한 함수를 정의하였으며, 해당 함수를 이용하여 dds 통신 구현체인 <code class=\"language-plaintext highlighter-rouge\">impl</code>의 함수를 사용하도록 구현되어 있다. <code class=\"language-plaintext highlighter-rouge\">*Impl.cpp</code>, <code class=\"language-plaintext highlighter-rouge\">*Impl.hpp</code>에는 실제 dds 통신을 구현하는 구현체가 들어있으며, 해당 함수들을 이용하여 dds 메시지 통신을 하도록 구현되어있다.</li>\n</ul>\n\n<h3 id=\"11-bridge\">1.1 Bridge</h3>\n<p>ROS1Bridge.cpp를 보면 다음과 같다.</p>\n\n<ul>\n <li>먼저 ROS1Bridge 객체를 만들 때, ROS1Config의 configuration을 가져온다. 다음으로 <code class=\"language-plaintext highlighter-rouge\">participant</code>를 만들고, <code class=\"language-plaintext highlighter-rouge\">DDSPublisherHandler</code>와 <code class=\"language-plaintext highlighter-rouge\">DDSSubscribeHandler</code>객체를 이용하여 dds 통신할 객체를 생성한다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">ROS1Bridge</span><span class=\"o\">::</span><span class=\"n\">SharedPtr</span> <span class=\"n\">ROS1Bridge</span><span class=\"o\">::</span><span class=\"n\">make</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">ROS1Config</span><span class=\"o\">&amp;</span> <span class=\"n\">_config</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"n\">SharedPtr</span> <span class=\"n\">ros1_bridge</span> <span class=\"o\">=</span> <span class=\"n\">SharedPtr</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">ROS1Bridge</span><span class=\"p\">(</span><span class=\"n\">_config</span><span class=\"p\">));</span>\n\n<span class=\"n\">dds_entity_t</span> <span class=\"n\">participant</span> <span class=\"o\">=</span> <span class=\"n\">dds_create_participant</span><span class=\"p\">(</span>\n    <span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"n\">dds_domainid_t</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_config</span><span class=\"p\">.</span><span class=\"n\">dds_domain</span><span class=\"p\">),</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">participant</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">DDS_FATAL</span><span class=\"p\">(</span><span class=\"s\">\"dds_create_participant: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">dds_strretcode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">participant</span><span class=\"p\">));</span>\n  <span class=\"k\">return</span> <span class=\"nb\">nullptr</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">dds</span><span class=\"o\">::</span><span class=\"n\">DDSPublishHandler</span><span class=\"o\">&lt;</span><span class=\"n\">CycloneBridgeData_Msg</span><span class=\"o\">&gt;::</span><span class=\"n\">SharedPtr</span> <span class=\"n\">send_pub</span><span class=\"p\">(</span>\n    <span class=\"k\">new</span> <span class=\"n\">dds</span><span class=\"o\">::</span><span class=\"n\">DDSPublishHandler</span><span class=\"o\">&lt;</span><span class=\"n\">CycloneBridgeData_Msg</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n        <span class=\"n\">participant</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">CycloneBridgeData_Msg_desc</span><span class=\"p\">,</span>\n        <span class=\"n\">_config</span><span class=\"p\">.</span><span class=\"n\">dds_ros1_to_ros2_topic</span><span class=\"p\">));</span>\n\n<span class=\"n\">dds</span><span class=\"o\">::</span><span class=\"n\">DDSSubscribeHandler</span><span class=\"o\">&lt;</span><span class=\"n\">CycloneBridgeData_Msg</span><span class=\"o\">&gt;::</span><span class=\"n\">SharedPtr</span> \n    <span class=\"n\">read_sub</span><span class=\"p\">(</span>\n        <span class=\"k\">new</span> <span class=\"n\">dds</span><span class=\"o\">::</span><span class=\"n\">DDSSubscribeHandler</span><span class=\"o\">&lt;</span><span class=\"n\">CycloneBridgeData_Msg</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n            <span class=\"n\">participant</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">CycloneBridgeData_Msg_desc</span><span class=\"p\">,</span>\n            <span class=\"n\">_config</span><span class=\"p\">.</span><span class=\"n\">dds_ros2_to_ros1_topic</span><span class=\"p\">));</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">send_pub</span><span class=\"o\">-&gt;</span><span class=\"n\">is_ready</span><span class=\"p\">()</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"n\">read_sub</span><span class=\"o\">-&gt;</span><span class=\"n\">is_ready</span><span class=\"p\">())</span>\n  <span class=\"k\">return</span> <span class=\"nb\">nullptr</span><span class=\"p\">;</span>\n\n<span class=\"n\">ros1_bridge</span><span class=\"o\">-&gt;</span><span class=\"n\">impl</span><span class=\"o\">-&gt;</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">ROS1Impl</span><span class=\"o\">::</span><span class=\"n\">Fields</span><span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">participant</span><span class=\"p\">),</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">send_pub</span><span class=\"p\">),</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">read_sub</span><span class=\"p\">)});</span>\n<span class=\"k\">return</span> <span class=\"n\">ros1_bridge</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div> </div>\n </li>\n <li>ros1 노드에서 호출할 <code class=\"language-plaintext highlighter-rouge\">send()</code>함수와 <code class=\"language-plaintext highlighter-rouge\">read()</code>함수로, 해당 함수들이 호출되면 실제 dds 통신을 구현하는 impl의 <code class=\"language-plaintext highlighter-rouge\">send()</code>함수와 <code class=\"language-plaintext highlighter-rouge\">read()</code>함수를 호출한다.\n```cpp\nbool ROS1Bridge::send(const messages::Msg&amp; ros1_to_ros2_msg)\n{\nreturn impl-&gt;send(ros1_to_ros2_msg);\n}</li>\n</ul>\n\n<p>bool ROS1Bridge::read(messages::Msg&amp; ros2_to_ros1_msg)\n{\n return impl-&gt;read(ros2_to_ros1_msg);\n}</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n### 1.2 Impl\ndds 통신을 구현하는 ROS1Impl.cpp를 보면 다음과 같다.\n\n* 먼저 `send()`함수로, cyclone_bridge의 messages 폴더 내에 선언된 메시지 형태의 자료구조(여기서는 `Msg`)를 받아 Messages.h에 정의된 메시지 형태로 변환하여 dds 함수를 이용하여 전송하는 함수이다. \n* 먼저 `CycloneBridgeData_Msg__alloc()`을 이용하여 msg를 동적 할당 하고, msg에 데이터를 저장한다. 이 때, string의 경우 `common`에 정의되어 있는  `dds_string_alloc_and_copy()`함수를 이용하여 char* 자료형으로 변환하여 대입한다.\n* 다음으로 `DDSPublishHandler`에 정의되어 있는 `write()`함수를 이용하여 msg를 전송하고, `CycloneBridgeData_Msg_free()`함수로 동적 할당을 해제한다.\n```cpp\nbool ROS1Bridge::ROS1Impl::send(const messages::Msg&amp; ros1_to_ros2_msg)\n{\n  CycloneBridgeData_Msg* msg = CycloneBridgeData_Msg__alloc();\n  msg-&gt;cnt.int_num = ros1_to_ros2_msg.cnt.int_num;\n  msg-&gt;messages.messages = common::dds_string_alloc_and_copy(ros1_to_ros2_msg.messages.messages);\n\n  bool sent = fields.send_pub-&gt;write(msg);\n  CycloneBridgeData_Msg_free(msg, DDS_FREE_ALL);\n  return sent;\n}\n</code></pre>  </div></div>\n\n<ul>\n <li>다음으로 <code class=\"language-plaintext highlighter-rouge\">read()</code>함수로, Messages.h에 정의된 메시지 형태의 데이터를 <code class=\"language-plaintext highlighter-rouge\">DDSSubscribeHandler</code>에 정의된 <code class=\"language-plaintext highlighter-rouge\">read()</code>를 이용하여 msg를 읽고, 읽어온 msg 데이터를 변환하여 cyclone_bridge의 messages 폴더 내에 선언된 메시지 형태의 자료구조(여기서는 <code class=\"language-plaintext highlighter-rouge\">Msg</code>)에 저장하는 함수이다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">bool</span> <span class=\"n\">ROS1Bridge</span><span class=\"o\">::</span><span class=\"n\">ROS1Impl</span><span class=\"o\">::</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">messages</span><span class=\"o\">::</span><span class=\"n\">Msg</span><span class=\"o\">&amp;</span> <span class=\"n\">ros2_to_ros1_msg</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"k\">auto</span> <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"p\">.</span><span class=\"n\">read_sub</span><span class=\"o\">-&gt;</span><span class=\"n\">read</span><span class=\"p\">();</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">ros2_to_ros1_msg</span><span class=\"p\">.</span><span class=\"n\">cnt</span><span class=\"p\">.</span><span class=\"n\">int_num</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">cnt</span><span class=\"p\">.</span><span class=\"n\">int_num</span><span class=\"p\">;</span>\n  <span class=\"n\">ros2_to_ros1_msg</span><span class=\"p\">.</span><span class=\"n\">messages</span><span class=\"p\">.</span><span class=\"n\">messages</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">messages</span><span class=\"p\">.</span><span class=\"n\">messages</span><span class=\"p\">);</span>\n\n  <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div> </div>\n </li>\n</ul>\n\n<h2 id=\"2-cyclone_ros1_node\">2. cyclone_ros1_node</h2>\n<p>cyclone_ros1_node의 구조는 다음과 같다.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>cyclone_ros1_node\n├── CMakeLists.txt\n├── launch\n│   └── cyclone_ros1_node.launch\n├── msg\n│   ├── IntNumber.msg\n│   ├── Msg.msg\n│   └── StrString.msg\n├── package.xml\n├── README.md\n└── src\n    ├── main.cpp\n    ├── ROS1NodeConfig.cpp\n    ├── ROS1NodeConfig.hpp\n    ├── ROS1Node.cpp\n    └── ROS1Node.hpp\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">msg</code>는 토픽의 pub 또는 sub을 하기 위해 message generation한 폴더이다.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">main.cpp</code>는 메인 함수가 구현되어 있는 파일이다.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">ROS1NodeConfig</code>는 노드에 필요한 configuration을 정의한 파일이다.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">ROS1Node</code>는 ros1 노드로써, 토픽을 pub/sub 하고, dds 통신을 위한 handler가 선언되어 있는 파일이다.</li>\n</ul>\n\n<p><code class=\"language-plaintext highlighter-rouge\">ROS1Node.cpp</code>의 일부를 설명하면 다음과 같다.</p>\n\n<ul>\n <li>먼저 ROS1Node를 생성하는 부분이다. cyclone_bridge에서 config를 가져오고, 해당 config를 이용하여 cyclone_bridge의 ROS1Bridge 객체를 생성한다. 이렇게 생성된 ros1_node는 ros1_bridge 객체를 이용하여 dds 통신을 할 것이다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">ROS1Node</span><span class=\"o\">::</span><span class=\"n\">SharedPtr</span> <span class=\"n\">ROS1Node</span><span class=\"o\">::</span><span class=\"n\">make</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">ROS1NodeConfig</span><span class=\"o\">&amp;</span> <span class=\"n\">_config</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"n\">SharedPtr</span> <span class=\"n\">ros1_node</span> <span class=\"o\">=</span> <span class=\"n\">SharedPtr</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">ROS1Node</span><span class=\"p\">(</span><span class=\"n\">_config</span><span class=\"p\">));</span>\n<span class=\"n\">ros1_node</span><span class=\"o\">-&gt;</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">reset</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">NodeHandle</span><span class=\"p\">(</span><span class=\"s\">\"ros1_node\"</span><span class=\"p\">));</span>\n\n<span class=\"c1\">/// Starting the ros1 node</span>\n<span class=\"n\">ROS1Config</span> <span class=\"n\">ros1_config</span> <span class=\"o\">=</span> <span class=\"n\">_config</span><span class=\"p\">.</span><span class=\"n\">get_ros1_config</span><span class=\"p\">();</span>\n<span class=\"n\">ROS1Bridge</span><span class=\"o\">::</span><span class=\"n\">SharedPtr</span> <span class=\"n\">ros1_bridge</span> <span class=\"o\">=</span> <span class=\"n\">ROS1Bridge</span><span class=\"o\">::</span><span class=\"n\">make</span><span class=\"p\">(</span><span class=\"n\">ros1_config</span><span class=\"p\">);</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">ros1_bridge</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"nb\">nullptr</span><span class=\"p\">;</span>\n\n<span class=\"n\">ros1_node</span><span class=\"o\">-&gt;</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">Fields</span><span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">ros1_bridge</span><span class=\"p\">)</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">return</span> <span class=\"n\">ros1_node</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div> </div>\n </li>\n <li>start 함수는 메시지를 입력받을 <code class=\"language-plaintext highlighter-rouge\">send_topic_sub</code>과 리턴받은 값을 출력할 <code class=\"language-plaintext highlighter-rouge\">read_topic_pub</code> 토픽을 생성한다. 그리고, ros2 노드로부터 리턴값을 받기 위해 <code class=\"language-plaintext highlighter-rouge\">read_thread</code>라는 쓰레드를 생성한다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"n\">ROS1Node</span><span class=\"o\">::</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">Fields</span> <span class=\"n\">_fields</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">_fields</span><span class=\"p\">);</span>\n\n<span class=\"n\">read_rate</span><span class=\"p\">.</span><span class=\"n\">reset</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">Rate</span><span class=\"p\">(</span><span class=\"n\">ros1_node_config</span><span class=\"p\">.</span><span class=\"n\">read_frequency</span><span class=\"p\">));</span>\n\n<span class=\"n\">send_topic_sub</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">subscribe</span><span class=\"p\">(</span>\n    <span class=\"n\">ros1_node_config</span><span class=\"p\">.</span><span class=\"n\">ros1_to_ros2_topic</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">ROS1Node</span><span class=\"o\">::</span><span class=\"n\">send_topic_cb</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">);</span>\n\n<span class=\"n\">read_topic_pub</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">advertise</span><span class=\"o\">&lt;</span><span class=\"n\">cyclone_ros1_node</span><span class=\"o\">::</span><span class=\"n\">Msg</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">ros1_node_config</span><span class=\"p\">.</span><span class=\"n\">ros2_to_ros1_topic</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">);</span>\n\n<span class=\"n\">read_thread</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"kr\">thread</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ROS1Node</span><span class=\"o\">::</span><span class=\"n\">read_thread_fn</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n</code></pre>  </div> </div>\n </li>\n <li>dds 토픽을 send하는 부분이다. <code class=\"language-plaintext highlighter-rouge\">/ros1_to_ros2_topic</code> 메세지를 subscribe하면 <code class=\"language-plaintext highlighter-rouge\">send_topic_cb()</code>함수가 callback되는데, 해당 메시지에서 넘어온 int_num과, message 정보를 이용하여 업데이트 한다.</li>\n <li>업데이트 이후 <code class=\"language-plaintext highlighter-rouge\">send()</code>함수를 호출하는데, 여기서 cyclone_birdge에 정의된 messages::Msg형 변수에 데이터를 저장하고, bridge의 send함수로 전송한다.\n```cpp\nvoid ROS1Node::send_topic_cb(\n const cyclone_ros1_node::Msg&amp; _msg)\n{\nnew_number = _msg.cnt.int_num;\nnew_string = _msg.messages.messages;\nsend();\n}</li>\n</ul>\n\n<p>void ROS1Node::send()\n{\n messages::Msg ros1_to_ros2_msg;\n ros1_to_ros2_msg.cnt.int_num = new_number;\n ros1_to_ros2_msg.messages.messages = new_string;</p>\n\n<p>fields.ros1_bridge-&gt;send(ros1_to_ros2_msg);\n}</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n* 다음은 ros2 노드로부터 메시지를 read하기 위한 부분으로, `read_thread_fn()` 쓰레드에서 `read()`함수를 주기적으로 호출하고, bridge의 read함수로 해당 토픽을 읽어오게 되면 `ros2_to_ros1_msg`에 담겨져 리턴된 값을 `read_topic_pub`의 메시지 구조에 담아 publish하게 된다.\n```cpp\nvoid ROS1Node::read()\n{\n  messages::Msg ros2_to_ros1_msg;\n  if (fields.ros1_bridge-&gt;read(ros2_to_ros1_msg))\n  {\n    cyclone_ros1_node::Msg new_msg;\n\n    new_msg.cnt.int_num = ros2_to_ros1_msg.cnt.int_num;\n    new_msg.messages.messages = ros2_to_ros1_msg.messages.messages;\n\n    read_topic_pub.publish(new_msg);\n  }\n}\n\nvoid ROS1Node::read_thread_fn()\n{\n  while (node-&gt;ok())\n  {\n    read_rate-&gt;sleep();\n    \n    // read message from DDS\n    read();\n  }\n}\n</code></pre>  </div></div>\n\n<h2 id=\"5-cyclone_ros2_node\">5. cyclone_ros2_node</h2>\n<p>cyclone_ros1_node의 구조는 다음과 같다.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>cyclone_ros2_node\n├── cyclone_ros2_msgs\n│   ├── CMakeLists.txt\n│   ├── msg\n│   │   ├── IntNumber.msg\n│   │   ├── Msg.msg\n│   │   └── StrString.msg\n│   ├── package.xml\n│   └── README.md\n└── cyclone_ros2_node\n    ├── CMakeLists.txt\n    ├── launch\n    │   └── cyclone_ros2_node.xml\n    ├── package.xml\n    ├── README.md\n    └── src\n        ├── main.cpp\n        ├── ROS2NodeConfig.cpp\n        ├── ROS2NodeConfig.hpp\n        ├── ROS2Node.cpp\n        └── ROS2Node.hpp\n\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">cyclone_ros2_msgs</code> 패키지는 토픽의 pub 또는 sub을 하기 위해 message generation하기 위한 패키지이다.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">main.cpp</code>는 메인 함수가 구현되어 있는 파일이다.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">ROS2NodeConfig</code>는 노드에 필요한 configuration을 정의한 파일이다.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">ROS2Node</code>는 ros2 노드로써, 토픽을 pub/sub 하고, dds 통신을 위한 handler가 선언되어 있는 파일이다.</li>\n</ul>\n\n<p><code class=\"language-plaintext highlighter-rouge\">ROS2Node.cpp</code>의 일부를 설명하면 다음과 같다.</p>\n\n<ul>\n <li>먼저 ROS2Node를 생성하는 부분이다. cyclone_bridge에서 config를 가져오고, 해당 config를 이용하여 cyclone_bridge의 ROS2Bridge 객체를 생성한다. 이렇게 생성된 ros2_node는 ros2_bridge 객체를 이용하여 dds 통신을 할 것이다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">ROS2Node</span><span class=\"o\">::</span><span class=\"n\">SharedPtr</span> <span class=\"n\">ROS2Node</span><span class=\"o\">::</span><span class=\"n\">make</span><span class=\"p\">(</span>\n  <span class=\"k\">const</span> <span class=\"n\">ROS2NodeConfig</span><span class=\"o\">&amp;</span> <span class=\"n\">_config</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">NodeOptions</span><span class=\"o\">&amp;</span> <span class=\"n\">_node_options</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"c1\">// Starting the free fleet server node</span>\n<span class=\"n\">SharedPtr</span> <span class=\"n\">ros2_node</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">ROS2Node</span><span class=\"p\">(</span><span class=\"n\">_config</span><span class=\"p\">,</span> <span class=\"n\">_node_options</span><span class=\"p\">));</span>\n\n<span class=\"n\">ROS2Config</span> <span class=\"n\">ros2_config</span> <span class=\"o\">=</span>\n    <span class=\"n\">ros2_node</span><span class=\"o\">-&gt;</span><span class=\"n\">ros2_node_config</span><span class=\"p\">.</span><span class=\"n\">get_ros2_config</span><span class=\"p\">();</span>\n<span class=\"n\">ROS2Bridge</span><span class=\"o\">::</span><span class=\"n\">SharedPtr</span> <span class=\"n\">ros2_bridge</span> <span class=\"o\">=</span> <span class=\"n\">ROS2Bridge</span><span class=\"o\">::</span><span class=\"n\">make</span><span class=\"p\">(</span><span class=\"n\">ros2_config</span><span class=\"p\">);</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">ros2_bridge</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"nb\">nullptr</span><span class=\"p\">;</span>\n\n<span class=\"n\">ros2_node</span><span class=\"o\">-&gt;</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">Fields</span><span class=\"p\">{</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">ros2_bridge</span><span class=\"p\">)</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">return</span> <span class=\"n\">ros2_node</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div> </div>\n </li>\n <li>start 함수는 dds로 읽어온 함수를 주기적으로 콜백할 객체를 만들고, read한 메시지를 publish하기 위한 토픽을 생성한다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"n\">ROS2Node</span><span class=\"o\">::</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">Fields</span> <span class=\"n\">_fields</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">_fields</span><span class=\"p\">);</span>\n\n<span class=\"n\">read_callback_group</span> <span class=\"o\">=</span> <span class=\"n\">create_callback_group</span><span class=\"p\">(</span>\n    <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">CallbackGroupType</span><span class=\"o\">::</span><span class=\"n\">MutuallyExclusive</span><span class=\"p\">);</span>\n\n<span class=\"n\">read_timer</span> <span class=\"o\">=</span> <span class=\"n\">create_wall_timer</span><span class=\"p\">(</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">milliseconds</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ROS2Node</span><span class=\"o\">::</span><span class=\"n\">read</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">),</span>\n    <span class=\"n\">read_callback_group</span><span class=\"p\">);</span>\n\n<span class=\"n\">ros1_to_ros2_msg_pub</span> <span class=\"o\">=</span>\n    <span class=\"n\">create_publisher</span><span class=\"o\">&lt;</span><span class=\"n\">cyclone_ros2_msgs</span><span class=\"o\">::</span><span class=\"n\">msg</span><span class=\"o\">::</span><span class=\"n\">Msg</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n        <span class=\"n\">ros2_node_config</span><span class=\"p\">.</span><span class=\"n\">ros1_to_ros2_topic</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>  </div> </div>\n </li>\n <li>다음은 주기적으로 호출되는 <code class=\"language-plaintext highlighter-rouge\">read()</code> 함수로, ros2_bridge의 read 함수를 이용하여 메시지가 들어오면 <code class=\"language-plaintext highlighter-rouge\">ros1_to_ros2_msg</code>에 저장되어 있는 메시지를 publish할 메시지에 저장하여 publish 한다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"n\">ROS2Node</span><span class=\"o\">::</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"n\">messages</span><span class=\"o\">::</span><span class=\"n\">Msg</span> <span class=\"n\">ros1_to_ros2_msg</span><span class=\"p\">;</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">fields</span><span class=\"p\">.</span><span class=\"n\">ros2_bridge</span><span class=\"o\">-&gt;</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">ros1_to_ros2_msg</span><span class=\"p\">))</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">cyclone_ros2_msgs</span><span class=\"o\">::</span><span class=\"n\">msg</span><span class=\"o\">::</span><span class=\"n\">Msg</span> <span class=\"n\">new_msg</span><span class=\"p\">;</span>\n  <span class=\"n\">new_msg</span><span class=\"p\">.</span><span class=\"n\">cnt</span><span class=\"p\">.</span><span class=\"n\">int_num</span> <span class=\"o\">=</span> <span class=\"n\">ros1_to_ros2_msg</span><span class=\"p\">.</span><span class=\"n\">cnt</span><span class=\"p\">.</span><span class=\"n\">int_num</span><span class=\"p\">;</span>\n  <span class=\"n\">new_msg</span><span class=\"p\">.</span><span class=\"n\">messages</span><span class=\"p\">.</span><span class=\"n\">messages</span> <span class=\"o\">=</span> <span class=\"n\">ros1_to_ros2_msg</span><span class=\"p\">.</span><span class=\"n\">messages</span><span class=\"p\">.</span><span class=\"n\">messages</span><span class=\"p\">;</span>\n\n  <span class=\"n\">return_number</span> <span class=\"o\">=</span> <span class=\"n\">new_msg</span><span class=\"p\">.</span><span class=\"n\">cnt</span><span class=\"p\">.</span><span class=\"n\">int_num</span><span class=\"p\">;</span>\n  <span class=\"n\">return_string</span> <span class=\"o\">=</span> <span class=\"n\">new_msg</span><span class=\"p\">.</span><span class=\"n\">messages</span><span class=\"p\">.</span><span class=\"n\">messages</span><span class=\"p\">;</span>\n\n  <span class=\"n\">ros1_to_ros2_msg_pub</span><span class=\"o\">-&gt;</span><span class=\"n\">publish</span><span class=\"p\">(</span><span class=\"n\">new_msg</span><span class=\"p\">);</span>\n\n  <span class=\"n\">send</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>  </div> </div>\n </li>\n <li>다음은 <code class=\"language-plaintext highlighter-rouge\">send()</code>함수로 <code class=\"language-plaintext highlighter-rouge\">read()</code>함수에서 읽어온 메시지를 저장한 변수를 다시 담아서 리턴하는 함수이다. 이 때도 ros2_bridge의 send 함수를 이용하여 메시지를 전송한다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"n\">ROS2Node</span><span class=\"o\">::</span><span class=\"n\">send</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"n\">messages</span><span class=\"o\">::</span><span class=\"n\">Msg</span> <span class=\"n\">ros2_to_ros1_msg</span><span class=\"p\">;</span>\n<span class=\"n\">ros2_to_ros1_msg</span><span class=\"p\">.</span><span class=\"n\">cnt</span><span class=\"p\">.</span><span class=\"n\">int_num</span> <span class=\"o\">=</span> <span class=\"n\">return_number</span><span class=\"p\">;</span>\n<span class=\"n\">ros2_to_ros1_msg</span><span class=\"p\">.</span><span class=\"n\">messages</span><span class=\"p\">.</span><span class=\"n\">messages</span> <span class=\"o\">=</span> <span class=\"n\">return_string</span><span class=\"p\">;</span>\n\n<span class=\"n\">fields</span><span class=\"p\">.</span><span class=\"n\">ros2_bridge</span><span class=\"o\">-&gt;</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">ros2_to_ros1_msg</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>  </div> </div>\n </li>\n</ul>\n\n<h2 id=\"6-customizing-방법\">6. Customizing 방법</h2>\n\n<p>여기서는 DDS 통신을 이용하여 메시지를 추가하거나 메시지 구조를 변경하는 방법 등에 대해 설명한다. 그 이외의 dds 통신을 기반으로 node의 응용은 사용자의 능력에 따라 달라질 것 같다.</p>\n\n<h3 id=\"61-cyclone_bridge\">6.1 cyclone_bridge</h3>\n<ol>\n <li>새로운 메시지 구조를 만들기 위해 Messages.idl에 원하는 메시지 구조를 입력한다.</li>\n <li>idlc를 이용하여 Messages.c와 Message.h를 생성한다.</li>\n <li>Messages.idl에 선언한 메시지를 담을 수 있는 메시지를 <code class=\"language-plaintext highlighter-rouge\">cyclone_bridge/include/cyclone_bridge/messages</code>에 정의한다.</li>\n <li>DDS로 통신하고자 하는 메시지 형태를 정한다.</li>\n <li>통신하고자 하는 메시지들의 토픽명을 config에 저장한다.</li>\n <li>통신하고자 하는 메시지 형태마다 Handler를 이용하여 send용 구현체와 read용 구현체를 만든다.</li>\n <li>bridge에 해당하는 자료구조를 인자로 받은 send용 함수와 read용 함수를 만든다.</li>\n</ol>\n\n<h3 id=\"62-ros-node\">6.2 ros node</h3>\n<ol>\n <li>새로운 메시지 형태를 ros 메시지로 사용하고자 한다면 동일한 메시지 구조로 message generation을 한다.(선택 사항)</li>\n <li>ros node에서는 cyclone_bridge의 config와 bridge 객체를 가져오므로, cyclone_bridge에서 message 형태를 가져와 해당하는 메시지 구조에 담아서 read 또는 send하면 dds 통신을 활용할 수 있다.</li>\n</ol>\n","dir":"/0004Tools/0002Knowledges/0001CycloneDDS/","name":"0005ROSCycloneDDS_code.md","path":"0004Tools/0002Knowledges/0001CycloneDDS/0005ROSCycloneDDS_code.md","url":"/0004Tools/0002Knowledges/0001CycloneDDS/0005ROSCycloneDDS_code.html"},{"sort":5,"permalink":"/0004Tools/0002Knowledges/0005DB/","layout":"default","title":"DB","content":"<h1 id=\"db\">DB</h1>\n\n<ul>\n <li><a href=\"/0004Tools/0002Knowledges/0005DB/0001DB.html\">DB</a></li>\n <li><a href=\"/0004Tools/0002Knowledges/0005DB/0002SQLite.html\">SQLite</a></li>\n</ul>\n","dir":"/0004Tools/0002Knowledges/0005DB/","name":"README.md","path":"0004Tools/0002Knowledges/0005DB/README.md","url":"/0004Tools/0002Knowledges/0005DB/"},{"sort":6,"layout":"default","title":"ROS 1 Package Structure","content":"<h1 id=\"ros-1-package-structure\">ROS 1 Package Structure</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- ROS 로봇 프로그래밍(표윤석, 조한철, 정려운, 임태훈)</em></p>\n\n","dir":"/0001ROS/0001ROS1/0001Basic/","name":"0006Package.md","path":"0001ROS/0001ROS1/0001Basic/0006Package.md","url":"/0001ROS/0001ROS1/0001Basic/0006Package.html"},{"sort":6,"layout":"default","title":"dynamic reconfigure","content":"<h1 id=\"dynamic-reconfigure\">dynamic reconfigure</h1>\n\n<p><em>- <a href=\"http://wiki.ros.org/dynamic_reconfigure\">dynamic_reconfigure 위키 페이지</a></em></p>\n\n<p><em>- <a href=\"http://wiki.ros.org/dynamic_reconfigure/Tutorials\">dynamic_reconfigure Tutorials 위키 페이지</a></em></p>\n\n<p><em>- <a href=\"http://wiki.ros.org/rqt_reconfigure\">rqt_reconfigure 위키 페이지</a></em></p>\n\n<h2 id=\"1-dynamic_reconfigure\">1. dynamic_reconfigure</h2>\n<p>dynamic_reconfigure은 실행 중인 ROS 노드의 파라미터를 외부 인터페이스를 이용하여 실시간으로 변경할 수 있게 한다.</p>\n\n<h2 id=\"2-utilities\">2. Utilities</h2>\n<p>dynamic_reconfigure 파라미터를 수정하는 방법은 크게 두 가지 방법이 있다.</p>\n\n<h3 id=\"21-reconfigure-gui\">2.1 reconfigure GUI</h3>\n<p>rqt_reconfigure을 이용하는 방법으로, 실행 방법은 다음과 같다.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>rosrun rqt_reconfigure rqt_reconfigure\n</code></pre>  </div></div>\n<p>실행하면 다음과 같은 rqt 화면이 뜨고,\n<img src=\"reconfigure_gui1.png\" width=\"900\" height=\"600\" />\n다음과 같이 gui 인터페이스로 파라미터를 조절할 수 있다.\n<img src=\"reconfigure_gui2.png\" width=\"900\" height=\"600\" /></p>\n\n<h3 id=\"22-dynparam-command-line-tool\">2.2 dynparam command-line tool</h3>\n<p>dynparam 명령으로 reconfigure을 할 수 있으며, 명령어는 다음과 같다.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>rosrun dynamic_reconfigure dynparam COMMAND\n</code></pre>  </div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">COMMAN</code>의 종류는 다음과 같다.</p>\n<ul>\n <li>list : reconfigure이 가능한 node의 리스트를 보여줌\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>rosrun dynamic_reconfigure dynparam list\n</code></pre>  </div> </div>\n </li>\n <li>get node_name : node_name에 해당하는 configure을 가져옴\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>rosrun dynamic_reconfigure dynparam get /node\n</code></pre>  </div> </div>\n </li>\n <li>set node_name parameter_name parameter_value : parameter set\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>rosrun dynamic_reconfigure dynparam <span class=\"nb\">set</span> /node parameter_name value\n</code></pre>  </div> </div>\n </li>\n <li>set node_name yaml_dictionary : yaml dictionary 형태로 한 번에 여러 개의 파라미터를 설정\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>rosrun dynamic_reconfigure dynparam <span class=\"nb\">set </span>wge100_camera <span class=\"s2\">\"{'camera_url':'foo', 'brightness':58}\"</span> \n</code></pre>  </div> </div>\n </li>\n <li>set_from_parameters node_name : parameter 서버로부터 해당 노드의 configuration을 로드함\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>rosrun dynamic_reconfigure dynparam set_from_parameters /node\n</code></pre>  </div> </div>\n </li>\n <li>dump node_name file.yaml : file.yaml 파일에 해당 노드의 configuration을 dump함\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>rosrun dynamic_reconfigure dynparam dump /node dump.yaml\n</code></pre>  </div> </div>\n </li>\n <li>load node_name file.yaml : file.yaml 파일에 있는 configuration을 해당 노드에 로드함\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>rosrun dynamic_reconfigure dynparam load /node dump.yaml\n</code></pre>  </div> </div>\n </li>\n</ul>\n\n<h2 id=\"3-tutorials\">3. Tutorials</h2>\n\n<h3 id=\"31-how-to-write-your-first-cfg-file\">3.1 How to Write Your First .cfg File</h3>\n<p>먼저 dynamic_reconfigure을 하기 위해 .cfg file을 생성해야 한다.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#!/usr/bin/env python\n</span><span class=\"n\">PACKAGE</span> <span class=\"o\">=</span> <span class=\"s\">\"dynamic_tutorials\"</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dynamic_reconfigure.parameter_generator_catkin</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"n\">ParameterGenerator</span><span class=\"p\">()</span>\n\n<span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s\">\"int_param\"</span><span class=\"p\">,</span>    <span class=\"n\">int_t</span><span class=\"p\">,</span>    <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s\">\"An Integer parameter\"</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span>  <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s\">\"double_param\"</span><span class=\"p\">,</span> <span class=\"n\">double_t</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s\">\"A double parameter\"</span><span class=\"p\">,</span>    <span class=\"p\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>   <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s\">\"str_param\"</span><span class=\"p\">,</span>    <span class=\"n\">str_t</span><span class=\"p\">,</span>    <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s\">\"A string parameter\"</span><span class=\"p\">,</span>  <span class=\"s\">\"Hello World\"</span><span class=\"p\">)</span>\n<span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s\">\"bool_param\"</span><span class=\"p\">,</span>   <span class=\"n\">bool_t</span><span class=\"p\">,</span>   <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s\">\"A Boolean parameter\"</span><span class=\"p\">,</span>  <span class=\"bp\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">size_enum</span> <span class=\"o\">=</span> <span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"n\">enum</span><span class=\"p\">([</span> <span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"n\">const</span><span class=\"p\">(</span><span class=\"s\">\"Small\"</span><span class=\"p\">,</span>      <span class=\"n\">int_t</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s\">\"A small constant\"</span><span class=\"p\">),</span>\n                       <span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"n\">const</span><span class=\"p\">(</span><span class=\"s\">\"Medium\"</span><span class=\"p\">,</span>     <span class=\"n\">int_t</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">\"A medium constant\"</span><span class=\"p\">),</span>\n                       <span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"n\">const</span><span class=\"p\">(</span><span class=\"s\">\"Large\"</span><span class=\"p\">,</span>      <span class=\"n\">int_t</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">\"A large constant\"</span><span class=\"p\">),</span>\n                       <span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"n\">const</span><span class=\"p\">(</span><span class=\"s\">\"ExtraLarge\"</span><span class=\"p\">,</span> <span class=\"n\">int_t</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">\"An extra large constant\"</span><span class=\"p\">)],</span>\n                     <span class=\"s\">\"An enum to set size\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s\">\"size\"</span><span class=\"p\">,</span> <span class=\"n\">int_t</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s\">\"A size parameter which is edited via an enum\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">edit_method</span><span class=\"o\">=</span><span class=\"n\">size_enum</span><span class=\"p\">)</span>\n\n<span class=\"nb\">exit</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"n\">PACKAGE</span><span class=\"p\">,</span> <span class=\"s\">\"dynamic_tutorials\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tutorials\"</span><span class=\"p\">))</span>\n</code></pre>  </div></div>\n\n<p>.cfg 파일은 python으로 구성이 되어있으며, PACKAGE 이름을 작성하고, <code class=\"language-plaintext highlighter-rouge\">dynamic_reconfigure.parameter_generator_catkin</code>을 가져온다.</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#!/usr/bin/env python\n</span><span class=\"n\">PACKAGE</span> <span class=\"o\">=</span> <span class=\"s\">\"dynamic_tutorials\"</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dynamic_reconfigure.parameter_generator_catkin</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n</code></pre>  </div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">ParameterGenerator()</code>은 파라미터를 정의하는 객체를 생성하는 함수이다. 이 함수로 생성된 객체는 <code class=\"language-plaintext highlighter-rouge\">add()</code>함수로 파라미터를 생성한다.</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"n\">ParameterGenerator</span><span class=\"p\">()</span>\n\n<span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s\">\"int_param\"</span><span class=\"p\">,</span>    <span class=\"n\">int_t</span><span class=\"p\">,</span>    <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s\">\"An Integer parameter\"</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span>  <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s\">\"double_param\"</span><span class=\"p\">,</span> <span class=\"n\">double_t</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s\">\"A double parameter\"</span><span class=\"p\">,</span>    <span class=\"p\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>   <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s\">\"str_param\"</span><span class=\"p\">,</span>    <span class=\"n\">str_t</span><span class=\"p\">,</span>    <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s\">\"A string parameter\"</span><span class=\"p\">,</span>  <span class=\"s\">\"Hello World\"</span><span class=\"p\">)</span>\n<span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s\">\"bool_param\"</span><span class=\"p\">,</span>   <span class=\"n\">bool_t</span><span class=\"p\">,</span>   <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s\">\"A Boolean parameter\"</span><span class=\"p\">,</span>  <span class=\"bp\">True</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n<p>다음은 <code class=\"language-plaintext highlighter-rouge\">add()</code>함수의 인자이다.</p>\n<ul>\n <li>name : param 이름</li>\n <li>paramtype : param 자료형</li>\n <li>level : bitmask로, dynamic reconfigure이 callback 시 해당 parameter 값은 해당 level로 <code class=\"language-plaintext highlighter-rouge\">or</code>되어 전달된다.</li>\n <li>description : param 설명</li>\n <li>default : param 기본 값</li>\n <li>min : param 최솟값</li>\n <li>max : param 최댓값</li>\n</ul>\n\n<p>아래의 코드는 <code class=\"language-plaintext highlighter-rouge\">enum</code> 구조의 파라미터를 생성하는 예시이다.<code class=\"language-plaintext highlighter-rouge\">gen.enum()</code>함수를 이용하여 상수 목록을 만들고, 이를 <code class=\"language-plaintext highlighter-rouge\">add()</code> 생성자를 이용하여 파라미터를 생성한다.</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">size_enum</span> <span class=\"o\">=</span> <span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"n\">enum</span><span class=\"p\">([</span> <span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"n\">const</span><span class=\"p\">(</span><span class=\"s\">\"Small\"</span><span class=\"p\">,</span>      <span class=\"n\">int_t</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s\">\"A small constant\"</span><span class=\"p\">),</span>\n                       <span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"n\">const</span><span class=\"p\">(</span><span class=\"s\">\"Medium\"</span><span class=\"p\">,</span>     <span class=\"n\">int_t</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">\"A medium constant\"</span><span class=\"p\">),</span>\n                       <span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"n\">const</span><span class=\"p\">(</span><span class=\"s\">\"Large\"</span><span class=\"p\">,</span>      <span class=\"n\">int_t</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">\"A large constant\"</span><span class=\"p\">),</span>\n                       <span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"n\">const</span><span class=\"p\">(</span><span class=\"s\">\"ExtraLarge\"</span><span class=\"p\">,</span> <span class=\"n\">int_t</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">\"An extra large constant\"</span><span class=\"p\">)],</span>\n                     <span class=\"s\">\"An enum to set size\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s\">\"size\"</span><span class=\"p\">,</span> <span class=\"n\">int_t</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s\">\"A size parameter which is edited via an enum\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">edit_method</span><span class=\"o\">=</span><span class=\"n\">size_enum</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<p>마지막 라인의 <code class=\"language-plaintext highlighter-rouge\">exit()</code>함수는 <code class=\"language-plaintext highlighter-rouge\">gen.generate()</code>함수를 이용하여 해당 PACKAGE의 파일을 생성하고 종료하는 명령이다. <code class=\"language-plaintext highlighter-rouge\">gen.generate()</code>함수의 두 번째 매개변수는 실행 시 사용되는 노드 이름이며, 세 번째 매개변수는 이 생성된 파일을 가져올 때 사용되는 prefix이다.(예: [name]Config.h 또는 [name]Config.py)</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">exit</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"n\">PACKAGE</span><span class=\"p\">,</span> <span class=\"s\">\"dynamic_tutorials\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tutorials\"</span><span class=\"p\">))</span>\n</code></pre>  </div></div>\n\n<p>다음으로 .cfg 파일을 실행하능하게 하기 위하여 다음의 명령을 사용한다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">chmod </span>a+x cfg/Tutorials.cfg\n</code></pre>  </div></div>\n<p>그리고 CMakeLists.txt에 추가한다.</p>\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#add dynamic reconfigure api</span>\n<span class=\"c1\">#find_package(catkin REQUIRED dynamic_reconfigure)</span>\n<span class=\"nf\">generate_dynamic_reconfigure_options</span><span class=\"p\">(</span>\n  cfg/Tutorials.cfg\n  <span class=\"c1\">#...</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># make sure configure headers are built before any node using them</span>\n<span class=\"nb\">add_dependencies</span><span class=\"p\">(</span>example_node <span class=\"si\">${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"si\">}</span>_gencfg<span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<h3 id=\"32-setting-up-dynamic-reconfigure-for-a-node-python\">3.2 Setting up Dynamic Reconfigure for a Node (python)</h3>\n<p>Python 노드에서 dynamic_reconfigure을 적용하는 방법을 볼 것이다.</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#!/usr/bin/env python\n</span>\n<span class=\"kn\">import</span> <span class=\"nn\">rospy</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dynamic_reconfigure.server</span> <span class=\"kn\">import</span> <span class=\"n\">Server</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dynamic_tutorials.cfg</span> <span class=\"kn\">import</span> <span class=\"n\">TutorialsConfig</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"p\">):</span>\n    <span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">loginfo</span><span class=\"p\">(</span><span class=\"s\">\"\"\"Reconfigure Request: {int_param}, {double_param},\\ \n          {str_param}, {bool_param}, {size}\"\"\"</span><span class=\"p\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">init_node</span><span class=\"p\">(</span><span class=\"s\">\"dynamic_tutorials\"</span><span class=\"p\">,</span> <span class=\"n\">anonymous</span> <span class=\"o\">=</span> <span class=\"bp\">False</span><span class=\"p\">)</span>\n\n    <span class=\"n\">srv</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">(</span><span class=\"n\">TutorialsConfig</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"p\">)</span>\n    <span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">spin</span><span class=\"p\">()</span>\n</code></pre>  </div></div>\n\n<p>처음에 <code class=\"language-plaintext highlighter-rouge\">rospy</code> 및 <code class=\"language-plaintext highlighter-rouge\">dynamic_reconfigure.server</code> 클래스를 가져오고, 앞서 만든 <code class=\"language-plaintext highlighter-rouge\">dynamic_tutorials.cfg</code>의 <code class=\"language-plaintext highlighter-rouge\">TutorialsConfig</code>를 가져온다.</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#!/usr/bin/env python\n</span>\n<span class=\"kn\">import</span> <span class=\"nn\">rospy</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dynamic_reconfigure.server</span> <span class=\"kn\">import</span> <span class=\"n\">Server</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dynamic_tutorials.cfg</span> <span class=\"kn\">import</span> <span class=\"n\">TutorialsConfig</span>\n</code></pre>  </div></div>\n\n<p>다음은 <code class=\"language-plaintext highlighter-rouge\">callback()</code>함수의 정의로, dynamic_reconfigure이 실행되면 수행되는 callback 함수이다. 여기서는 callback 시 간단하게 config에 대한 업데이트를 출력하는 것이 구현되어 있다. 만약 해당 config의 parameter로 해당 노드의 parameter를 변경하고자 할 때, config에 해당하는 parameter를 현재 노드의 parameter에 대입하면 된다.</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"p\">):</span>\n    <span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">loginfo</span><span class=\"p\">(</span><span class=\"s\">\"\"\"Reconfiugre Request: {int_param}, {double_param},\\ \n          {str_param}, {bool_param}, {size}\"\"\"</span><span class=\"p\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">config</span>\n</code></pre>  </div></div>\n\n<p>마지막으로 노드를 초기화 하고, 콜백 기능을 구현한 부분이다.</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">init_node</span><span class=\"p\">(</span><span class=\"s\">\"dynamic_tutorials\"</span><span class=\"p\">,</span> <span class=\"n\">anonymous</span> <span class=\"o\">=</span> <span class=\"bp\">False</span><span class=\"p\">)</span>\n\n    <span class=\"n\">srv</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">(</span><span class=\"n\">TutorialsConfig</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"p\">)</span>\n    <span class=\"n\">rospy</span><span class=\"p\">.</span><span class=\"n\">spin</span><span class=\"p\">()</span>\n</code></pre>  </div></div>\n<h3 id=\"33-setting-up-dynamic-reconfigure-for-a-node-cpp\">3.3 Setting up Dynamic Reconfigure for a Node (cpp)</h3>\n<p>Cpp 노드에서 dynamic_reconfigure을 적용하는 방법을 볼 것이다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;ros/ros.h&gt;\n</span>\n<span class=\"cp\">#include &lt;dynamic_reconfigure/server.h&gt;\n#include &lt;dynamic_tutorials/TutorialsConfig.h&gt;\n</span>\n<span class=\"kt\">void</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"n\">dynamic_tutorials</span><span class=\"o\">::</span><span class=\"n\">TutorialsConfig</span> <span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"kt\">uint32_t</span> <span class=\"n\">level</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">ROS_INFO</span><span class=\"p\">(</span><span class=\"s\">\"Reconfigure Request: %d %f %s %s %d\"</span><span class=\"p\">,</span> \n            <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">int_param</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">double_param</span><span class=\"p\">,</span> \n            <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">str_param</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">(),</span> \n            <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">bool_param</span><span class=\"o\">?</span><span class=\"s\">\"True\"</span><span class=\"o\">:</span><span class=\"s\">\"False\"</span><span class=\"p\">,</span> \n            <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">,</span> <span class=\"s\">\"dynamic_tutorials\"</span><span class=\"p\">);</span>\n\n  <span class=\"n\">dynamic_reconfigure</span><span class=\"o\">::</span><span class=\"n\">Server</span><span class=\"o\">&lt;</span><span class=\"n\">dynamic_tutorials</span><span class=\"o\">::</span><span class=\"n\">TutorialsConfig</span><span class=\"o\">&gt;</span> <span class=\"n\">server</span><span class=\"p\">;</span>\n  <span class=\"n\">dynamic_reconfigure</span><span class=\"o\">::</span><span class=\"n\">Server</span><span class=\"o\">&lt;</span><span class=\"n\">dynamic_tutorials</span><span class=\"o\">::</span><span class=\"n\">TutorialsConfig</span><span class=\"o\">&gt;::</span><span class=\"n\">CallbackType</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n\n  <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">callback</span><span class=\"p\">,</span> <span class=\"n\">_1</span><span class=\"p\">,</span> <span class=\"n\">_2</span><span class=\"p\">);</span>\n  <span class=\"n\">server</span><span class=\"p\">.</span><span class=\"n\">setCallback</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">);</span>\n\n  <span class=\"n\">ROS_INFO</span><span class=\"p\">(</span><span class=\"s\">\"Spinning node\"</span><span class=\"p\">);</span>\n  <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">spin</span><span class=\"p\">();</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<p>먼저 dynamic_reconfigure에 필요한 헤더파일과, 앞서 정의한 TutorialsConfig 헤더파일을 가져온다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;ros/ros.h&gt;\n</span>\n<span class=\"cp\">#include &lt;dynamic_reconfigure/server.h&gt;\n#include &lt;dynamic_tutorials/TutorialsConfig.h&gt;\n</span></code></pre>  </div></div>\n\n<p>다음은 <code class=\"language-plaintext highlighter-rouge\">callback()</code>함수에 대한 정의로, dynamic_reconfigure이 수행될 때 callback되는 함수이다. <code class=\"language-plaintext highlighter-rouge\">config</code> 인자는 적용하고자 하는 configuration이고, <code class=\"language-plaintext highlighter-rouge\">level</code>은 변경된 파라미터의 모든 레벨 값을 <code class=\"language-plaintext highlighter-rouge\">or</code> 연산으로 계산된 결과이다. 여기서는 새로운 config에 대해 출력하는 역할을 수행한다. 만약 해당 config의 parameter로 해당 노드의 parameter를 변경하고자 할 때, config에 해당하는 parameter를 현재 노드의 parameter에 대입하면 된다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"n\">dynamic_tutorials</span><span class=\"o\">::</span><span class=\"n\">TutorialsConfig</span> <span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"kt\">uint32_t</span> <span class=\"n\">level</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">ROS_INFO</span><span class=\"p\">(</span><span class=\"s\">\"Reconfigure Request: %d %f %s %s %d\"</span><span class=\"p\">,</span> \n            <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">int_param</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">double_param</span><span class=\"p\">,</span> \n            <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">str_param</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">(),</span> \n            <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">bool_param</span><span class=\"o\">?</span><span class=\"s\">\"True\"</span><span class=\"o\">:</span><span class=\"s\">\"False\"</span><span class=\"p\">,</span> \n            <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">main()</code>함수에서 우리가 원하는 configuration 형태의 dynamic_reconfigure server를 정의한다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">,</span> <span class=\"s\">\"dynamic_tutorials\"</span><span class=\"p\">);</span>\n\n  <span class=\"n\">dynamic_reconfigure</span><span class=\"o\">::</span><span class=\"n\">Server</span><span class=\"o\">&lt;</span><span class=\"n\">dynamic_tutorials</span><span class=\"o\">::</span><span class=\"n\">TutorialsConfig</span><span class=\"o\">&gt;</span> <span class=\"n\">server</span><span class=\"p\">;</span>\n</code></pre>  </div></div>\n\n<p>다음으로 callback을 호출하는 변수를 선언하고, 이를 <code class=\"language-plaintext highlighter-rouge\">setCallback()</code>함수를 이용하여 dynamic_reconfigure이 수행되면 해당 server에서 callback을 수행한다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"n\">dynamic_reconfigure</span><span class=\"o\">::</span><span class=\"n\">Server</span><span class=\"o\">&lt;</span><span class=\"n\">dynamic_tutorials</span><span class=\"o\">::</span><span class=\"n\">TutorialsConfig</span><span class=\"o\">&gt;::</span><span class=\"n\">CallbackType</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n\n  <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">callback</span><span class=\"p\">,</span> <span class=\"n\">_1</span><span class=\"p\">,</span> <span class=\"n\">_2</span><span class=\"p\">);</span>\n  <span class=\"n\">server</span><span class=\"p\">.</span><span class=\"n\">setCallback</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">);</span>\n</code></pre>  </div></div>\n\n<p>마지막으로 <code class=\"language-plaintext highlighter-rouge\">ros::spin()</code>함수를 이용하여 해당 노드를 지속시킨다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"n\">ROS_INFO</span><span class=\"p\">(</span><span class=\"s\">\"Spinning node\"</span><span class=\"p\">);</span>\n  <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">spin</span><span class=\"p\">();</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"err\">}</span>\n</code></pre>  </div></div>\n","dir":"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/","name":"0006DynamicReconfigure.md","path":"0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0006DynamicReconfigure.md","url":"/0001ROS/0001ROS1/0002Intermediate/0001Actionlib/0006DynamicReconfigure.html"},{"sort":6,"layout":"default","title":"Costmap","content":"<h1 id=\"costmap\">Costmap</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n\n<p><em>- <a href=\"http://wiki.ros.org/costmap_2d\">costmap_2d 위키페이지</a></em></p>\n\n<h2 id=\"1-costmap\">1. costmap</h2>\n<p>costmap은 센서데이터를 이용한 2d 또는 3d 기반의 장애물의 코스트를 부여하여, 로봇의 충돌을 피하기 위해 설정된 맵이다. 이 코스트는 설정한 <code class=\"language-plaintext highlighter-rouge\">inflation_radius</code>를 기반으로 cost를 map에 부여한다.</p>\n\n<h2 id=\"2-costmap_2d\">2. costmap_2d</h2>\n<p>costmap_2d 패키지는 <code class=\"language-plaintext highlighter-rouge\">costmap_2d::Costmap2DROS</code> 객체를 이용하여 구현되며, 정적 맵에 대한 cost부여 및 동적 장애물에 대한 cost를 부여하며, 센서 높이(z방향)에 해당하는 xy 평면의 2d costmap을 구현한다. <code class=\"language-plaintext highlighter-rouge\">costmap_2d::Costmap2D</code> 클래스를 통해 2차원 costmap을 저장하고 접근을 할 수 있다.</p>\n\n<h2 id=\"3-marking-and-clearing\">3. Marking and Clearing</h2>\n<p>costmap은 센서 데이터를 자동적으로 가져와 costmap을 구현한다. 이 때, 각 센서데이터를 이용하여 cost를 생성하거나 제거하는데 사용된다. <code class=\"language-plaintext highlighter-rouge\">Marking</code>은 맵 상의 셀의 cost를 나타내는 작업이며, <code class=\"language-plaintext highlighter-rouge\">Clearing</code>은 센싱되지 않는 공간에 대한 cost를 제거하는 작업이다. 만약 3차원의 센서데이터를 받는다면, 장애물의 높이에 대한 정보는 2차원 costmap에 투영된다.</p>\n\n<h2 id=\"4-occupied-free-and-unknown-space\">4. Occupied, Free, and Unknown Space</h2>\n<p>costmap의 각 셀은 <code class=\"language-plaintext highlighter-rouge\">Occupied</code>, <code class=\"language-plaintext highlighter-rouge\">Free</code>, <code class=\"language-plaintext highlighter-rouge\">Unknown Space</code>로 표현된다. <code class=\"language-plaintext highlighter-rouge\">Occupied</code> 셀은 <code class=\"language-plaintext highlighter-rouge\">costmap_2d::LETHAL_OBSTACLE</code> 객체에 할당되며, <code class=\"language-plaintext highlighter-rouge\">Free</code> 셀은 <code class=\"language-plaintext highlighter-rouge\">costmap_2d::FREE_SPACE</code> 객체에 할당되고, <code class=\"language-plaintext highlighter-rouge\">Unknwon Space</code> 셀은 <code class=\"language-plaintext highlighter-rouge\">costmap_2d::NO_INFORMATION</code> 객체에 할당된다.</p>\n\n<h2 id=\"5-map-updates\">5. Map Updates</h2>\n<p>costmap은 <code class=\"language-plaintext highlighter-rouge\">update_frequency</code> 주기에 따라 업데이트 된다. 정해진 주기마다 센서 데이터가 들어오고, costmap의 <code class=\"language-plaintext highlighter-rouge\">Marking</code>과 <code class=\"language-plaintext highlighter-rouge\">Clearing</code> 작업을 하며, <code class=\"language-plaintext highlighter-rouge\">Occupied</code> 셀의 적절한 cost를 부여하여 <code class=\"language-plaintext highlighter-rouge\">inflation_radius</code>에 맞게 cost를 맵에 투영시킨다.</p>\n\n<h2 id=\"6-tf\">6. tf</h2>\n<p>센서 데이터를 costmap에 투영시키기 위하여 tf를 사용하는데, 이 tf 트리가 지속적으로 업데이트가 되어야 한다. 이는 <code class=\"language-plaintext highlighter-rouge\">global_frame</code>, <code class=\"language-plaintext highlighter-rouge\">robot_base_frame</code>, <code class=\"language-plaintext highlighter-rouge\">sensor_base_frame</code>에 할당되는 tf 트리가 최신상태로 업데이트 되어야 한다. <code class=\"language-plaintext highlighter-rouge\">transform_tolerance</code> 파라미터는 이러한 tf트리의 업데이트 지연 시간의 허용 시간을 설정한다.</p>\n\n<h2 id=\"7-inflation\">7. Inflation</h2>\n<p><img src=\"inflation.png\" width=\"800\" height=\"550\" /></p>\n\n<p>Inflation은 장애물로부터 일정 거리만큼 cost를 부여하여, 장애물이 점유함을 나타내는데, 이 cost는 장애물로부터 멀어질 수록 낮아진다. costmap의 상태를 정의하기 위해 5가지의 상태를 정의하였다.</p>\n\n<ol>\n <li>Lethal : 셀 안에 장애물이 있는 상태로, 로봇이 Lethal 셀 안에 있으면 장애물과 충돌하게 되는 영역이다.</li>\n <li>Inscribed : 셀이 실제 장애물로부터 떨어져 있는 거리가 로봇의 반경보다 작은 영역으로, 이 경우에도 로봇이 장애물과 충돌하게 되는 영역이다.</li>\n <li>Possibly circumscribed : Inscribed와 유사하지만, 셀이 실제 장애물로부터 떨어져 있는 거리가 로봇의 반경과 같은 영역으로, 로봇이 장애물과 충돌할 가능성이 있는 영역이다.</li>\n <li>Freespace : 비용이 0인 영역으로, 로봇이 장애물과 충돌하지 않는 안전한 영역이다.</li>\n <li>Unknown : 주어진 셀에 대하여 정보가 없음을 나타낸다.</li>\n</ol>\n\n<h2 id=\"8-map-types\">8. Map Types</h2>\n<p>costmap_2d::Costmap2DROS 객체를 초기화하는 방법은 두 가지가 있다.</p>\n\n<p>첫 번째 방법은 static map의 장애물 정보를 이용하여 초기화하는 방법이고, 두 번째 방법은 rolling_window 파라미터를 이용하는 방법으로 이 방법은 로봇 주변의 일정 크기의 local map 안의 장애물 정보만 사용하고, 그 이외의 영역의 맵에서의 장애물 정보는 삭제하는 방법이다. 첫 번째 방법은 global_costmap을 구현하는데 사용되고, 두 번째 방법은 local_costmap을 구현하는데 주로 사용된다.</p>\n\n<h2 id=\"9-api\">9. API</h2>\n\n<h3 id=\"91-costmap2dros\">9.1 Costmap2DROS</h3>\n<p>costmap_2d::Costmap2DROS 객체는 costmap_2d::Costmap2D 객체를 랩핑한 객체이다. costmap_2d::Costmap2D 객체는 C++ ROS 랩퍼로 초기화 시 지정된 ROS namespace 내에서 동작한다.</p>\n\n<h3 id=\"911-subscribed-topics\">9.1.1 Subscribed Topics</h3>\n<ul>\n <li>~[name]/footprint(<a href=\"http://docs.ros.org/en/api/geometry_msgs/html/msg/Polygon.html\">geometry_msgs/Polygon</a>) : 로봇의 footprint에 대한 메세지이다.</li>\n</ul>\n\n<h3 id=\"912-published-topics\">9.1.2 Published Topics</h3>\n<ul>\n <li>~[name]/costmap(<a href=\"http://docs.ros.org/en/api/nav_msgs/html/msg/OccupancyGrid.html\">nav_msgs/OccupancyGrid</a>) : costmap의 cost 값을 나타낸다.</li>\n <li>~[name]/costmap_updates(<a href=\"http://docs.ros.org/en/api/map_msgs/html/msg/OccupancyGridUpdate.html\">map_msgs/OccupancyGridUpdate</a>) : costmap의 업데이트된 map에 대한 값</li>\n <li>~[name]/voxel_grid(<a href=\"http://docs.ros.org/en/api/costmap_2d/html/msg/VoxelGrid.html\">costmap_2d/VoxelGrid</a>) : 점유에 대한 표시를 voxel 형태로 나타내고 싶을 때 선택적으로 사용되는 메세지 형태이다.</li>\n</ul>\n\n<h3 id=\"913-parameters\">9.1.3 Parameters</h3>\n<p><a href=\"http://wiki.ros.org/costmap_2d\">costmap_2d 위키페이지</a>의 8.1.4 Parameters 부분을 참조하여, parameter 값 설정 시 참고하면 된다.</p>\n\n<h2 id=\"92-layer-specifications\">9.2 Layer Specifications</h2>\n<h3 id=\"921-static-map-layer\">9.2.1 Static Map Layer</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">static layer</code>는 SLAM으로 생성된 바뀌지 않는 costmap이다.</p>\n\n<h3 id=\"922-obstacle-map-layer\">9.2.2 Obstacle Map Layer</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">obstacle layer</code>는 센서 데이터로 감지된 장애물에 의해 생성된 costmap이다. <code class=\"language-plaintext highlighter-rouge\">ObstacleCostmapPlugin</code>은 2차원으로 장애물 정보를 생성하는 반면, <a href=\"http://wiki.ros.org/costmap_2d/hydro/obstacles#VoxelCostmapPlugin\"><code class=\"language-plaintext highlighter-rouge\">VoxelCostmapPlugin</code></a>은 3차원으로 장애물 정보를 생성한다.</p>\n\n<h3 id=\"923-inflation-layer\">9.2.3 Inflation Layer</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">Inflation layer</code>는 장애물 주위에 cost를 일정 범위만큼 생성한다.</p>\n\n<h3 id=\"924-other-layers\">9.2.4 Other Layers</h3>\n<p><a href=\"http://wiki.ros.org/pluginlib\">pluginlib</a>을 통해서 커스텀한 costmap layer를 만들 수 있다.</p>\n","dir":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/","name":"0006Costmap.md","path":"0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0006Costmap.md","url":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0006Costmap.html"},{"sort":6,"layout":"default","title":"Launch System","content":"<h1 id=\"launch-system\">Launch System</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- ROS 2로 시작하는 로봇 프로그래밍(표윤석, 임태훈)</em></p>\n\n<p><em>- <a href=\"https://docs.ros.org/en/foxy/Tutorials/Launch-Files/Creating-Launch-Files.html\">ROS 2.0 foxy Doc(Creating a launch file)</a></em></p>\n\n<p><em>- <a href=\"https://docs.ros.org/en/foxy/Guides/Launch-file-different-formats.html\">ROS 2.0 foxy Doc(Using Python, XML, and YAML for ROS 2 Launch Files)</a></em></p>\n\n<h2 id=\"1-launch-system\">1. Launch system</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">Launch</code>는 복수의 노드를 함께 실행시키도록 하며, 노드 간의 메시지를 주고받을 수 있게 한다. 이 때, 노드를 실행할 때 패키지의 매개변수나 노드 이름, 노드 네임스페이스, 환경변수 변경 등을 설정할 수 있다.</p>\n\n<h2 id=\"2-launch-파일의-종류\">2. Launch 파일의 종류</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">ROS 2.0</code>에서 사용하는 <code class=\"language-plaintext highlighter-rouge\">launch</code> 파일에는 <code class=\"language-plaintext highlighter-rouge\">.launch.py</code> 형태와 ROS 1.0과 같은 <code class=\"language-plaintext highlighter-rouge\">XML</code> 형태와 마지막으로 <code class=\"language-plaintext highlighter-rouge\">YAML</code> 형태가 있다.</p>\n\n<h2 id=\"3-launchpy-작성\">3. .launch.py 작성</h2>\n<p>다음은 foxy documentation의 <a href=\"https://docs.ros.org/en/foxy/How-To-Guides/Launch-file-different-formats.html\">example.launch.py</a>를 가져왔다.</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># example.launch.py\n</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">ament_index_python</span> <span class=\"kn\">import</span> <span class=\"n\">get_package_share_directory</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">launch</span> <span class=\"kn\">import</span> <span class=\"n\">LaunchDescription</span>\n<span class=\"kn\">from</span> <span class=\"nn\">launch.actions</span> <span class=\"kn\">import</span> <span class=\"n\">DeclareLaunchArgument</span>\n<span class=\"kn\">from</span> <span class=\"nn\">launch.actions</span> <span class=\"kn\">import</span> <span class=\"n\">IncludeLaunchDescription</span>\n<span class=\"kn\">from</span> <span class=\"nn\">launch.actions</span> <span class=\"kn\">import</span> <span class=\"n\">GroupAction</span>\n<span class=\"kn\">from</span> <span class=\"nn\">launch.launch_description_sources</span> <span class=\"kn\">import</span> <span class=\"n\">PythonLaunchDescriptionSource</span>\n<span class=\"kn\">from</span> <span class=\"nn\">launch.substitutions</span> <span class=\"kn\">import</span> <span class=\"n\">LaunchConfiguration</span>\n<span class=\"kn\">from</span> <span class=\"nn\">launch.substitutions</span> <span class=\"kn\">import</span> <span class=\"n\">TextSubstitution</span>\n<span class=\"kn\">from</span> <span class=\"nn\">launch_ros.actions</span> <span class=\"kn\">import</span> <span class=\"n\">Node</span>\n<span class=\"kn\">from</span> <span class=\"nn\">launch_ros.actions</span> <span class=\"kn\">import</span> <span class=\"n\">PushRosNamespace</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">generate_launch_description</span><span class=\"p\">():</span>\n\n    <span class=\"c1\"># args that can be set from the command line or a default will be used\n</span>    <span class=\"n\">background_r_launch_arg</span> <span class=\"o\">=</span> <span class=\"n\">DeclareLaunchArgument</span><span class=\"p\">(</span>\n        <span class=\"s\">\"background_r\"</span><span class=\"p\">,</span> <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"n\">TextSubstitution</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s\">\"0\"</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">background_g_launch_arg</span> <span class=\"o\">=</span> <span class=\"n\">DeclareLaunchArgument</span><span class=\"p\">(</span>\n        <span class=\"s\">\"background_g\"</span><span class=\"p\">,</span> <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"n\">TextSubstitution</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s\">\"255\"</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">background_b_launch_arg</span> <span class=\"o\">=</span> <span class=\"n\">DeclareLaunchArgument</span><span class=\"p\">(</span>\n        <span class=\"s\">\"background_b\"</span><span class=\"p\">,</span> <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"n\">TextSubstitution</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s\">\"0\"</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">chatter_ns_launch_arg</span> <span class=\"o\">=</span> <span class=\"n\">DeclareLaunchArgument</span><span class=\"p\">(</span>\n        <span class=\"s\">\"chatter_ns\"</span><span class=\"p\">,</span> <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"n\">TextSubstitution</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s\">\"my/chatter/ns\"</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># include another launch file\n</span>    <span class=\"n\">launch_include</span> <span class=\"o\">=</span> <span class=\"n\">IncludeLaunchDescription</span><span class=\"p\">(</span>\n        <span class=\"n\">PythonLaunchDescriptionSource</span><span class=\"p\">(</span>\n            <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n                <span class=\"n\">get_package_share_directory</span><span class=\"p\">(</span><span class=\"s\">'demo_nodes_cpp'</span><span class=\"p\">),</span>\n                <span class=\"s\">'launch/topics/talker_listener.launch.py'</span><span class=\"p\">))</span>\n    <span class=\"p\">)</span>\n    <span class=\"c1\"># include another launch file in the chatter_ns namespace\n</span>    <span class=\"n\">launch_include_with_namespace</span> <span class=\"o\">=</span> <span class=\"n\">GroupAction</span><span class=\"p\">(</span>\n        <span class=\"n\">actions</span><span class=\"o\">=</span><span class=\"p\">[</span>\n            <span class=\"c1\"># push-ros-namespace to set namespace of included nodes\n</span>            <span class=\"n\">PushRosNamespace</span><span class=\"p\">(</span><span class=\"n\">LaunchConfiguration</span><span class=\"p\">(</span><span class=\"s\">'chatter_ns'</span><span class=\"p\">)),</span>\n            <span class=\"n\">IncludeLaunchDescription</span><span class=\"p\">(</span>\n                <span class=\"n\">PythonLaunchDescriptionSource</span><span class=\"p\">(</span>\n                    <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n                        <span class=\"n\">get_package_share_directory</span><span class=\"p\">(</span><span class=\"s\">'demo_nodes_cpp'</span><span class=\"p\">),</span>\n                        <span class=\"s\">'launch/topics/talker_listener.launch.py'</span><span class=\"p\">))</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># start a turtlesim_node in the turtlesim1 namespace\n</span>    <span class=\"n\">turtlesim_node</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span>\n            <span class=\"n\">package</span><span class=\"o\">=</span><span class=\"s\">'turtlesim'</span><span class=\"p\">,</span>\n            <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s\">'turtlesim1'</span><span class=\"p\">,</span>\n            <span class=\"n\">executable</span><span class=\"o\">=</span><span class=\"s\">'turtlesim_node'</span><span class=\"p\">,</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'sim'</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"c1\"># start another turtlesim_node in the turtlesim2 namespace\n</span>    <span class=\"c1\"># and use args to set parameters\n</span>    <span class=\"n\">turtlesim_node_with_parameters</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span>\n            <span class=\"n\">package</span><span class=\"o\">=</span><span class=\"s\">'turtlesim'</span><span class=\"p\">,</span>\n            <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s\">'turtlesim2'</span><span class=\"p\">,</span>\n            <span class=\"n\">executable</span><span class=\"o\">=</span><span class=\"s\">'turtlesim_node'</span><span class=\"p\">,</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'sim'</span><span class=\"p\">,</span>\n            <span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">[{</span>\n                <span class=\"s\">\"background_r\"</span><span class=\"p\">:</span> <span class=\"n\">LaunchConfiguration</span><span class=\"p\">(</span><span class=\"s\">'background_r'</span><span class=\"p\">),</span>\n                <span class=\"s\">\"background_g\"</span><span class=\"p\">:</span> <span class=\"n\">LaunchConfiguration</span><span class=\"p\">(</span><span class=\"s\">'background_g'</span><span class=\"p\">),</span>\n                <span class=\"s\">\"background_b\"</span><span class=\"p\">:</span> <span class=\"n\">LaunchConfiguration</span><span class=\"p\">(</span><span class=\"s\">'background_b'</span><span class=\"p\">),</span>\n            <span class=\"p\">}]</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"c1\"># perform remap so both turtles listen to the same command topic\n</span>    <span class=\"n\">forward_turtlesim_commands_to_second_turtlesim_node</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span>\n            <span class=\"n\">package</span><span class=\"o\">=</span><span class=\"s\">'turtlesim'</span><span class=\"p\">,</span>\n            <span class=\"n\">executable</span><span class=\"o\">=</span><span class=\"s\">'mimic'</span><span class=\"p\">,</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'mimic'</span><span class=\"p\">,</span>\n            <span class=\"n\">remappings</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                <span class=\"p\">(</span><span class=\"s\">'/input/pose'</span><span class=\"p\">,</span> <span class=\"s\">'/turtlesim1/turtle1/pose'</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s\">'/output/cmd_vel'</span><span class=\"p\">,</span> <span class=\"s\">'/turtlesim2/turtle1/cmd_vel'</span><span class=\"p\">),</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">LaunchDescription</span><span class=\"p\">([</span>\n        <span class=\"n\">background_r_launch_arg</span><span class=\"p\">,</span>\n        <span class=\"n\">background_g_launch_arg</span><span class=\"p\">,</span>\n        <span class=\"n\">background_b_launch_arg</span><span class=\"p\">,</span>\n        <span class=\"n\">chatter_ns_launch_arg</span><span class=\"p\">,</span>\n        <span class=\"n\">launch_include</span><span class=\"p\">,</span>\n        <span class=\"n\">launch_include_with_namespace</span><span class=\"p\">,</span>\n        <span class=\"n\">turtlesim_node</span><span class=\"p\">,</span>\n        <span class=\"n\">turtlesim_node_with_parameters</span><span class=\"p\">,</span>\n        <span class=\"n\">forward_turtlesim_commands_to_second_turtlesim_node</span><span class=\"p\">,</span>\n    <span class=\"p\">])</span>\n</code></pre>  </div></div>\n\n<h3 id=\"31-generate_launch_description\">3.1 generate_launch_description</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">launch</code> 파일을 작성하는데, <code class=\"language-plaintext highlighter-rouge\">generate_launch_description</code> 메소드를 기본적으로 사용한다. 해당 메소드는 <code class=\"language-plaintext highlighter-rouge\">LaunchConfiguration</code> 클래스를 이용하여 실행 관련 설정을 초기화하고, 리턴값으로 <code class=\"language-plaintext highlighter-rouge\">LaunchDescription</code> 클래스를 반환한다.</p>\n\n<h3 id=\"32-launchconfiguration\">3.2 LaunchConfiguration</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">LaunchConfiguration</code> 클래스는 <code class=\"language-plaintext highlighter-rouge\">LaunchDescription</code>에서 사용할 인자들을 생성하고 초기화시킨다.</p>\n\n<h3 id=\"33-declarelaunchargument\">3.3 DeclareLaunchArgument</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">DeclareLaunchArgument</code> 클래스는 <code class=\"language-plaintext highlighter-rouge\">LaunchConfiguration</code>으로 설정한 변수를 <code class=\"language-plaintext highlighter-rouge\">launch</code> 인자로 선언한다.</p>\n\n<h3 id=\"34-node\">3.4 Node</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">Node</code> 클래스는 실행할 노드를 설정한다. 기본적으로 <code class=\"language-plaintext highlighter-rouge\">package</code>, <code class=\"language-plaintext highlighter-rouge\">executable</code>, <code class=\"language-plaintext highlighter-rouge\">name</code>, <code class=\"language-plaintext highlighter-rouge\">parameters</code>, <code class=\"language-plaintext highlighter-rouge\">output</code>을 설정하며, 필요에 따라 <code class=\"language-plaintext highlighter-rouge\">remappings</code>, <code class=\"language-plaintext highlighter-rouge\">namespace</code>를 사용할 수 있다.</p>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">package</code> : 실행할 패키지 이름</li>\n <li><code class=\"language-plaintext highlighter-rouge\">executable</code> : 실행 가능한 노드의 이름</li>\n <li><code class=\"language-plaintext highlighter-rouge\">name</code> : 지정한 노드를 실행할 때 실제로 사용할 이름</li>\n <li><code class=\"language-plaintext highlighter-rouge\">parameters</code> : 특정 파라미터 값 또는 <code class=\"language-plaintext highlighter-rouge\">DeclareLaunchArgument</code>에서 지정한 변수 등 사용할 파라미터(파라미터가 여러 개일 때 <code class=\"language-plaintext highlighter-rouge\">{}</code> 단위로 구분)</li>\n <li><code class=\"language-plaintext highlighter-rouge\">output</code> : 로깅 설정. 기본적으로 특정 파일 이름(~/.ros/log/xxx/launch.log)에 로깅 정보가 기록되고, <code class=\"language-plaintext highlighter-rouge\">screen</code>으로 지정하면 터미널 창에 출력됨.</li>\n <li><code class=\"language-plaintext highlighter-rouge\">remappings</code> : 토픽의 이름을 변경할 수 있음.\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">...</span>\n      <span class=\"n\">Node</span><span class=\"p\">(</span>\n        <span class=\"p\">...</span>\n        <span class=\"n\">remappings</span><span class=\"o\">=</span><span class=\"p\">[</span>\n          <span class=\"p\">(</span><span class=\"s\">'/cmd_vel'</span><span class=\"p\">,</span> <span class=\"s\">'/my_cmd_vel'</span><span class=\"p\">),</span>\n        <span class=\"p\">]</span>\n        <span class=\"p\">...</span>\n      <span class=\"p\">)</span>\n<span class=\"p\">...</span>\n</code></pre>  </div> </div>\n </li>\n <li>namespace : 노드, 토픽, 서비스, 액션, 파라미터 등의 접두사 추가\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">...</span>\n<span class=\"k\">def</span> <span class=\"nf\">generate_launch_description</span><span class=\"p\">():</span>\n  <span class=\"n\">my_robot</span> <span class=\"o\">=</span> <span class=\"n\">LaunchConfiguration</span><span class=\"p\">(</span><span class=\"s\">'my_robot'</span><span class=\"p\">)</span>\n\n  <span class=\"k\">return</span> <span class=\"n\">LaunchDescription</span><span class=\"p\">([</span>\n      <span class=\"p\">...</span>\n      <span class=\"n\">Node</span><span class=\"p\">(</span>\n        <span class=\"p\">...</span>\n        <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"n\">my_robot</span><span class=\"p\">,</span>\n        <span class=\"p\">...</span>\n      <span class=\"p\">)</span>\n      <span class=\"p\">...</span>\n  <span class=\"p\">])</span>\n</code></pre>  </div> </div>\n </li>\n</ul>\n\n<h3 id=\"35-add_action\">3.5 add_action</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">Node</code>가 여러 개 이거나, 선언할 인자가 많아서 <code class=\"language-plaintext highlighter-rouge\">return</code>할 인자가 많을 때, <code class=\"language-plaintext highlighter-rouge\">add_action</code> 함수를 이용하여 <code class=\"language-plaintext highlighter-rouge\">return</code>을 간결하게 할 수 있다.</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">generate_launch_description</span><span class=\"p\">():</span>\n    <span class=\"p\">...</span>\n\n    <span class=\"n\">launch_description</span> <span class=\"o\">=</span> <span class=\"n\">LaunchDescription</span><span class=\"p\">()</span>\n\n    <span class=\"n\">launch_description</span><span class=\"p\">.</span><span class=\"n\">add_action</span><span class=\"p\">(</span><span class=\"n\">launch</span><span class=\"p\">.</span><span class=\"n\">actions</span><span class=\"p\">.</span><span class=\"n\">DeclareLaunchArgument</span><span class=\"p\">(</span>\n      <span class=\"p\">...</span>\n    <span class=\"p\">))</span>\n\n    <span class=\"n\">first_node</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span> <span class=\"p\">...</span> <span class=\"p\">)</span>\n\n    <span class=\"n\">second_node</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span> <span class=\"p\">...</span> <span class=\"p\">)</span>\n\n    <span class=\"n\">launch_description</span><span class=\"p\">.</span><span class=\"n\">add_action</span><span class=\"p\">(</span><span class=\"n\">first_node</span><span class=\"p\">)</span>\n    <span class=\"n\">launch_description</span><span class=\"p\">.</span><span class=\"n\">add_action</span><span class=\"p\">(</span><span class=\"n\">second_node</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">launch_description</span>\n</code></pre>  </div></div>\n\n<h3 id=\"36-includelaunchdescription\">3.6 IncludeLaunchDescription</h3>\n<p>다른 <code class=\"language-plaintext highlighter-rouge\">.launch.py</code>을 불러올 때 사용하며, 다른 패키지의 <code class=\"language-plaintext highlighter-rouge\">.launch.py</code>를 불러올 때는 <code class=\"language-plaintext highlighter-rouge\">get_package_share_directory</code> 함수를 이용하여 불러올 수 있다.</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">...</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">generate_launch_description</span><span class=\"p\">():</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">LaunchDescription</span><span class=\"p\">([</span>\n        <span class=\"c1\"># 같은 패키지의 X.launch.py를 불러올 때\n</span>        <span class=\"n\">IncludeLaunchDescription</span><span class=\"p\">(</span>\n            <span class=\"n\">PythonLaunchDescriptionSource</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span><span class=\"n\">ThisLaunchFileDir</span><span class=\"p\">(),</span> <span class=\"s\">'X.launch.py'</span><span class=\"p\">]),</span>\n        <span class=\"p\">),</span>\n\n        <span class=\"c1\"># 다른 패키지 B의 Y.launch.py를 불러올 때\n</span>        <span class=\"n\">IncludeLaunchDescription</span><span class=\"p\">(</span>\n            <span class=\"n\">PythonLaunchDescriptionSource</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span><span class=\"n\">get_package_share_directory</span><span class=\"p\">(</span><span class=\"s\">'B'</span><span class=\"p\">),</span> <span class=\"s\">'Y.launch.py'</span><span class=\"p\">]),</span>\n        <span class=\"p\">),</span>\n    <span class=\"p\">])</span>\n</code></pre>  </div></div>\n\n<h2 id=\"4-xml-형태의-launch-파일-작성\">4. xml 형태의 launch 파일 작성</h2>\n<p>다음으로 launch.py 와 동일한 내용의 example.launch.xml 파일을 가져왔으며, 해당 내용은 <a href=\"~/0001ROS1/0001Basic/0005Launch-System.html\">ROS 1.0의 launch 파일</a>과 동일한 형태로 구성되어 있다.</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">&lt;!-- example.launch.xml --&gt;</span>\n\n<span class=\"nt\">&lt;launch&gt;</span>\n\n  <span class=\"c\">&lt;!-- args that can be set from the command line or a default will be used --&gt;</span>\n  <span class=\"nt\">&lt;arg</span> <span class=\"na\">name=</span><span class=\"s\">\"background_r\"</span> <span class=\"na\">default=</span><span class=\"s\">\"0\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;arg</span> <span class=\"na\">name=</span><span class=\"s\">\"background_g\"</span> <span class=\"na\">default=</span><span class=\"s\">\"255\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;arg</span> <span class=\"na\">name=</span><span class=\"s\">\"background_b\"</span> <span class=\"na\">default=</span><span class=\"s\">\"0\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;arg</span> <span class=\"na\">name=</span><span class=\"s\">\"chatter_ns\"</span> <span class=\"na\">default=</span><span class=\"s\">\"my/chatter/ns\"</span><span class=\"nt\">/&gt;</span>\n\n  <span class=\"c\">&lt;!-- include another launch file --&gt;</span>\n  <span class=\"nt\">&lt;include</span> <span class=\"na\">file=</span><span class=\"s\">\"$(find-pkg-share demo_nodes_cpp)/launch/topics/talker_listener.launch.py\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"c\">&lt;!-- include another launch file in the chatter_ns namespace--&gt;</span>\n  <span class=\"nt\">&lt;group&gt;</span>\n    <span class=\"c\">&lt;!-- push-ros-namespace to set namespace of included nodes --&gt;</span>\n    <span class=\"nt\">&lt;push-ros-namespace</span> <span class=\"na\">namespace=</span><span class=\"s\">\"$(var chatter_ns)\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;include</span> <span class=\"na\">file=</span><span class=\"s\">\"$(find-pkg-share demo_nodes_cpp)/launch/topics/talker_listener.launch.py\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/group&gt;</span>\n\n  <span class=\"c\">&lt;!-- start a turtlesim_node in the turtlesim1 namespace --&gt;</span>\n  <span class=\"nt\">&lt;node</span> <span class=\"na\">pkg=</span><span class=\"s\">\"turtlesim\"</span> <span class=\"na\">exec=</span><span class=\"s\">\"turtlesim_node\"</span> <span class=\"na\">name=</span><span class=\"s\">\"sim\"</span> <span class=\"na\">namespace=</span><span class=\"s\">\"turtlesim1\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"c\">&lt;!-- start another turtlesim_node in the turtlesim2 namespace\n      and use args to set parameters --&gt;</span>\n  <span class=\"nt\">&lt;node</span> <span class=\"na\">pkg=</span><span class=\"s\">\"turtlesim\"</span> <span class=\"na\">exec=</span><span class=\"s\">\"turtlesim_node\"</span> <span class=\"na\">name=</span><span class=\"s\">\"sim\"</span> <span class=\"na\">namespace=</span><span class=\"s\">\"turtlesim2\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">\"background_r\"</span> <span class=\"na\">value=</span><span class=\"s\">\"$(var background_r)\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">\"background_g\"</span> <span class=\"na\">value=</span><span class=\"s\">\"$(var background_g)\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">\"background_b\"</span> <span class=\"na\">value=</span><span class=\"s\">\"$(var background_b)\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/node&gt;</span>\n  <span class=\"c\">&lt;!-- perform remap so both turtles listen to the same command topic --&gt;</span>\n  <span class=\"nt\">&lt;node</span> <span class=\"na\">pkg=</span><span class=\"s\">\"turtlesim\"</span> <span class=\"na\">exec=</span><span class=\"s\">\"mimic\"</span> <span class=\"na\">name=</span><span class=\"s\">\"mimic\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;remap</span> <span class=\"na\">from=</span><span class=\"s\">\"/input/pose\"</span> <span class=\"na\">to=</span><span class=\"s\">\"/turtlesim1/turtle1/pose\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;remap</span> <span class=\"na\">from=</span><span class=\"s\">\"/output/cmd_vel\"</span> <span class=\"na\">to=</span><span class=\"s\">\"/turtlesim2/turtle1/cmd_vel\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/node&gt;</span>\n<span class=\"nt\">&lt;/launch&gt;</span>\n</code></pre>  </div></div>\n<h3 id=\"41-arguments\">4.1 arguments</h3>\n<p>launch.xml에서는 다음과 같이 파일의 첫 부분에 <code class=\"language-plaintext highlighter-rouge\">arg</code> 태그로 인자를 정의할 수 있다. 해당 인자는 이후에 가져와서 사용할 수 있으며, 상위 launch 파일이나 commandline 에서 설정이 되지 않으면 default 값으로 설정된다.</p>\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"c\">&lt;!-- args that can be set from the command line or a default will be used --&gt;</span>\n  <span class=\"nt\">&lt;arg</span> <span class=\"na\">name=</span><span class=\"s\">\"background_r\"</span> <span class=\"na\">default=</span><span class=\"s\">\"0\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;arg</span> <span class=\"na\">name=</span><span class=\"s\">\"background_g\"</span> <span class=\"na\">default=</span><span class=\"s\">\"255\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;arg</span> <span class=\"na\">name=</span><span class=\"s\">\"background_b\"</span> <span class=\"na\">default=</span><span class=\"s\">\"0\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;arg</span> <span class=\"na\">name=</span><span class=\"s\">\"chatter_ns\"</span> <span class=\"na\">default=</span><span class=\"s\">\"my/chatter/ns\"</span><span class=\"nt\">/&gt;</span>\n</code></pre>  </div></div>\n\n<h3 id=\"42-include\">4.2 include</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">include</code> 태그는 launch 파일을 불러와 실행시키는 명령어로, 해당 launch파일에 정의되어 있는 명령들을 수행한다.</p>\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"c\">&lt;!-- include another launch file --&gt;</span>\n  <span class=\"nt\">&lt;include</span> <span class=\"na\">file=</span><span class=\"s\">\"$(find-pkg-share demo_nodes_cpp)/launch/topics/talker_listener.launch.py\"</span><span class=\"nt\">/&gt;</span>\n</code></pre>  </div></div>\n\n<h3 id=\"43-group\">4.3 group</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">group</code> 태그는 동일한 namespace 아래에 여러개의 노드를 묶어서 실행시킬 때 사용되는 태그이다.</p>\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"c\">&lt;!-- include another launch file in the chatter_ns namespace--&gt;</span>\n  <span class=\"nt\">&lt;group&gt;</span>\n    <span class=\"c\">&lt;!-- push-ros-namespace to set namespace of included nodes --&gt;</span>\n    <span class=\"nt\">&lt;push-ros-namespace</span> <span class=\"na\">namespace=</span><span class=\"s\">\"$(var chatter_ns)\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;include</span> <span class=\"na\">file=</span><span class=\"s\">\"$(find-pkg-share demo_nodes_cpp)/launch/topics/talker_listener.launch.py\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/group&gt;</span>\n\n</code></pre>  </div></div>\n\n<h3 id=\"44-node\">4.4 node</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">node</code> 태그는 특정 패키지의 하나의 특정 노드를 실행시키는 명령어이다. <code class=\"language-plaintext highlighter-rouge\">node</code> 태그 아래에 <code class=\"language-plaintext highlighter-rouge\">param</code> 명령을 통해서 노드안에서 사용되는 파라미터들의 설정값을 미리 설정할 수 있으며, <code class=\"language-plaintext highlighter-rouge\">remap</code>명령을 통해 특정 토픽명을 원하는 토픽 이름으로 바꿀 수 있다.</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"c\">&lt;!-- start a turtlesim_node in the turtlesim1 namespace --&gt;</span>\n  <span class=\"nt\">&lt;node</span> <span class=\"na\">pkg=</span><span class=\"s\">\"turtlesim\"</span> <span class=\"na\">exec=</span><span class=\"s\">\"turtlesim_node\"</span> <span class=\"na\">name=</span><span class=\"s\">\"sim\"</span> <span class=\"na\">namespace=</span><span class=\"s\">\"turtlesim1\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"c\">&lt;!-- start another turtlesim_node in the turtlesim2 namespace\n      and use args to set parameters --&gt;</span>\n  <span class=\"nt\">&lt;node</span> <span class=\"na\">pkg=</span><span class=\"s\">\"turtlesim\"</span> <span class=\"na\">exec=</span><span class=\"s\">\"turtlesim_node\"</span> <span class=\"na\">name=</span><span class=\"s\">\"sim\"</span> <span class=\"na\">namespace=</span><span class=\"s\">\"turtlesim2\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">\"background_r\"</span> <span class=\"na\">value=</span><span class=\"s\">\"$(var background_r)\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">\"background_g\"</span> <span class=\"na\">value=</span><span class=\"s\">\"$(var background_g)\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;param</span> <span class=\"na\">name=</span><span class=\"s\">\"background_b\"</span> <span class=\"na\">value=</span><span class=\"s\">\"$(var background_b)\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/node&gt;</span>\n  <span class=\"c\">&lt;!-- perform remap so both turtles listen to the same command topic --&gt;</span>\n  <span class=\"nt\">&lt;node</span> <span class=\"na\">pkg=</span><span class=\"s\">\"turtlesim\"</span> <span class=\"na\">exec=</span><span class=\"s\">\"mimic\"</span> <span class=\"na\">name=</span><span class=\"s\">\"mimic\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;remap</span> <span class=\"na\">from=</span><span class=\"s\">\"/input/pose\"</span> <span class=\"na\">to=</span><span class=\"s\">\"/turtlesim1/turtle1/pose\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;remap</span> <span class=\"na\">from=</span><span class=\"s\">\"/output/cmd_vel\"</span> <span class=\"na\">to=</span><span class=\"s\">\"/turtlesim2/turtle1/cmd_vel\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/node&gt;</span>\n</code></pre>  </div></div>\n\n<h3 id=\"45-이외의-xml-파일의-태그\">4.5 이외의 xml 파일의 태그</h3>\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;launch&gt;</code> : roslaunch 구분의 시작과 끝을 나타냄</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;node&gt;</code> : 노드 실행에 대한 태그. 패키지(<code class=\"language-plaintext highlighter-rouge\">pkg</code>), 실행 시 노드명(<code class=\"language-plaintext highlighter-rouge\">name</code>), 패키지 내 실행 파일의 이름(<code class=\"language-plaintext highlighter-rouge\">type</code>, <code class=\"language-plaintext highlighter-rouge\">exec</code>), 로그 출력(<code class=\"language-plaintext highlighter-rouge\">output</code>) 등을 설정</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;machine&gt;</code> : 노드를 실행하는 PC의 이름. address, ros-root, ros-package-path 등 설정</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;include&gt;</code> : 다른 패키지나 같은 패키지에 속해 있는 다른 launch를 불러옴</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;remap&gt;</code> : 노드 이름, 토픽 이름 등의 노드에서 사용 중인 ROS 변수의 이름 변경</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;env&gt;</code> : 경로, IP 등의 환경변수를 설정</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;param&gt;</code> : 파라미터 이름, 타이프, 값 등을 설정</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;rosparam&gt;</code> : rosparam 명령과 같이, load, dump, delete 등 파라미터 정보를 확인 및 수정</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;group&gt;</code> : 노드 그룹화</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;test&gt;</code> : 노드 테스트할 때 사용</li>\n <li><code class=\"language-plaintext highlighter-rouge\">&lt;arg&gt;</code> : launch 파일 내 변수 정의</li>\n</ul>\n\n<h2 id=\"5-yaml-파일-형태의-launch-파일\">5. YAML 파일 형태의 launch 파일</h2>\n<p>다음으로 동일한 내용의 launch 파일로, yaml 파일의 형식으로 선언되어 있는 파일이다.</p>\n\n<p>해당 내용은 예제 파일의 형태를 가지고 동일한 형태로 사용해보면 좋을 것 같음.</p>\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># example.launch.yaml</span>\n\n<span class=\"na\">launch</span><span class=\"pi\">:</span>\n\n<span class=\"c1\"># args that can be set from the command line or a default will be used</span>\n<span class=\"pi\">-</span> <span class=\"na\">arg</span><span class=\"pi\">:</span>\n    <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">background_r\"</span>\n    <span class=\"na\">default</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">0\"</span>\n<span class=\"pi\">-</span> <span class=\"na\">arg</span><span class=\"pi\">:</span>\n    <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">background_g\"</span>\n    <span class=\"na\">default</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">255\"</span>\n<span class=\"pi\">-</span> <span class=\"na\">arg</span><span class=\"pi\">:</span>\n    <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">background_b\"</span>\n    <span class=\"na\">default</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">0\"</span>\n<span class=\"pi\">-</span> <span class=\"na\">arg</span><span class=\"pi\">:</span>\n    <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">chatter_ns\"</span>\n    <span class=\"na\">default</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">my/chatter/ns\"</span>\n\n\n<span class=\"c1\"># include another launch file</span>\n<span class=\"pi\">-</span> <span class=\"na\">include</span><span class=\"pi\">:</span>\n    <span class=\"na\">file</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">$(find-pkg-share</span><span class=\"nv\"> </span><span class=\"s\">demo_nodes_cpp)/launch/topics/talker_listener.launch.py\"</span>\n\n<span class=\"c1\"># include another launch file in the chatter_ns namespace</span>\n<span class=\"pi\">-</span> <span class=\"na\">group</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"na\">push-ros-namespace</span><span class=\"pi\">:</span>\n        <span class=\"na\">namespace</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">$(var</span><span class=\"nv\"> </span><span class=\"s\">chatter_ns)\"</span>\n    <span class=\"pi\">-</span> <span class=\"na\">include</span><span class=\"pi\">:</span>\n        <span class=\"na\">file</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">$(find-pkg-share</span><span class=\"nv\"> </span><span class=\"s\">demo_nodes_cpp)/launch/topics/talker_listener.launch.py\"</span>\n\n<span class=\"c1\"># start a turtlesim_node in the turtlesim1 namespace</span>\n<span class=\"pi\">-</span> <span class=\"na\">node</span><span class=\"pi\">:</span>\n    <span class=\"na\">pkg</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">turtlesim\"</span>\n    <span class=\"na\">exec</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">turtlesim_node\"</span>\n    <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">sim\"</span>\n    <span class=\"na\">namespace</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">turtlesim1\"</span>\n\n<span class=\"c1\"># start another turtlesim_node in the turtlesim2 namespace and use args to set parameters</span>\n<span class=\"pi\">-</span> <span class=\"na\">node</span><span class=\"pi\">:</span>\n    <span class=\"na\">pkg</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">turtlesim\"</span>\n    <span class=\"na\">exec</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">turtlesim_node\"</span>\n    <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">sim\"</span>\n    <span class=\"na\">namespace</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">turtlesim2\"</span>\n    <span class=\"na\">param</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span>\n      <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">background_r\"</span>\n      <span class=\"na\">value</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">$(var</span><span class=\"nv\"> </span><span class=\"s\">background_r)\"</span>\n    <span class=\"pi\">-</span>\n      <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">background_g\"</span>\n      <span class=\"na\">value</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">$(var</span><span class=\"nv\"> </span><span class=\"s\">background_g)\"</span>\n    <span class=\"pi\">-</span>\n      <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">background_b\"</span>\n      <span class=\"na\">value</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">$(var</span><span class=\"nv\"> </span><span class=\"s\">background_b)\"</span>\n\n<span class=\"c1\"># perform remap so both turtles listen to the same command topic</span>\n<span class=\"pi\">-</span> <span class=\"na\">node</span><span class=\"pi\">:</span>\n    <span class=\"na\">pkg</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">turtlesim\"</span>\n    <span class=\"na\">exec</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">mimic\"</span>\n    <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">mimic\"</span>\n    <span class=\"na\">remap</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span>\n        <span class=\"na\">from</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">/input/pose\"</span>\n        <span class=\"na\">to</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">/turtlesim1/turtle1/pose\"</span>\n    <span class=\"pi\">-</span>\n        <span class=\"na\">from</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">/output/cmd_vel\"</span>\n        <span class=\"na\">to</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">/turtlesim2/turtle1/cmd_vel\"</span>\n</code></pre>  </div></div>\n","dir":"/0001ROS/0002ROS2/0001Basic/","name":"0006Launch-System.md","path":"0001ROS/0002ROS2/0001Basic/0006Launch-System.md","url":"/0001ROS/0002ROS2/0001Basic/0006Launch-System.html"},{"sort":6,"layout":"default","title":"Trajectory Planning","content":"<h1 id=\"trajectory-planning\">Trajectory Planning</h1>\n\n<p><em>- <a href=\"https://books.google.co.kr/books?id=DdjNDwAAQBAJ&amp;printsec=frontcover&amp;dq=Robot+Modeling+and+Control&amp;hl=ko&amp;sa=X&amp;redir_esc=y#v=onepage&amp;q=Robot%20Modeling%20and%20Control&amp;f=false\">Robot Modeling and Control(M. W. Spong, ‎Seth Hutchinson, ‎M. Vidyasagar)</a></em></p>\n\n<p><em>- <a href=\"https://books.google.co.kr/books?id=6SoQRAAACAAJ&amp;dq=Robot+Dynamics+and+Control+2nd+Edition&amp;hl=ko&amp;sa=X&amp;redir_esc=y\">Robot Dynamics and Control 2nd Edition(M. W. Spong, M. Vidyasagar)</a></em></p>\n","dir":"/0002ROBOTICS/0001RobotDynamics/","name":"0006TrajectoryPlanning.md","path":"0002ROBOTICS/0001RobotDynamics/0006TrajectoryPlanning.md","url":"/0002ROBOTICS/0001RobotDynamics/0006TrajectoryPlanning.html"},{"sort":6,"layout":"default","title":"스마트 포인터 기본","content":"<h1 id=\"스마트-포인터-기본\">스마트 포인터 기본</h1>\n\n<ul>\n <li>참고문헌 : 전문가를 위한 C++(마크 그레고리 / 한빛미디어)</li>\n</ul>\n\n<p>기존 <code class=\"language-plaintext highlighter-rouge\">C</code> 스타일의 포인터 대신 <code class=\"language-plaintext highlighter-rouge\">C++</code>에서는 스마트 포인터(<code class=\"language-plaintext highlighter-rouge\">smart pointer</code>) 사용하여 메모리와 관련된 문제들을 방지할 수 있다. 스마트 포인터로 지정한 객체가 스코프를 벗어나면 메모리가 자동으로 해제되기 때문이다.</p>\n\n<p>C++에서 가장 중요하게 사용되는 스마트 포인터 타입은 <code class=\"language-plaintext highlighter-rouge\">std::unique_ptr</code>과 <code class=\"language-plaintext highlighter-rouge\">std::shared_ptr</code>이다.</p>\n\n<h2 id=\"1-unique_ptr\">1. unique_ptr</h2>\n\n<h3 id=\"11-unique_ptr-개념\">1.1 unique_ptr 개념</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">unique_ptr</code>은 포인터로 가리키는 대상이 스코프를 벗어나거나 삭제될 때 할당된 메모리나 리소스도 자동으로 삭제된다는 점을 제외하면 일반 포인터와 같다. 또한, <code class=\"language-plaintext highlighter-rouge\">unique_ptr</code>는 <code class=\"language-plaintext highlighter-rouge\">return</code>문이 실행되거나 익셉션이 발생하더라도 항상 할당된 메모리나 리소스를 해제할 수 있으며, 이는 함수를 간결하게 한다.(리소스 해제 코드를 작성하지 않아도 되기 때문)</p>\n\n<h3 id=\"12-unique_ptr-생성\">1.2 unique_ptr 생성</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">unique_ptr</code>를 생성할 때는 반드시 <code class=\"language-plaintext highlighter-rouge\">std::make_unique&lt;&gt;()</code>를 사용해야 한다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">auto</span> <span class=\"n\">anEmployee</span> <span class=\"o\">=</span> <span class=\"n\">make_unique</span><span class=\"o\">&lt;</span><span class=\"n\">Empolyee</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n</code></pre>  </div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">make_unique()</code>는 <code class=\"language-plaintext highlighter-rouge\">C++14</code>부터 추가되었는데, 만약 컴파일러가 <code class=\"language-plaintext highlighter-rouge\">C++14</code>를 지원하지 않는다면 다음의 방법으로 <code class=\"language-plaintext highlighter-rouge\">unique_ptr</code>를 만든다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">unique_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">Employee</span><span class=\"o\">&gt;</span> <span class=\"n\">anEmployee</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">Employee</span><span class=\"p\">);</span>\n</code></pre>  </div></div>\n\n<p>스마트 포인터로 지정한 <code class=\"language-plaintext highlighter-rouge\">anEmployee</code>의 사용법은 일반 포인터와 같다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">anEmployee</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Salary: \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">anEmployee</span><span class=\"o\">-&gt;</span><span class=\"n\">salary</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">unique_ptr</code>은 C 스타일의 배열을 저장하는 데도 활용할 수 있다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">auto</span> <span class=\"n\">employees</span> <span class=\"o\">=</span> <span class=\"n\">make_unique</span><span class=\"o\">&lt;</span><span class=\"n\">Employee</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">);</span>\n<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Salary: \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">employees</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">salary</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n</code></pre>  </div></div>\n\n<h2 id=\"2-shared_ptr\">2. shared_ptr</h2>\n\n<h3 id=\"21-shared_ptr-개념\">2.1 shared_ptr 개념</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">shared_ptr</code>를 사용하면 데이터를 공유할 수 있다. <code class=\"language-plaintext highlighter-rouge\">shared_ptr</code>에 대한 대입 연산이 발생할 때마다 레퍼런스 카운트가 증가하며, 이는 <code class=\"language-plaintext highlighter-rouge\">shared_ptr</code>이 가리키는 데이터를 레퍼런스 카운트 만큼 소유하고 있다는 것이다.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">shared_ptr</code> 역시 스코프를 벗어나면 레퍼런스 카운트가 감소하고, 레퍼런스 카운트가 0이 되면 포인터로 가리키던 객체를 해제한다.</p>\n\n<h3 id=\"22-shared_ptr-생성\">2.2 shared_ptr 생성</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">shared_ptr</code>는 <code class=\"language-plaintext highlighter-rouge\">std::make_shared&lt;&gt;()</code>로 생성한다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">auto</span> <span class=\"n\">anEmployee</span> <span class=\"o\">=</span> <span class=\"n\">make_shared</span><span class=\"o\">&lt;</span><span class=\"n\">Employee</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">anEmployee</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Salary: \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">anEmployee</span><span class=\"o\">-&gt;</span><span class=\"n\">salary</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">C++17</code>부터 shared_ptr에 배열도 저장할 수 있다. 단, 이 경우에는 <code class=\"language-plaintext highlighter-rouge\">make_shared&lt;&gt;()</code>를 사용할 수 없고, 다음과 같이 작성해야 한다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">Employee</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span> <span class=\"n\">employees</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">Employee</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]);</span>\n<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Salary: \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">employees</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">salary</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n</code></pre>  </div></div>\n\n<h2 id=\"3-unique_ptr과-shared_ptr\">3. unique_ptr과 shared_ptr</h2>\n\n<p>일반적으로 <code class=\"language-plaintext highlighter-rouge\">unique_ptr</code>을 기본적으로 사용하며, 소유권을 공유할 필요가 있다면 <code class=\"language-plaintext highlighter-rouge\">shared_ptr</code>을 사용한다.</p>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">auto_ptr</code>은 <code class=\"language-plaintext highlighter-rouge\">C++17</code>부터 완전 삭제 되었다.</li>\n</ul>\n","dir":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/","name":"0006Smart-pointer-basic.md","path":"0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0006Smart-pointer-basic.md","url":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0006Smart-pointer-basic.html"},{"sort":6,"layout":"default","title":"PR &amp; ISSUE","content":"<h1 id=\"pr--issue\">PR &amp; ISSUE</h1>\n\n<p>github 기초 개념</p>\n","dir":"/0004Tools/0001DevelopmentTool/0001Git/","name":"0006ISSUE.md","path":"0004Tools/0001DevelopmentTool/0001Git/0006ISSUE.md","url":"/0004Tools/0001DevelopmentTool/0001Git/0006ISSUE.html"},{"sort":6,"layout":"default","title":"Environment Variable","content":"<h1 id=\"environment-variable\">Environment Variable</h1>\n","dir":"/0004Tools/0001DevelopmentTool/0002Linux/","name":"0006EnvironmentVariable.md","path":"0004Tools/0001DevelopmentTool/0002Linux/0006EnvironmentVariable.md","url":"/0004Tools/0001DevelopmentTool/0002Linux/0006EnvironmentVariable.html"},{"sort":6,"permalink":"/0004Tools/0002Knowledges/0006MQ/","layout":"default","title":"MQ","content":"<h1 id=\"mq\">MQ</h1>\n\n","dir":"/0004Tools/0002Knowledges/0006MQ/","name":"README.md","path":"0004Tools/0002Knowledges/0006MQ/README.md","url":"/0004Tools/0002Knowledges/0006MQ/"},{"sort":7,"layout":"default","title":"Command Line Interface","content":"<h1 id=\"command-line-interface\">Command Line Interface</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- ROS 로봇 프로그래밍(표윤석, 조한철, 정려운, 임태훈)</em></p>\n","dir":"/0001ROS/0001ROS1/0001Basic/","name":"0007CLI.md","path":"0001ROS/0001ROS1/0001Basic/0007CLI.md","url":"/0001ROS/0001ROS1/0001Basic/0007CLI.html"},{"sort":7,"layout":"default","title":"amcl","content":"<h1 id=\"amcl\">amcl</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n\n<p><em>- <a href=\"http://wiki.ros.org/amcl\">amcl 위키페이지</a></em></p>\n\n<h2 id=\"1-acml\">1. acml</h2>\n<p>amcl은 평면 상에서 움직이는 로봇의 위치를 확률적으로 계산하는 패키지이다. 이는 Adaptive Monte Carlo Localization 방법으로, particle filter를 사용하여 이미 알고있는 맵 상의 로봇 자세를 추정하는 방법이다. 현재 이 패키지는 레이저 스캔 및 레이저 맵에서만 동작하며, 다른 센서 데이터와 연동되도록 확장할 수 있다. 예를 들어, base_scan 토픽을 scan 데이터로 사용한다면 다음과 같이 지정해주어야 한다.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>amcl scan:=base_scan\n</code></pre>  </div></div>\n\n<h2 id=\"2-api\">2. API</h2>\n\n<p>amcl은 레이저 기반의 맵을 가져오고, 레이저 스캔을 하고, 메세지를 변환하고, 현재 위치 추정값을 나타낸다. amcl의 동작 시작 시, 설정된 매개변수에 따라 particle filter를 초기화한다.</p>\n\n<h2 id=\"21-subscribed-topics\">2.1 Subscribed Topics</h2>\n<ul>\n <li>scan(<a href=\"http://docs.ros.org/en/api/sensor_msgs/html/msg/LaserScan.html\">sensor_msgs/LaserScan</a>) : 레이저 스캔 값</li>\n <li>tf(<a href=\"http://docs.ros.org/en/api/tf/html/msg/tfMessage.html\">tf/tfMessage</a>) : tf 값</li>\n <li>initialpose(<a href=\"http://docs.ros.org/en/api/geometry_msgs/html/msg/PoseWithCovarianceStamped.html\">geometry_msgs/PoseWithCovarianceStamped</a>) : particle filter를 초기화할 평균 및 공분산 값</li>\n <li>map(<a href=\"http://docs.ros.org/en/api/nav_msgs/html/msg/OccupancyGrid.html\">nav_msgs/OccupancyGrid</a>) : <code class=\"language-plaintext highlighter-rouge\">use_map_topic</code> 파라미터가 설정되면 해당 토픽을 subscirbe 하게 되며, amcl에 사용되는 map 데이터이다.</li>\n</ul>\n\n<h2 id=\"22-published-topics\">2.2 Published Topics</h2>\n<ul>\n <li>amcl_pose(<a href=\"http://docs.ros.org/en/api/geometry_msgs/html/msg/PoseWithCovarianceStamped.html\">geometry_msgs/PoseWithCovarianceStamped</a>) : 지도 상의 공분산을 가지는 로봇의 추정 위치</li>\n <li>particlecloud(<a href=\"http://docs.ros.org/en/api/geometry_msgs/html/msg/PoseArray.html\">gemotry_msgs/PoseArray</a>) : 필터에 의해 유지되는 위치 추정치의 집합</li>\n <li>tf(<a href=\"http://docs.ros.org/en/api/tf/html/msg/tfMessage.html\">tf/tfMessage</a>) : odom으로 부터 생성되는 tf값으로 <code class=\"language-plaintext highlighter-rouge\">~odom_frame_id</code> 파라미터를 통해 리맵핑된다.</li>\n</ul>\n\n<h2 id=\"23-services\">2.3 Services</h2>\n<ul>\n <li>global_localization(<a href=\"http://docs.ros.org/en/api/std_srvs/html/srv/Empty.html\">std_srvs/Empty</a>) : 모든 입자가 무작위로 분산화 되도록 global localization을 초기화</li>\n <li>request_nomotion_update(<a href=\"http://docs.ros.org/en/api/std_srvs/html/srv/Empty.html\">std_srvs/Empty</a>) : 입자들을 수동으로 업데이트하고 업데이트 된 입자들을 publish하는 서비스</li>\n <li>set_map(<a href=\"http://docs.ros.org/en/api/nav_msgs/html/srv/SetMap.html\">nav_msgs/SetMap</a>) : 수동으로 새로운 맵과 위치를 설정함</li>\n</ul>\n\n<h2 id=\"24-services-called\">2.4 Services Called</h2>\n<ul>\n <li>static_map(<a href=\"http://docs.ros.org/en/api/nav_msgs/html/srv/GetMap.html\">nav_msgs/GetMap</a>) : localization에 사용되는 레이저 기반의 static 맵을 호출하고, 이 서비스를 이용하여 맵을 가져오는 것을 막음</li>\n</ul>\n\n<h2 id=\"25-parameters\">2.5 Parameters</h2>\n<p><a href=\"http://wiki.ros.org/amcl\">amcl 위키페이지</a>의 3.1.5 Parameters 부분을 참조하여, parameter 값 설정 시 참고하면 된다.</p>\n","dir":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/","name":"0007AMCL.md","path":"0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0007AMCL.md","url":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0007AMCL.html"},{"sort":7,"layout":"default","title":"ROS 2 Package Structure","content":"<h1 id=\"ros-2-package-structure\">ROS 2 Package Structure</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- ROS 2로 시작하는 로봇 프로그래밍(표윤석, 임태훈)</em></p>\n\n<h2 id=\"1-기본-설치-폴더와-사용자-작업-폴더\">1. 기본 설치 폴더와 사용자 작업 폴더</h2>\n<h3 id=\"11-기본-설치-폴더\">1.1 기본 설치 폴더</h3>\n<p>ROS 2의 기본 폴더는 /opt 폴더 아래에 /ros 폴더가 생성되고, /ros 폴더 아래에 버전별로 폴더가 생성된다. 예를 들어, foxy 버전을 설치했다면 /opt/ros/foxy가 설치 되고, foxy 폴더 아래에는 기본 패키지들이 설치가 되어있다. 해당 폴더에는 apt-get으로 받은 ros-rosdistro 로 시작하는 패키지들을 포함하여 해당 버전의 기본 패키지들이 설치되어 있다.</p>\n\n<p>폴더의 세부 내용은 다음과 같다.</p>\n<ul>\n <li>/bin : 실행 가능한 바이너리 파일</li>\n <li>/cmake : 빌드 설정 파일</li>\n <li>/include : 헤더 파일</li>\n <li>/lib : 라이브러리 파일</li>\n <li>/opt : 기타 의존 패키지</li>\n <li>/share : 패키지의 빌드, 환경설정 파일</li>\n <li>local_setup.* : 환경설정 파일</li>\n <li>setup.* : 환경설정 파일</li>\n</ul>\n\n<h3 id=\"12-사용자-작업-폴더\">1.2 사용자 작업 폴더</h3>\n<p>사용자 작업 폴더는 사용자가 원하는 곳에 생성을 할 수 있으며, 대부분 /home 폴더 아래에 workspace를 생성한다.</p>\n\n<p>폴더의 세부 내용은 다음과 같다.</p>\n<ul>\n <li>/build : 빌드 설정 파일용 폴더</li>\n <li>/install : msg, srv, action 헤더 파일과 사용자 패키지 라이브러리, 실행 파일용 폴더</li>\n <li>/log : 빌드 로깅 파일용 폴더</li>\n <li>/src : 사용자 패키지용 폴더</li>\n</ul>\n\n<p>또한 src 폴더 내부에 일반적으로 가지는 폴더 구조는 다음과 같다.</p>\n<ul>\n <li>/src : C/C++ 코드용 폴더</li>\n <li>/include : C/C++ 헤더 파일용 폴더</li>\n <li>/param : 파라미터 파일용 펄더</li>\n <li>/launch : launch에 사용되는 launch 파일용 폴더</li>\n <li>/패키지_이름의_폴더 : 파이썬 코드용 폴더</li>\n <li>/test : 테스트 코드 및 테스트 데이터용 폴더</li>\n <li>/msg : 메시지 파일용 폴더</li>\n <li>/srv : 서비스 파일용 폴더</li>\n <li>/action : 액션 파일용 폴더</li>\n <li>/doc : 문서용 폴더</li>\n <li>package.xml : 패키지 설정 파일</li>\n <li>CMakeLists.txt : C/C++ 빌드 설정 파일</li>\n <li>setup.py : 파이썬 코드 환경 설정 파일</li>\n <li>README.md : 사용자 문서, github 레포 메인에 표시되는 문서</li>\n <li>CONTRIBUTING.md : 해당 패키지 개발에 공헌하는 방법을 기술하는 파일</li>\n <li>LICENSE : 이 패키지의 라이선스를 기술하는 파일</li>\n <li>CHANGELOG.rst : 이 패키지의 버전별 변경사항 모음 파일</li>\n</ul>\n\n<h2 id=\"2-패키지-생성\">2. 패키지 생성</h2>\n<p>ROS 2 패키지 생성 명령어는 다음과 같다.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ros2 pkg create <span class=\"o\">[</span>PACKAGE_NAME] <span class=\"nt\">--build-type</span> <span class=\"o\">[</span>BUILD_TYPE] <span class=\"nt\">--dependencies</span> <span class=\"o\">[</span>DEPENDNECY_PACKAGE_1] <span class=\"o\">[</span>DEPENDNECY_PACKAGE_N]\n</code></pre>  </div></div>\n\n","dir":"/0001ROS/0002ROS2/0001Basic/","name":"0007Package.md","path":"0001ROS/0002ROS2/0001Basic/0007Package.md","url":"/0001ROS/0002ROS2/0001Basic/0007Package.html"},{"sort":7,"layout":"default","title":"Independent Joint Control","content":"<h1 id=\"independent-joint-control\">Independent Joint Control</h1>\n\n<p><em>- <a href=\"https://books.google.co.kr/books?id=DdjNDwAAQBAJ&amp;printsec=frontcover&amp;dq=Robot+Modeling+and+Control&amp;hl=ko&amp;sa=X&amp;redir_esc=y#v=onepage&amp;q=Robot%20Modeling%20and%20Control&amp;f=false\">Robot Modeling and Control(M. W. Spong, ‎Seth Hutchinson, ‎M. Vidyasagar)</a></em></p>\n\n<p><em>- <a href=\"https://books.google.co.kr/books?id=6SoQRAAACAAJ&amp;dq=Robot+Dynamics+and+Control+2nd+Edition&amp;hl=ko&amp;sa=X&amp;redir_esc=y\">Robot Dynamics and Control 2nd Edition(M. W. Spong, M. Vidyasagar)</a></em></p>\n","dir":"/0002ROBOTICS/0001RobotDynamics/","name":"0007IndependentJointControl.md","path":"0002ROBOTICS/0001RobotDynamics/0007IndependentJointControl.md","url":"/0002ROBOTICS/0001RobotDynamics/0007IndependentJointControl.html"},{"sort":7,"layout":"default","title":"Exception","content":"<h1 id=\"exception\">Exception</h1>\n\n<ul>\n <li>참고문헌 : 전문가를 위한 C++(마크 그레고리 / 한빛미디어)</li>\n</ul>\n\n<p><code class=\"language-plaintext highlighter-rouge\">exception</code>은 예상하지 못한 상황을 표현하는 클랙스/객체이다. 익셉션을 활용하면 문제가 발생했을 때 융통성 있게 대처할 수 있다.</p>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">throw</code> : 익셉션을 발생시킴</li>\n <li><code class=\"language-plaintext highlighter-rouge\">catch</code> : 익셉션을 처리함</li>\n</ul>\n\n<p>다음 예제는 분모의 인수가 0이면 익셉션을 발생시킨다. <code class=\"language-plaintext highlighter-rouge\">std::invalid_argument</code> 익셉션을 사용하였는데, 이는 <code class=\"language-plaintext highlighter-rouge\">&lt;stdexcept&gt;</code> 헤더파일을 불러와야 한다.</p>\n<blockquote>\n <p><code class=\"language-plaintext highlighter-rouge\">exception</code> 타입은 발생할 수 있는 상황에 맞게 직접 정의해서 사용하는 것이 좋다.</p>\n</blockquote>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">double</span> <span class=\"nf\">divideNumbers</span><span class=\"p\">(</span><span class=\"kt\">double</span> <span class=\"n\">numerator</span><span class=\"p\">,</span> <span class=\"kt\">double</span> <span class=\"n\">denominator</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">denominator</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">throw</span> <span class=\"n\">invalid_argument</span><span class=\"p\">(</span><span class=\"s\">\"Denoominator cannot be 0.\"</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">numerator</span> <span class=\"o\">/</span> <span class=\"n\">denominator</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">throw</code> 문장이 실행되면 함수에서 값을 리턴하지 않고 실행을 즉시 중단하며, <code class=\"language-plaintext highlighter-rouge\">try/catch</code> 블록으로 감싸서 <code class=\"language-plaintext highlighter-rouge\">exception</code>을 처리할 수 있다.</p>\n<blockquote>\n <p><code class=\"language-plaintext highlighter-rouge\">exception</code>이 발생하게 되면, 바로 <code class=\"language-plaintext highlighter-rouge\">catch</code>블록으로 넘어가게 되기 때문에, 예제에서 세 번째 호출 문장은 실행되지 않는다.</p>\n</blockquote>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">try</span><span class=\"p\">{</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">divideNumbers</span><span class=\"p\">(</span><span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">divideNumbers</span><span class=\"p\">(</span><span class=\"mf\">2.3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">divideNumbers</span><span class=\"p\">(</span><span class=\"mf\">4.5</span><span class=\"p\">,</span> <span class=\"mf\">2.5</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">invalid_argument</span><span class=\"o\">&amp;</span> <span class=\"n\">exception</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Exception caught: \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">exception</span><span class=\"p\">.</span><span class=\"n\">what</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n","dir":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/","name":"0007Exception.md","path":"0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0007Exception.md","url":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0007Exception.html"},{"sort":7,"layout":"default","title":"Fork &amp; Pull Request","content":"<h1 id=\"fork--pull-request\">Fork &amp; Pull Request</h1>\n\n<p>github 기초 개념</p>\n","dir":"/0004Tools/0001DevelopmentTool/0001Git/","name":"0007Fork.md","path":"0004Tools/0001DevelopmentTool/0001Git/0007Fork.md","url":"/0004Tools/0001DevelopmentTool/0001Git/0007Fork.html"},{"sort":7,"layout":"default","title":"SSH","content":"<h1 id=\"ssh\">SSH</h1>\n","dir":"/0004Tools/0001DevelopmentTool/0002Linux/","name":"0007SSH.md","path":"0004Tools/0001DevelopmentTool/0002Linux/0007SSH.md","url":"/0004Tools/0001DevelopmentTool/0002Linux/0007SSH.html"},{"sort":7,"permalink":"/0004Tools/0002Knowledges/0007MQTT/","layout":"default","title":"MQTT","content":"<h1 id=\"mqtt\">MQTT</h1>\n\n","dir":"/0004Tools/0002Knowledges/0007MQTT/","name":"README.md","path":"0004Tools/0002Knowledges/0007MQTT/README.md","url":"/0004Tools/0002Knowledges/0007MQTT/"},{"sort":8,"layout":"default","title":"Topic","content":"<h1 id=\"topic\">Topic</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- ROS 로봇 프로그래밍(표윤석, 조한철, 정려운, 임태훈)</em></p>\n","dir":"/0001ROS/0001ROS1/0001Basic/","name":"0008Topic.md","path":"0001ROS/0001ROS1/0001Basic/0008Topic.md","url":"/0001ROS/0001ROS1/0001Basic/0008Topic.html"},{"sort":8,"layout":"default","title":"map_server","content":"<h1 id=\"map_server\">map_server</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n\n<p><em>- <a href=\"http://wiki.ros.org/map_server\">map_server 위키페이지</a></em></p>\n\n<h2 id=\"1-map_server\">1. map_server</h2>\n<p>map_server는 지도 데이터를 제공하는 ROS 노드이며, map_saver를 통해 맵 파일을 저장하는 역할도 수행한다.</p>\n\n<h2 id=\"2-map-format\">2. Map Format</h2>\n<p>맵은 YAML파일과 이미지파일을 한 쌍의 파일 형태로 저장된다. YAML파일은 맵의 메타정보를 저장하고, 이미지 파일의 이름을 저장한다. 이미지파일은 점유데이터를 가져온다.</p>\n\n<h3 id=\"21-image-format\">2.1 Image Format</h3>\n<p>이미지파일은 각 픽셀의 색상으로 장애물을 나타낸다. 흰섹 픽셀은 장애물이 없는 공간이고, 검은색 픽셀은 장애물이 점유하고 있는 공간이다. 그 이외의 색깔의 픽셀은 알 수 없는 공간으로 표현된다.</p>\n\n<h3 id=\"22-yaml-format\">2.2 YAML Format</h3>\n<p>YAML 파일의 형태의는 다음과 같다.</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>image: testmap.png\nresolution: 0.1\norigin: [0.0, 0.0, 0.0]\noccupied_thresh: 0.65\nfree_thresh: 0.196\nnegate: 0\n</code></pre>  </div></div>\n<ul>\n <li>image는 이미지 파일의 경로를 나타낸다.</li>\n <li>resolution은 맵의 해상도를 나타낸다. meter/pixel</li>\n <li>origin은 맵의 x, y, yaw 초기 위치를 나타낸다. (0, 0)은 지도의 중심, yaw는 회전방향</li>\n <li>occupied_thresh는 이 값보다 큰 픽셀은 장애물임을 나타내는 값이다.</li>\n <li>free_thresh는 이 값보다 작은 픽셀은 장애물이 없는 공간임을 나타내는 값이다.</li>\n <li>negate는 흰색/검은색 픽셀의 반전 여부를 나타내는 것으로 thresholds 값은 영향을 받지 않는다.</li>\n</ul>\n\n<h2 id=\"3-command-line-tools\">3. Command-line Tools</h2>\n\n<h3 id=\"31-map_server\">3.1 map_server</h3>\n<p>map_server는 ROS 서비스를 통해 맵을 읽어오는 노드이며, 다음과 같이 맵을 불러올 수 있다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>rosrun map_server map_server map.yaml\n</code></pre>  </div></div>\n\n<h4 id=\"311-published-topics\">3.1.1 Published Topics</h4>\n<ul>\n <li>map_metadata(<a href=\"http://docs.ros.org/en/api/nav_msgs/html/msg/MapMetaData.html\">nav_msgs/MapMetaData</a>) : 이 메세지를 통해 맵의 메타 정보를 가져옴</li>\n <li>map(<a href=\"http://docs.ros.org/en/api/nav_msgs/html/msg/OccupancyGrid.html\">nav_msgs/OccupancyGrid</a>) : 이 메세지를 통해 맵을 받아옴</li>\n</ul>\n\n<h4 id=\"312-services\">3.1.2 Services</h4>\n<ul>\n <li>static_map(<a href=\"http://docs.ros.org/en/api/nav_msgs/html/srv/GetMap.html\">nav_msgs/GetMap</a>) : 지도를 가져옴</li>\n</ul>\n\n<h4 id=\"313-parameters\">3.1.3 Parameters</h4>\n<ul>\n <li>~frame_id(string, default: “map”) : 퍼블리쉬 된 맵의 앞의 frame 이름을 설정</li>\n</ul>\n\n<h3 id=\"32-map_saver\">3.2 map_saver</h3>\n<p>map_saver는 맵을 저장하는데 사용되며, SLAM으로 그린 맵을 저장하는데 주로 사용된다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>rosrun map_server map_saver <span class=\"o\">[</span><span class=\"nt\">-occ</span> &lt;threshold_occupied&gt;] <span class=\"o\">[</span><span class=\"nt\">--free</span> &lt;threshold_free&gt;] <span class=\"o\">[</span><span class=\"nt\">-f</span> &lt;mapname&gt;] map:<span class=\"o\">=</span>/your/costmap/topic\n</code></pre>  </div></div>\n\n<h4 id=\"321-subscribed-topics\">3.2.1 Subscribed Topics</h4>\n<ul>\n <li>map(<a href=\"http://docs.ros.org/en/api/nav_msgs/html/msg/OccupancyGrid.html\">nav_msgs/OccupancyGrid</a>) : 이 메세지를 통해 맵을 검색</li>\n</ul>\n","dir":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/","name":"0008MapServer.md","path":"0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0008MapServer.md","url":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0008MapServer.html"},{"sort":8,"layout":"default","title":"Command Line Interface","content":"<h1 id=\"command-line-interface\">Command Line Interface</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- ROS 2로 시작하는 로봇 프로그래밍(표윤석, 임태훈)</em></p>\n\n<h2 id=\"1-ros2-cli-사용법\">1. ROS2 CLI 사용법</h2>\n\n<p>ROS2 CLI은 기본적으로 <code class=\"language-plaintext highlighter-rouge\">ros2</code>라는 명령으로 시작되며, <code class=\"language-plaintext highlighter-rouge\">verb</code>와 <code class=\"language-plaintext highlighter-rouge\">sub-verb</code>로 구성된다. 또한 <code class=\"language-plaintext highlighter-rouge\">options</code>와 <code class=\"language-plaintext highlighter-rouge\">arguments</code>를 입력하여 추가적인 명령을 입력할 수 있다.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ros2 <span class=\"o\">[</span>verbs] <span class=\"o\">[</span>sub-verbs] <span class=\"o\">[</span>options] <span class=\"o\">[</span>arguments]\n</code></pre>  </div></div>\n\n<h2 id=\"2-ros2-cli-리스트\">2. ROS2 CLI 리스트</h2>\n\n<p>다음은 주로 사용되는 ROS2 CLI 명령어 리스트를 정리하였다. 추가적인 기능은 wiki 페이지나, 참고 문헌인 서적을 참고하면 된다.</p>\n\n<h3 id=\"21-실행-명령어\">2.1 실행 명령어</h3>\n\n<ul>\n <li>run : 특정 패키지의 특정 노드 실행\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ros2 run &lt;package&gt; &lt;executable&gt;\n</code></pre>  </div> </div>\n </li>\n <li>launch : 특정 패키지의 특정 런치 파일 실행\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ros2 launch &lt;package&gt; &lt;launch-file&gt;\n</code></pre>  </div> </div>\n </li>\n</ul>\n\n<h3 id=\"22-정보-명령어\">2.2 정보 명령어</h3>\n\n<ul>\n <li>pkg : 패키지의 정보를 얻기 위해 사용된다.\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ros2 pkg create <span class=\"c\"># 새로운 ROS2 패키지 생성</span>\nros2 pkg executables <span class=\"c\"># 지정 패키지의 실행 파일 목록 출력</span>\nros2 pkg list <span class=\"c\"># 사용 가능한 패키지 목록 출력</span>\nros2 pkg xml <span class=\"c\"># 지정 패키지의 패키지 정보 파일(xml) 출력</span>\n</code></pre>  </div> </div>\n </li>\n <li>node : 실행 중인 노드 정보를 얻기 위해 사용된다.\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ros2 node info <span class=\"c\"># 실행 중인 노드 중 지정한 노드의 정보 출력</span>\nros2 node list <span class=\"c\"># 실행 중인 모든 노드의 목록 출력</span>\n</code></pre>  </div> </div>\n </li>\n <li>topic : 현재 사용 중인 토픽 정보르 얻기 위해 사용된다.\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ros2 topic <span class=\"nb\">echo</span> <span class=\"c\"># 지정 토픽의 데이터 출력</span>\nros2 topic find <span class=\"c\"># 지정 타입을 사용하는 토픽 이름 출력</span>\nros2 topic hz <span class=\"c\"># 지정 토픽의 주기 측정</span>\nros2 topic info <span class=\"c\"># 지정 토픽의 정보 출력</span>\nros2 topic list <span class=\"c\"># 사용 가능한 토픽 목록 출력</span>\nros2 topic pub <span class=\"c\"># 지정 토픽의 토픽 퍼블리시</span>\nros2 topic <span class=\"nb\">type</span> <span class=\"c\"># 지정 토픽의 토픽 타입 출력</span>\n</code></pre>  </div> </div>\n </li>\n <li>service : 현재 사용 중인 서비스 정보를 얻기 위해 사용된다.\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ros2 service call <span class=\"c\"># 지정 서비스의 서비스 요청 전달</span>\nros2 service find <span class=\"c\"># 지정 서비스 타입의 서비스 출력</span>\nros2 service list <span class=\"c\"># 사용 가능한 서비스 목록 출력</span>\nros2 service <span class=\"nb\">type</span> <span class=\"c\"># 지정 서비스의 타입 출력</span>\n</code></pre>  </div> </div>\n </li>\n <li>action : 현재 사용 중인 액션 정보를 얻기 위해 사용된다.\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ros2 action info <span class=\"c\"># 지정 액션의 정보 출력</span>\nros2 action list <span class=\"c\"># 사용 가능한 액션 목록 출력</span>\nros2 action send_goal <span class=\"c\"># 지정 액션의 액션 목표 전송</span>\n</code></pre>  </div> </div>\n </li>\n <li>interface : 인터페이스 정보를 얻기 위해 사용된다.\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ros2 interface list <span class=\"c\"># 사용 가능한 모든 인터페이스 목록 출력</span>\nros2 interface package <span class=\"c\"># 특정 패키지에서 사용 가능한 인터페이스 목록 출력</span>\nros2 interface packages <span class=\"c\"># 인터페이스 패키지들의 목록 출력</span>\nros2 interface proto <span class=\"c\"># 지정 패키지의 프로토타입 출력</span>\nros2 interface show <span class=\"c\"># 지정 인터페이스의 데이터 형태 출력</span>\n</code></pre>  </div> </div>\n </li>\n <li>param : 현재 사용 중인 파라미터 정보를 얻기 위해 사용된다.\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ros2 param delete <span class=\"c\"># 지정 파라미터의 삭제</span>\nros2 param describe <span class=\"c\"># 지정 파라미터의 정보 출력</span>\nros2 param dump <span class=\"c\"># 지정 파라미터 저장</span>\nros2 param get <span class=\"c\"># 지정 파라미터 읽기</span>\nros2 param list <span class=\"c\"># 사용 가능한 파라미터 목록 출력</span>\nros2 param <span class=\"nb\">set</span> <span class=\"c\"># 지정 파라미터 쓰기</span>\n</code></pre>  </div> </div>\n </li>\n <li>bag : bag 파일을 쓰거나 읽어오기 위해 사용된다.\n <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ros2 bag info <span class=\"c\"># 지정된 rosbag 정보 출력</span>\nros2 bag play <span class=\"c\"># rosbag 재생</span>\nros2 bag record <span class=\"c\"># rosbag 기록</span>\n</code></pre>  </div> </div>\n </li>\n</ul>\n\n<h2 id=\"3-arguments-사용하기\">3. arguments 사용하기</h2>\n<p>ROS2 CLI 명령어에 ROS arguments를 사용하기 위해 <code class=\"language-plaintext highlighter-rouge\">--ros-args</code> 옵션을 이용하여 지정하며, 주로 <code class=\"language-plaintext highlighter-rouge\">run</code> 또는 <code class=\"language-plaintext highlighter-rouge\">launch</code> 명령어와 함께 사용된다.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ros2 run &lt;package&gt; &lt;executable&gt; <span class=\"nt\">--ros-args</span> <span class=\"o\">(</span>ROS arguments<span class=\"o\">)</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>-r __ns:=사용할 네임스페이스</li>\n <li>-r __node:=변경할 노드 이름</li>\n <li>-r 본래의 토픽/서비스/액션명:=변경할 이름</li>\n <li>-p 파라미터 이름:=변경할 파라미터 이름</li>\n <li>–params-file 파라미터 파일</li>\n</ul>\n","dir":"/0001ROS/0002ROS2/0001Basic/","name":"0008CLI.md","path":"0001ROS/0002ROS2/0001Basic/0008CLI.md","url":"/0001ROS/0002ROS2/0001Basic/0008CLI.html"},{"sort":8,"layout":"default","title":"Force Control","content":"<h1 id=\"force-control\">Force Control</h1>\n\n<p><em>- <a href=\"https://books.google.co.kr/books?id=DdjNDwAAQBAJ&amp;printsec=frontcover&amp;dq=Robot+Modeling+and+Control&amp;hl=ko&amp;sa=X&amp;redir_esc=y#v=onepage&amp;q=Robot%20Modeling%20and%20Control&amp;f=false\">Robot Modeling and Control(M. W. Spong, ‎Seth Hutchinson, ‎M. Vidyasagar)</a></em></p>\n\n<p><em>- <a href=\"https://books.google.co.kr/books?id=6SoQRAAACAAJ&amp;dq=Robot+Dynamics+and+Control+2nd+Edition&amp;hl=ko&amp;sa=X&amp;redir_esc=y\">Robot Dynamics and Control 2nd Edition(M. W. Spong, M. Vidyasagar)</a></em></p>\n","dir":"/0002ROBOTICS/0001RobotDynamics/","name":"0008ForceControl.md","path":"0002ROBOTICS/0001RobotDynamics/0008ForceControl.md","url":"/0002ROBOTICS/0001RobotDynamics/0008ForceControl.html"},{"sort":8,"layout":"default","title":"타입 추론","content":"<h1 id=\"타입-추론\">타입 추론</h1>\n\n<ul>\n <li>참고문헌 : 전문가를 위한 C++(마크 그레고리 / 한빛미디어)</li>\n</ul>\n\n<p>타입 추론(<code class=\"language-plaintext highlighter-rouge\">type inference</code>)는 표현식의 타입을 컴파일러가 스스로 알아내는 기능이다.</p>\n\n<h2 id=\"1-auto\">1. auto</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">C++14</code>부터 함수의 리턴 타입을 컴파일러가 알아서 지정하도록 하는 <code class=\"language-plaintext highlighter-rouge\">auto</code>키워드를 사용할 수 있음.</p>\n\n<p>다음은 <code class=\"language-plaintext highlighter-rouge\">auto</code>를 사용하게 되는 상황들이다.</p>\n\n<ul>\n <li>함수의 리턴 타입 추론</li>\n <li>구조적 바인딩에 사용</li>\n <li>표현식의 타입 추론</li>\n <li>비타입(<code class=\"language-plaintext highlighter-rouge\">non-type</code>) 템플릿 매개변수의 타입 추론</li>\n <li><code class=\"language-plaintext highlighter-rouge\">decltype</code> (<code class=\"language-plaintext highlighter-rouge\">auto</code>) 에서 사용</li>\n <li>함수에 대한 또 다른 문법으로 사용</li>\n <li>제네릭 람다 표현식에서 사용</li>\n</ul>\n\n<p>다음은 함수의 리턴 타입을 추론에 대한 예시이다.</p>\n\n<ul>\n <li>컴파일러는 <code class=\"language-plaintext highlighter-rouge\">return</code>문에 나온 표현식의 타입에 따라 리턴 타입을 추론함.</li>\n <li>함수 내에 여러 개의 <code class=\"language-plaintext highlighter-rouge\">return</code> 문이 있는 경우, 각 타입은 모두 같아야 함.</li>\n</ul>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">auto</span> <span class=\"nf\">addNumbers</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">number1</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">number2</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"n\">number1</span> <span class=\"o\">+</span> <span class=\"n\">number2</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">auto</code> 키워드는 복잡한 타입에 적용할 때 편리하다. 또한 함수의 리턴 타입을 변경하더라도 코드에서 그 함수가 나온 모든 지점을 고칠 필요 없이 간단히 수정할 수 있다.</p>\n\n<p>하지만 <code class=\"language-plaintext highlighter-rouge\">auto</code>로 표현식의 타입을 추론하면 <strong>함수에 지정된 레퍼런스나 <code class=\"language-plaintext highlighter-rouge\">const</code> 한정자가 제거된다.</strong> <code class=\"language-plaintext highlighter-rouge\">const</code> 레퍼런스 타입으로 지정하려면 auto 키워드 앞뒤에 레퍼런스 타입과 <code class=\"language-plaintext highlighter-rouge\">const</code> 키워드를 붙여야 한다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">const</span> <span class=\"k\">auto</span><span class=\"o\">&amp;</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">foo</span><span class=\"p\">();</span>\n</code></pre>  </div></div>\n\n<h2 id=\"2-decltype\">2. decltype</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">decltype</code> 키워드는 인수로 지정한 표현식의 타입을 알아낸다. 다음 예제는 y의 타입이 x의 타입인 <code class=\"language-plaintext highlighter-rouge\">int</code> 라고 추론한다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">123</span><span class=\"p\">;</span>\n<span class=\"k\">decltype</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">456</span><span class=\"p\">;</span>\n</code></pre>  </div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">decltype</code>은 <code class=\"language-plaintext highlighter-rouge\">auto</code>와 다르게 레퍼런스나 <code class=\"language-plaintext highlighter-rouge\">const</code> 키워드를 삭제하지 않는다. 이러한 <code class=\"language-plaintext highlighter-rouge\">decltype</code>은 템플릿을 사용할 때 효과적이다.</p>\n","dir":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/","name":"0008Type-inference.md","path":"0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0008Type-inference.md","url":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0008Type-inference.html"},{"sort":8,"layout":"default","title":"License","content":"<h1 id=\"license\">License</h1>\n\n<p>github 기초 개념</p>\n","dir":"/0004Tools/0001DevelopmentTool/0001Git/","name":"0008License.md","path":"0004Tools/0001DevelopmentTool/0001Git/0008License.md","url":"/0004Tools/0001DevelopmentTool/0001Git/0008License.html"},{"sort":8,"layout":"default","title":"SCP","content":"<h1 id=\"scp\">SCP</h1>\n","dir":"/0004Tools/0001DevelopmentTool/0002Linux/","name":"0008SCP.md","path":"0004Tools/0001DevelopmentTool/0002Linux/0008SCP.md","url":"/0004Tools/0001DevelopmentTool/0002Linux/0008SCP.html"},{"sort":8,"permalink":"/0004Tools/0002Knowledges/0008CMake/","layout":"default","title":"CMAKE","content":"<h1 id=\"cmake\">CMAKE</h1>\n\n","dir":"/0004Tools/0002Knowledges/0008CMake/","name":"README.md","path":"0004Tools/0002Knowledges/0008CMake/README.md","url":"/0004Tools/0002Knowledges/0008CMake/"},{"sort":9,"layout":"default","title":"Service","content":"<h1 id=\"service\">Service</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- ROS 로봇 프로그래밍(표윤석, 조한철, 정려운, 임태훈)</em></p>\n","dir":"/0001ROS/0001ROS1/0001Basic/","name":"0009Service.md","path":"0001ROS/0001ROS1/0001Basic/0009Service.md","url":"/0001ROS/0001ROS1/0001Basic/0009Service.html"},{"sort":9,"layout":"default","title":"Navigation Tunning Guide","content":"<h1 id=\"navigation-tunning-guide\">Navigation Tunning Guide</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n\n<p><em>- <a href=\"http://wiki.ros.org/navigation/Tutorials/Navigation%20Tuning%20Guide\">Navigation Tunning Guide 위키 페이지</a></em></p>\n\n<p>본 내용은 Kaiyu Zheng의 <a href=\"https://kaiyuzheng.me/documents/navguide.pdf\">ROS Navigation Tunning Guide</a>를 기반으로 작성하였다.</p>\n\n<h2 id=\"1-velocity-and-acceleration\">1. Velocity and Acceleration</h2>\n<p>먼저, ROS Navigation에서 로봇의 주행의 실질적인 데이터 형태인 속도와 가속도의 설정에 대한 내용이다. local planner에서 받는 토픽인 <code class=\"language-plaintext highlighter-rouge\">odom</code>과 그 결과로 나오는 토픽인 <code class=\"language-plaintext highlighter-rouge\">cmd_vel</code>은 모두 속도 및 가속도 기반의 토픽이기 때문이다.</p>\n\n<h3 id=\"11-maximum-velocity의-선정\">1.1 Maximum Velocity의 선정</h3>\n<p>실제 환경에서 로봇이 직선운동 및 제자리에서 회전운동 시의 최대 속도를 기준으로 선정하며, Safety를 위해서 실제 최대 속도보다 약간 낮은 값으로 parameter를 선정한다.</p>\n\n<h3 id=\"12-maximum-accleceration의-선정\">1.2 Maximum Accleceration의 선정</h3>\n<p>최대 가속도 측정하기 위해, 속도가 0에서 최대 속도까지 도달하는데 시간을 기준으로 선정한다.</p>\n\n<h3 id=\"13-minimum-value-선정\">1.3 Minimum Value 선정</h3>\n<p>DWA 기준으로 설명하면, 선속도의 경우 Minimum velocity이 음수일 경우 후진을 하며, 0일 경우 후진을 하지 않는다고 볼 수 있다. 회전 속도의 경우 절댓값을 취하기 때문에 최소 회전 속도는 음수로 지정하지 않아도 된다.</p>\n\n<h3 id=\"14-x-y-방향-velocity\">1.4 x, y 방향 Velocity</h3>\n<p>x 및 y 방향의 선속도를 나타내며, x 방향은 로봇의 주행방향이고, y 방향은 로봇 주행 방향에서 왼쪽으로 90도 방향이다. 일반적으로 differential wheeled robot의 경우 y 방향의 속도값은 사용하지 않는다.</p>\n\n<h2 id=\"2-global-planner\">2. Global Planner</h2>\n\n<h3 id=\"21-global-planner의-선정\">2.1 Global Planner의 선정</h3>\n<p>move_base에서는 3가지 타입의 Global Planner를 제공한다.</p>\n<ul>\n <li>carrot_planner</li>\n <li>navfn</li>\n <li>global_planner</li>\n</ul>\n\n<p>이 중에서 이번 장에서는 global_planner에 대해 서술한다.</p>\n\n<h3 id=\"22-global_planner-parameter\">2.2 global_planner parameter</h3>\n<p>global_planner는 파라미터 선정을 통해 Dijkstra, A*, Standard Behavior, Grid Path 와 같은 planning 방법을 선택할 수 있다.\n추가적으로 경로 생성 시 cost를 계산에 사용되는 parameter로, <code class=\"language-plaintext highlighter-rouge\">cost_factor</code>, <code class=\"language-plaintext highlighter-rouge\">neutral_cost</code>, <code class=\"language-plaintext highlighter-rouge\">lethal_cost</code>가 있다. 다음은 cost를 계산하는 식으로, <code class=\"language-plaintext highlighter-rouge\">costmap_cost_value</code>는 0에서 252로 나타나는 costmap의 cost 값이다.</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>cost = COST_NEUTRAL + COST_FACTOR * costmap_cost_value\n</code></pre>  </div></div>\n<p><code class=\"language-plaintext highlighter-rouge\">cost_factor</code>, <code class=\"language-plaintext highlighter-rouge\">neutral_cost</code>가 너무 낮거나 높으면 경로 생성의 수준이 낮아지므로, 적당한 수준으로 설정해야 한다. <code class=\"language-plaintext highlighter-rouge\">lethal_cost</code>의 값이 낮게 설정할 경우 feasible한 경로를 찾더라도, 경로 생성이 되지 않을 수 있으므로 주의해야 한다.</p>\n\n<h2 id=\"3-local-planner\">3. Local Planner</h2>\n\n<h3 id=\"31-dynamic-window-approachdwa\">3.1 Dynamic Window Approach(DWA)</h3>\n\n<p>DWA의 동작 단계를 다음과 같이 정의할 수 있다.</p>\n<ol>\n <li>로봇의 제어 공간 내에서 속도(dx, dy, dtheta)에 대한 샘플을 취한다.</li>\n <li>샘플로 선정한 각각의 속도에 대해서 시뮬레이션을 한다.</li>\n <li>각 샘플에 대한 시뮬레이션을 통해 샘플에 대한 점수를 부여한다.</li>\n <li>가장 높은 점수를 받은 궤적을 선정한다.</li>\n <li>위 과정을 목적지에 도착할 때까지 계속 반복한다.</li>\n</ol>\n\n<p>위의 동작을 수행하기 위해 DWA를 사용하는 데 있어 설정해야 할 parameter들에 대해서 정리한다.</p>\n\n<h3 id=\"311-forward-simulation\">3.1.1 Forward Simulation</h3>\n<p>local planner가 속도 샘플을 통해 simulation 하는 과정에 필요한 parameter들을 정리한다.\n<code class=\"language-plaintext highlighter-rouge\">sim_time</code>은 simulation 시간을 말하며, <code class=\"language-plaintext highlighter-rouge\">sim_time</code>이 낮을 경우에는 simulation 과정이 짧으므로 좁은공간을 지나는 경우에 성능이 떨어질 수 있다. 반면 높게 설정되는 경우 simulation을 통해 생성되는 경로가 유연하지 않아 좁은 공간에서 충돌을 회피하거나 경로를 재생성 하는데 좋지 않은 영향을 줄 수 있다.</p>\n\n<p>다음으로 <code class=\"language-plaintext highlighter-rouge\">vx_sample</code>, <code class=\"language-plaintext highlighter-rouge\">vy_sample</code>, <code class=\"language-plaintext highlighter-rouge\">vth_sample</code>은 각 방향의 sample 갯수를 설정하는 parameter로 sample의 갯수는 많으면 좋지만 computing power에 따라 적절하게 선정해야 한다.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">sim_granularity</code>는 경로의 점 사이의 간격 크기를 설정한다. 이는 경로의 각 점이 장애물과 교차하는지 여부를 판단하며, 값이 작을 수록 많은 수의 검사가 필요하므로 이도 computing power에 따라 적절하게 선정해야 한다.</p>\n\n<h3 id=\"312-trajectory-scoring\">3.1.2 Trajectory Scoring</h3>\n<p>simulation을 통해서 여러 개의 경로 중 가장 점수가 높은 경로를 선택하게 되는데, 경로의 점수를 부여하는 식은 다음과 같다.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>cost\n= path_distance_bias*(distance to path from the endpoint of the trajectory)\n+ goal_distance_bias*(distance to local goal from the endpoint of the trajectory)\n+ occdist_scale*(maximum obstacle cost along the trajectory in obstacle cost(0-254))\n</code></pre>  </div></div>\n\n<p>따라서 <code class=\"language-plaintext highlighter-rouge\">path_distance_bias</code>, <code class=\"language-plaintext highlighter-rouge\">goal_distance_bias</code>, <code class=\"language-plaintext highlighter-rouge\">occdist_scale</code>을 어떻게 선정하는가에 따라 다르게 동작하게 된다.\n<code class=\"language-plaintext highlighter-rouge\">path_distance_bias</code>는 값이 높을 수록 global_planner에 의해 생성된 경로에서 벗어나지 않게 local planer을 하게 한다. <code class=\"language-plaintext highlighter-rouge\">goal_distance_bias</code>는 경로에 상관 없이 local goal에 다가갈 수 있도록 한다. <code class=\"language-plaintext highlighter-rouge\">occdist_scale</code>은 장애물을 피하기 위한 동작 수준을 결정한다.</p>\n\n<h3 id=\"313-goal-distance-tolerance\">3.1.3 Goal Distance Tolerance</h3>\n<p>해당 파라미터들은 목적지에 도착했을 때 도착 여부에 대한 판단 기준을 내리는 파라미터들이다.\n<code class=\"language-plaintext highlighter-rouge\">yaw_goal_tolerance</code>와 <code class=\"language-plaintext highlighter-rouge\">xy_goal_tolerance</code>는 yaw 방향과 x,y 방향에 대해 오차 범위를 설정하는 파라미터이고, <code class=\"language-plaintext highlighter-rouge\">latch_xy_goal_tolerance</code>는 true로 설정이 된다면 목표 허용오차를 잠그게 되는 파라미터로, 목적지에 도착해서도 허용오차가 없기 때문에 제자리에서 계속 회전하게 된다. 따라서 일반적으로 false로 사용한다.</p>\n\n<h3 id=\"314-oscillation-reset\">3.1.4 Oscillation Reset</h3>\n<p>만약 local planner가 양 방향으로 진동하는 경로를 만들게 되면, 진동하는 수준에 따라 recovery behavior로 넘어가게 된다. <code class=\"language-plaintext highlighter-rouge\">oscillation_reset_dist</code>는 그 진동하는 수준에 대해 설정하는 파라미터이다.</p>\n\n<h2 id=\"4-costmap\">4. Costmap</h2>\n<p>costmap은 크게 <code class=\"language-plaintext highlighter-rouge\">static map layer</code>, <code class=\"language-plaintext highlighter-rouge\">obstacle map layer</code>, <code class=\"language-plaintext highlighter-rouge\">inflation layer</code>로 나뉜다. <code class=\"language-plaintext highlighter-rouge\">static map layer</code>는 저장되어 있는 맵 기반으로 형성되는 맵이고, <code class=\"language-plaintext highlighter-rouge\">obstacle map layer</code>는 장애물에 의해 동적으로 생기는 맵이다. 이 때, laser와 같은 2D 데이터를 이용해 생성될 수도 있고, camera를 이용해 3D 데이터를 이용한 <code class=\"language-plaintext highlighter-rouge\">voxel layer</code>를 생성할 수도 있다. <code class=\"language-plaintext highlighter-rouge\">inflation layer</code>는 2D 맵 상의 장애물에 cost를 부여하는 맵이다. 이 <code class=\"language-plaintext highlighter-rouge\">inflation layer</code>에 의해 생성되는 cost는 global costmap에서는 맵 기반으로 생성이 되며, local costmap에서는 로봇의 센서를 이용하 실시간으로 생성이 된다.</p>\n\n<h3 id=\"41-footprint\">4.1 footprint</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">footprint</code>는 로봇의 윤곽선을 나타내는 것으로, 장애물과 접촉 여부를 판단하기 위해서 사용된다. <code class=\"language-plaintext highlighter-rouge\">footprint</code> 설정은 x, y 좌표의 list로 설정할 수 있다. 일반적으로 로봇의 외형보다 더 크게 설정해야 장애물에 부딪히지 않고 안전하게 사용할 수 있다.</p>\n\n<h3 id=\"42-inflation\">4.2 inflation</h3>\n<p>inflation layer는 0에서 255의 cost를 map의 cell 상에 부여한다. <code class=\"language-plaintext highlighter-rouge\">inflation_radius</code>와 <code class=\"language-plaintext highlighter-rouge\">cost_scaling_factor</code> 파라미터에 의해 inflation layer가 설정된다. <code class=\"language-plaintext highlighter-rouge\">inflation_radius</code>는 장애물로부터 얼마나 먼 거리까지 cost를 부여할 것인가를 설정하며, <code class=\"language-plaintext highlighter-rouge\">cost_scaling_factor</code>는 셀의 cost를 계산하는데 사용하는 factor이며, 높은 값을 선정하면 장애물에 가까울수록 가파르게 cost가 증가하게 된다.</p>\n\n<h3 id=\"43-costmap-resolution\">4.3 costmap resolution</h3>\n<p><code class=\"language-plaintext highlighter-rouge\">resolution</code> 파라미터는 맵핑한 지도의 resolution 수준과 동일하게 설정하면 된다. 만약 resolution이 낮게 설정이 된다면 좁은 공간에서 장애물의 크기가 크게 설정되어 지나갈 수 없다고 판단할 수도 있다.</p>\n\n<h3 id=\"44-obstacle-layer-and-voxel-layer\">4.4 obstacle layer and voxel layer</h3>\n<p>두 개의 layer는 장애물에 대한 코스트를 나타내기 위해 사용된다. 둘의 차이 점은 각각 2d와 3d로 표현된다는 점이다. \n–&gt; voxel layer에 대한 내용은 추후 추가</p>\n\n<h2 id=\"5-adaptive-monte-carlo-localizationamcl\">5. Adaptive Monte Carlo Localization(AMCL)</h2>\n<p>AMCL은 ROS에서 로봇의 localization을 위해 제공되는 패키지이다.</p>\n\n<p>laser scanner model로 부터 받은 센서 데이터와 계산된 odom 데이터를 이용한 localization을 위해서는 적절한 파라미터들의 수정이 필요하다. 그러나 파라미터의 선정이 잘못된다면, 로봇의 위치가 부정확하거나, 발산하는 경우가 발생하니 주의해야 한다.</p>\n","dir":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/","name":"0009NavigationTunning.md","path":"0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0009NavigationTunning.md","url":"/0001ROS/0001ROS1/0003Advanced/0001Navigation/02NavigationStackSetup/0009NavigationTunning.html"},{"sort":9,"layout":"default","title":"Interface Package","content":"<h1 id=\"interface-package\">Interface Package</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- ROS 2로 시작하는 로봇 프로그래밍(표윤석, 임태훈)</em></p>\n\n<h2 id=\"1-ros-2-인터페이스\">1. ROS 2 인터페이스</h2>\n<p>ROS 노드 간에 데이터를 주고받기 위해 사용되는 토픽, 서비스, 액션의 데이터 형태를 ROS 2 인터페이스라고 한다. ROS 인터페이스에는 IDL(Interface Definition Language)와 msg, srv, action이 있다. 토픽, 서비스, 액션은 각각 msg, srv, action 인터페이스를 사용한다.</p>\n\n<p>각 인터페이스 파일(<code class=\"language-plaintext highlighter-rouge\">.msg</code>, <code class=\"language-plaintext highlighter-rouge\">.srv</code>, <code class=\"language-plaintext highlighter-rouge\">.action</code>)을 정의할 때 다음과 같이 정의한다.</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>fieldtype1 fieldname1\nfieldtype2 fieldname2\nfieldtype3 fieldname3\n</code></pre>  </div></div>\n\n<p>fieldtype은 다음과 같은 단순 자료형을 사용한다.</p>\n\n<table>\n <thead>\n <tr>\n <th>Type name</th>\n <th>C++</th>\n <th>Python</th>\n <th>DDS type</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>bool</td>\n <td>bool</td>\n <td>builtins.bool</td>\n <td>boolean</td>\n </tr>\n <tr>\n <td>byte</td>\n <td>uint8_t</td>\n <td>builtins.bytes</td>\n <td>octet</td>\n </tr>\n <tr>\n <td>char</td>\n <td>char</td>\n <td>builtins.str</td>\n <td>char</td>\n </tr>\n <tr>\n <td>float32</td>\n <td>float</td>\n <td>builtins.float</td>\n <td>float</td>\n </tr>\n <tr>\n <td>float64</td>\n <td>double</td>\n <td>builtins.float</td>\n <td>double</td>\n </tr>\n <tr>\n <td>int8</td>\n <td>int8_t</td>\n <td>builtins.int</td>\n <td>octet</td>\n </tr>\n <tr>\n <td>uint8</td>\n <td>uint8_t</td>\n <td>builtins.int</td>\n <td>octet</td>\n </tr>\n <tr>\n <td>int16</td>\n <td>int16_t</td>\n <td>builtins.int</td>\n <td>short</td>\n </tr>\n <tr>\n <td>uint16</td>\n <td>uint16_t</td>\n <td>builtins.int</td>\n <td>unsigned short</td>\n </tr>\n <tr>\n <td>int32</td>\n <td>int32_t</td>\n <td>builtins.int</td>\n <td>long</td>\n </tr>\n <tr>\n <td>uint32</td>\n <td>uint32_t</td>\n <td>builtins.int</td>\n <td>unsigned long</td>\n </tr>\n <tr>\n <td>int64</td>\n <td>int64_t</td>\n <td>builtins.int</td>\n <td>long long</td>\n </tr>\n <tr>\n <td>uint64</td>\n <td>uint64_t</td>\n <td>builtins.int</td>\n <td>unsigned long long</td>\n </tr>\n <tr>\n <td>string</td>\n <td>std::string</td>\n <td>builtins.str</td>\n <td>string</td>\n </tr>\n <tr>\n <td>wstring</td>\n <td>std::u16string</td>\n <td>builtins.str</td>\n <td>wstring</td>\n </tr>\n </tbody>\n</table>\n\n<h2 id=\"2-인터페이스-파일의-형태\">2. 인터페이스 파일의 형태</h2>\n<h3 id=\"21-msg\">2.1 msg</h3>\n<p>메시지 파일은 토픽에서 사용될 메시지를 정의한 것으로 메시지에 담아 보낼 자료의 형태와 이름을 정의한다.</p>\n\n<p>다음은 <code class=\"language-plaintext highlighter-rouge\">geometry_msgs/msgs/Twist</code>의 메시지 구조이다.</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Vector3 linear\nVector3 angular\n</code></pre>  </div></div>\n<p>여기서 Vector3 자료형은 <code class=\"language-plaintext highlighter-rouge\">geometry_msgs/msgs/Vecotr3</code>에 정의되어있으며, 그 내용은 다음과 같다.</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>float64 x\nfloat64 y\nfloat64 z\n</code></pre>  </div></div>\n\n<h3 id=\"22-srv\">2.2 srv</h3>\n<p>서비스 파일은 서비스에 사용될 자료 형태를 정의한 것으로 <code class=\"language-plaintext highlighter-rouge\">---</code> 구분자를 이용하여 request와 response를 구분하는데 사용된다.</p>\n\n<p>예를들어 다음과 같은 srv 파일이 정의되어 있다면, request로 name을 요청하고, response로 id를 회신하는 서비스가 될 것이다.</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>string name\n---\nstring id\n</code></pre>  </div></div>\n\n<h3 id=\"23-action\">2.3 action</h3>\n<p>액션 파일은 액션에 사용될 자료 형태를 정의한 것으로 <code class=\"language-plaintext highlighter-rouge\">---</code> 구분자를 이용하여 goal, result, feedback을 구분하는데 사용된다.</p>\n\n<p>에를들어 다음과 같은 action 파일이 정의되어 있다면, goal로 x,y 좌표를 보내고, result로 성공 여부를 보내며, feedback으로 현재의 위치를 보내는 액션이 될 것이다.</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>float64 x\nfloat64 y\n---\nbool success\n---\nfloat64 cur_x\nfloat64 cur_y\n</code></pre>  </div></div>\n\n<h2 id=\"3-인터페이스-패키지\">3. 인터페이스 패키지</h2>\n<p>인터페이스 패키지는 사용자가 사용하고자 하는 인터페이스 형태를 사용하기 위하여 작성하는 패키지이다. 일반적으로 인터페이스로만 구성되어 있는 독립된 패키지를 만들어 사용하는데, 이는 의존성면에서 관리하기 용이하기 때문에 인터페이스 패키지를 만들어 관리를 한다.</p>\n\n<h3 id=\"31-인터페이스-패키지-만들기\">3.1 인터페이스 패키지 만들기</h3>\n<p>인터페이스 패키지에는 각 인터페이스를 정의한 폴더로 구성이 되어있으며, 해당 인터페이스 폴더 아래에 해당하는 인터페이스 파일들이 저장되어있다.</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>interface_package\n├── action\n│   └── interface_action.action\n├── msg\n│   └── interface_msg.msg\n├── srv\n│   └── interface_srv.srv\n├── package.xml\n└── CMakeLists.txt\n</code></pre>  </div></div>\n\n<h3 id=\"32-packagexml\">3.2 Package.xml</h3>\n<p>패키지 설정 파일에는 빌드 시에 DDS에서 사용되는 IDL 생성과 관련한 <code class=\"language-plaintext highlighter-rouge\">rosidl_default_generators</code>가 사용되고, 실행 시 <code class=\"language-plaintext highlighter-rouge\">builtin_interfaces</code>와 <code class=\"language-plaintext highlighter-rouge\">rosidl_default_runtime</code>이 사용되므로, 해당 내용을 추가해야 한다.</p>\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"nt\">&lt;buildtool_depend&gt;</span>rosidl_default_generators<span class=\"nt\">&lt;/buildtool_depend&gt;</span>\n  <span class=\"nt\">&lt;exec_depend&gt;</span>builtin_interfaces<span class=\"nt\">&lt;/exec_depend&gt;</span>\n  <span class=\"nt\">&lt;exec_depend&gt;</span>rosidl_default_runtime<span class=\"nt\">&lt;/exec_depend&gt;</span>\n</code></pre>  </div></div>\n\n<h3 id=\"33-cmakeliststxt\">3.3 CMakeLists.txt</h3>\n<p>빌드 설정파일에는 <code class=\"language-plaintext highlighter-rouge\">find_package()</code>로 <code class=\"language-plaintext highlighter-rouge\">builtin_interfaces</code>와 <code class=\"language-plaintext highlighter-rouge\">rosidl_default_generators</code>를 가져온다. 또한, <code class=\"language-plaintext highlighter-rouge\">set</code> 명령어로 <code class=\"language-plaintext highlighter-rouge\">msg</code>, <code class=\"language-plaintext highlighter-rouge\">srv</code>, <code class=\"language-plaintext highlighter-rouge\">action</code> 파일을 지정하고, <code class=\"language-plaintext highlighter-rouge\">rosidl_generate_interfaces</code>에 해당 <code class=\"language-plaintext highlighter-rouge\">set</code>을 입력한다.</p>\n\n<div class=\"language-cmake highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">find_package</span><span class=\"p\">(</span>builtin_interfaces REQUIRED<span class=\"p\">)</span>\n<span class=\"nb\">find_package</span><span class=\"p\">(</span>rosidl_default_generators REQUIRED<span class=\"p\">)</span>\n\n...\n\n<span class=\"nb\">set</span><span class=\"p\">(</span>msg\n  <span class=\"s2\">\"msg/interface_msg.msg\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">set</span><span class=\"p\">(</span>srv\n  <span class=\"s2\">\"srv/interface_srv.srv\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">set</span><span class=\"p\">(</span>action\n  <span class=\"s2\">\"action/interface_action.action\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"nf\">rosidl_generate_interfaces</span><span class=\"p\">(</span><span class=\"si\">${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"si\">}</span>\n  <span class=\"si\">${</span><span class=\"nv\">msg</span><span class=\"si\">}</span>\n  <span class=\"si\">${</span><span class=\"nv\">srv</span><span class=\"si\">}</span>\n  <span class=\"si\">${</span><span class=\"nv\">action</span><span class=\"si\">}</span>\n  DEPENDENCIES builtin_interfaces\n<span class=\"p\">)</span>\n</code></pre>  </div></div>\n","dir":"/0001ROS/0002ROS2/0001Basic/","name":"0009InterfacePackage.md","path":"0001ROS/0002ROS2/0001Basic/0009InterfacePackage.md","url":"/0001ROS/0002ROS2/0001Basic/0009InterfacePackage.html"},{"sort":9,"layout":"default","title":"Class 정의","content":"<h1 id=\"class-정의\">Class 정의</h1>\n\n<ul>\n <li>참고문헌 : 전문가를 위한 C++(마크 그레고리 / 한빛미디어)</li>\n</ul>\n\n<h2 id=\"1-class\">1. class</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">class</code>는 객체의 특성을 정의한 것이다. <code class=\"language-plaintext highlighter-rouge\">C++</code>에서 클래스를 선언하는 코드는 주로 헤더 파일에 작성하고, 구체적으로 구현하는 코드는 소스 파일에 작성한다.</p>\n\n<p>클래스 안에는 데이터 멤버와 메서드(동작)를 선언한다. 각각의 데이터 멤버와 메서드마다 <code class=\"language-plaintext highlighter-rouge\">public</code>, <code class=\"language-plaintext highlighter-rouge\">protected</code>, <code class=\"language-plaintext highlighter-rouge\">private</code> 등으로 접근 수준을 지정한다.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">public</code>은 클래스 밖에서 접근이 가능하다. 반면, <code class=\"language-plaintext highlighter-rouge\">private</code>는 클래스 외부에서 접근할 수 없다. 따라서 값을 가져오는 <code class=\"language-plaintext highlighter-rouge\">getter</code>와 값을 설정하는 <code class=\"language-plaintext highlighter-rouge\">setter</code>를 정의하고 이를 <code class=\"language-plaintext highlighter-rouge\">public</code>으로 지정한다. 따라서 일반적으로 데이터 멤버는 <code class=\"language-plaintext highlighter-rouge\">private</code>로 지정하고, 메서드는 <code class=\"language-plaintext highlighter-rouge\">public</code>에 선언한다.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">protected</code>는 상속과 관련해서 사용한다….</p>\n\n<h2 id=\"2-생성자와-소멸자\">2. 생성자와 소멸자</h2>\n\n<p>생성자(<code class=\"language-plaintext highlighter-rouge\">constructor</code>)는 클래스와 이름이 같고, 리턴 타입이 없는 메서드이다. 이 메서드는 해당 클래스 객체를 생성할 때 자동으로 호출된다.</p>\n\n<p>소멸자(<code class=\"language-plaintext highlighter-rouge\">destructor</code>)는 생성자와 형태는 같지만 앞에 <code class=\"language-plaintext highlighter-rouge\">~</code>를 붙인 메서드이다. 이 메서드는 해당 클래스 객체가 제거될 때 자동으로 호출된다.</p>\n\n<h3 id=\"21-데이터-멤버-초기화-방법\">2.1. 데이터 멤버 초기화 방법</h3>\n\n<p>생성자로 데이터 멤버를 초기화 하는 방법은 두 가지다.</p>\n\n<p>첫 번째 방법은 생성자 이니셜라이저를 사용하는 것으로, 권장되는 방법이다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">AirlineTicket</span><span class=\"o\">::</span><span class=\"n\">AirlineTicket</span><span class=\"p\">()</span>\n  <span class=\"o\">:</span> <span class=\"n\">mPassengerName</span><span class=\"p\">(</span><span class=\"s\">\"Unknown Passenger\"</span><span class=\"p\">)</span>\n  <span class=\"p\">,</span> <span class=\"n\">mNumberOfMiles</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">,</span> <span class=\"n\">mHasEliteSuperRewardsStatus</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<p>두 번째 방법은 생성자의 본문에서 초기화하는 방법이다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">AirlineTicket</span><span class=\"o\">::</span><span class=\"n\">AirlineTicket</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">mPassengerName</span> <span class=\"o\">=</span> <span class=\"s\">\"Unknown Passenger\"</span><span class=\"p\">;</span>\n  <span class=\"n\">mNumberOfMiles</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"n\">mHasEliteSuperRewardsStatus</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h2 id=\"3-스택--힙-기반의-클래스-생성\">3. 스택 / 힙 기반의 클래스 생성</h2>\n\n<p>클래스를 생성하는 예로 스택 기반으로 생성하는 방법과, 힙 기반으로 생성하는 방법이 있다.</p>\n\n<p>다음은 AirlineTicket 객체를 스택 기반으로 생성하는 예시이다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">AirlineTicket</span> <span class=\"n\">myyTicket</span><span class=\"p\">;</span>\n<span class=\"n\">myTicket</span><span class=\"p\">.</span><span class=\"n\">setPassengerName</span><span class=\"p\">(</span><span class=\"s\">\"Sherman T. Socketwrench\"</span><span class=\"p\">);</span>\n<span class=\"n\">myTicket</span><span class=\"p\">.</span><span class=\"n\">setNumberOfMiles</span><span class=\"p\">(</span><span class=\"mi\">700</span><span class=\"p\">);</span>\n<span class=\"p\">...</span>\n</code></pre>  </div></div>\n\n<p>다음은 AirlineTicket 객체를 힙 기반으로 생성하는 예시이다.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 스마트 포인터 기반</span>\n<span class=\"k\">auto</span> <span class=\"n\">myTicket</span> <span class=\"o\">=</span> <span class=\"n\">make_unique</span><span class=\"o\">&lt;</span><span class=\"n\">AirlineTicket</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n<span class=\"n\">myTicket</span><span class=\"o\">-&gt;</span><span class=\"n\">setPassengerName</span><span class=\"p\">(</span><span class=\"s\">\"Sherman T. Socketwrench\"</span><span class=\"p\">);</span>\n<span class=\"n\">myTicket</span><span class=\"o\">-&gt;</span><span class=\"n\">setNumberOfMiles</span><span class=\"p\">(</span><span class=\"mi\">700</span><span class=\"p\">);</span>\n<span class=\"p\">...</span>\n\n<span class=\"c1\">// 스마트 포인터를 사용하지 않는 경우</span>\n<span class=\"n\">AirlineTicket</span><span class=\"o\">*</span> <span class=\"n\">myTicket</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nf\">AirlineTicket</span><span class=\"p\">();</span>\n<span class=\"p\">...</span>\n<span class=\"k\">delete</span> <span class=\"n\">myTicket</span><span class=\"p\">;</span> <span class=\"c1\">// 이 경우에는 delete 키워드로 힙 객체를 삭제</span>\n</code></pre>  </div></div>\n","dir":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/","name":"0009Class_definition.md","path":"0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0009Class_definition.md","url":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0009Class_definition.html"},{"sort":9,"layout":"default","title":"Linter &amp; Action","content":"<h1 id=\"linter--action\">Linter &amp; Action</h1>\n\n<p>github 기초 개념</p>\n","dir":"/0004Tools/0001DevelopmentTool/0001Git/","name":"0009Linter.md","path":"0004Tools/0001DevelopmentTool/0001Git/0009Linter.md","url":"/0004Tools/0001DevelopmentTool/0001Git/0009Linter.html"},{"sort":9,"layout":"default","title":"Process","content":"<h1 id=\"process\">Process</h1>\n","dir":"/0004Tools/0001DevelopmentTool/0002Linux/","name":"0009Process.md","path":"0004Tools/0001DevelopmentTool/0002Linux/0009Process.md","url":"/0004Tools/0001DevelopmentTool/0002Linux/0009Process.html"},{"sort":10,"layout":"default","title":"Action","content":"<h1 id=\"action\">Action</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- ROS 로봇 프로그래밍(표윤석, 조한철, 정려운, 임태훈)</em></p>\n","dir":"/0001ROS/0001ROS1/0001Basic/","name":"0010Action.md","path":"0001ROS/0001ROS1/0001Basic/0010Action.md","url":"/0001ROS/0001ROS1/0001Basic/0010Action.html"},{"sort":10,"layout":"default","title":"Topic","content":"<h1 id=\"topic\">Topic</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- ROS 2로 시작하는 로봇 프로그래밍(표윤석, 임태훈)</em></p>\n\n<p><em>- <a href=\"https://docs.ros.org/en/foxy/Tutorials/Writing-A-Simple-Cpp-Publisher-And-Subscriber.html\">Writing a simple publisher and subscriber (C++)</a></em></p>\n\n<p><em>- <a href=\"https://docs.ros.org/en/foxy/Tutorials/Writing-A-Simple-Py-Publisher-And-Subscriber.html\">Writing a simple publisher and subscriber (Python)</a></em></p>\n\n<h2 id=\"1-topic\">1. Topic</h2>\n<p><a href=\"https://docs.ros.org/en/foxy/Tutorials/Topics/Understanding-ROS2-Topics.html\">토픽</a>은 비동기식 단방향 메시지 송수신 방식으로 Publisher와 Subscriber 간의 통신으로 이루어진다. Topic은 1:1, 1:N, N:1, N:N 통신 모두 가능하다.</p>\n\n<h2 id=\"2-c\">2. C++</h2>\n\n<h3 id=\"21-publisher\">2.1 Publisher</h3>\n<p>다음은 topic publisher의 간단한 <a href=\"https://docs.ros.org/en/foxy/Tutorials/Writing-A-Simple-Cpp-Publisher-And-Subscriber.html#write-the-publisher-node\">예제</a>이다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;chrono&gt;\n#include &lt;functional&gt;\n#include &lt;memory&gt;\n#include &lt;string&gt;\n</span>\n<span class=\"cp\">#include \"rclcpp/rclcpp.hpp\"\n#include \"std_msgs/msg/string.hpp\"\n</span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono_literals</span><span class=\"p\">;</span>\n\n<span class=\"cm\">/* This example creates a subclass of Node and uses std::bind() to register a\n* member function as a callback from the timer. */</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MinimalPublisher</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">Node</span>\n<span class=\"p\">{</span>\n  <span class=\"nl\">public:</span>\n    <span class=\"n\">MinimalPublisher</span><span class=\"p\">()</span>\n    <span class=\"o\">:</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"minimal_publisher\"</span><span class=\"p\">),</span> <span class=\"n\">count_</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"n\">publisher_</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">create_publisher</span><span class=\"o\">&lt;</span><span class=\"n\">std_msgs</span><span class=\"o\">::</span><span class=\"n\">msg</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">\"topic\"</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">);</span>\n      <span class=\"n\">timer_</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">create_wall_timer</span><span class=\"p\">(</span>\n      <span class=\"mx\">500ms</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">MinimalPublisher</span><span class=\"o\">::</span><span class=\"n\">timer_callback</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">));</span>\n    <span class=\"p\">}</span>\n\n  <span class=\"nl\">private:</span>\n    <span class=\"kt\">void</span> <span class=\"n\">timer_callback</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n      <span class=\"k\">auto</span> <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">std_msgs</span><span class=\"o\">::</span><span class=\"n\">msg</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"p\">();</span>\n      <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"s\">\"Hello, world! \"</span> <span class=\"o\">+</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">to_string</span><span class=\"p\">(</span><span class=\"n\">count_</span><span class=\"o\">++</span><span class=\"p\">);</span>\n      <span class=\"n\">RCLCPP_INFO</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">get_logger</span><span class=\"p\">(),</span> <span class=\"s\">\"Publishing: '%s'\"</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n      <span class=\"n\">publisher_</span><span class=\"o\">-&gt;</span><span class=\"n\">publish</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">TimerBase</span><span class=\"o\">::</span><span class=\"n\">SharedPtr</span> <span class=\"n\">timer_</span><span class=\"p\">;</span>\n    <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">Publisher</span><span class=\"o\">&lt;</span><span class=\"n\">std_msgs</span><span class=\"o\">::</span><span class=\"n\">msg</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"o\">&gt;::</span><span class=\"n\">SharedPtr</span> <span class=\"n\">publisher_</span><span class=\"p\">;</span>\n    <span class=\"kt\">size_t</span> <span class=\"n\">count_</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span> <span class=\"n\">argv</span><span class=\"p\">[])</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">);</span>\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">spin</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"o\">&lt;</span><span class=\"n\">MinimalPublisher</span><span class=\"o\">&gt;</span><span class=\"p\">());</span>\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">shutdown</span><span class=\"p\">();</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>먼저 C++ publisher 노드에서 사용할 헤더를 선언한다. 특히 <code class=\"language-plaintext highlighter-rouge\">rclcpp/rclcpp.hpp</code>는 ROS2에서 C++을 사용하기 위한 기본적인 기능을 포함하고 있으며, <code class=\"language-plaintext highlighter-rouge\">std_msgs/msg/string.hpp</code>는 string으로 publish하기 위한 메시지 타입을 선언한 것이다.</li>\n</ul>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;chrono&gt;\n#include &lt;functional&gt;\n#include &lt;memory&gt;\n#include &lt;string&gt;\n</span>\n<span class=\"cp\">#include \"rclcpp/rclcpp.hpp\"\n#include \"std_msgs/msg/string.hpp\"\n</span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono_literals</span><span class=\"p\">;</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>다음으로 <code class=\"language-plaintext highlighter-rouge\">MinimalPublisher</code>라는 노드 클래스를 생성하며, <code class=\"language-plaintext highlighter-rouge\">rclcpp::Node</code>를 상속받는다.</li>\n</ul>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">MinimalPublisher</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">Node</span>\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">MinimalPublisher</code>의 생성자로, 노드를 초기화하고, <code class=\"language-plaintext highlighter-rouge\">std_msgs::msg::String</code> 타입의 <code class=\"language-plaintext highlighter-rouge\">topic</code>의 이름을 갖는 publisher를 생성한다. 또한 주기적으로 토픽을 publish하기 위해 <code class=\"language-plaintext highlighter-rouge\">create_wall_timer()</code>를 이용하여 <code class=\"language-plaintext highlighter-rouge\">timer_</code>를 초기화하고, 500ms마다 <code class=\"language-plaintext highlighter-rouge\">timer_callback</code> 함수를 호출한다.</li>\n</ul>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nl\">public:</span>\n  <span class=\"n\">MinimalPublisher</span><span class=\"p\">()</span>\n  <span class=\"o\">:</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"minimal_publisher\"</span><span class=\"p\">),</span> <span class=\"n\">count_</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">publisher_</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">create_publisher</span><span class=\"o\">&lt;</span><span class=\"n\">std_msgs</span><span class=\"o\">::</span><span class=\"n\">msg</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">\"topic\"</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">);</span>\n    <span class=\"n\">timer_</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">create_wall_timer</span><span class=\"p\">(</span>\n    <span class=\"mx\">500ms</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">MinimalPublisher</span><span class=\"o\">::</span><span class=\"n\">timer_callback</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">timer_callback()</code>함수를 정의한다. <code class=\"language-plaintext highlighter-rouge\">std_msgs::msg::String()</code> 타입의 message 변수를 선언하여. 데이터를 입력하고 publisher를 이용하여 message를 publish한다.</li>\n</ul>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nl\">private:</span>\n  <span class=\"kt\">void</span> <span class=\"nf\">timer_callback</span><span class=\"p\">()</span>\n  <span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">std_msgs</span><span class=\"o\">::</span><span class=\"n\">msg</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"p\">();</span>\n    <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"s\">\"Hello, world! \"</span> <span class=\"o\">+</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">to_string</span><span class=\"p\">(</span><span class=\"n\">count_</span><span class=\"o\">++</span><span class=\"p\">);</span>\n    <span class=\"n\">RCLCPP_INFO</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">get_logger</span><span class=\"p\">(),</span> <span class=\"s\">\"Publishing: '%s'\"</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n    <span class=\"n\">publisher_</span><span class=\"o\">-&gt;</span><span class=\"n\">publish</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">timer_</code>와 <code class=\"language-plaintext highlighter-rouge\">publisher_</code>, <code class=\"language-plaintext highlighter-rouge\">count_</code> 변수를 선언한다.</li>\n</ul>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">TimerBase</span><span class=\"o\">::</span><span class=\"n\">SharedPtr</span> <span class=\"n\">timer_</span><span class=\"p\">;</span>\n<span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">Publisher</span><span class=\"o\">&lt;</span><span class=\"n\">std_msgs</span><span class=\"o\">::</span><span class=\"n\">msg</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"o\">&gt;::</span><span class=\"n\">SharedPtr</span> <span class=\"n\">publisher_</span><span class=\"p\">;</span>\n<span class=\"kt\">size_t</span> <span class=\"n\">count_</span><span class=\"p\">;</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>마지막으로 <code class=\"language-plaintext highlighter-rouge\">main()</code>함수에서 <code class=\"language-plaintext highlighter-rouge\">MinimalPublisher</code> 객체를 가져와 실행한다.</li>\n</ul>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span> <span class=\"n\">argv</span><span class=\"p\">[])</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">);</span>\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">spin</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"o\">&lt;</span><span class=\"n\">MinimalPublisher</span><span class=\"o\">&gt;</span><span class=\"p\">());</span>\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">shutdown</span><span class=\"p\">();</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h3 id=\"22-subscriber\">2.2 Subscriber</h3>\n<p>다음은 topic subscriber의 간단한 <a href=\"https://docs.ros.org/en/foxy/Tutorials/Writing-A-Simple-Cpp-Publisher-And-Subscriber.html#write-the-subscriber-node\">예제</a>이다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;memory&gt;\n</span>\n<span class=\"cp\">#include \"rclcpp/rclcpp.hpp\"\n#include \"std_msgs/msg/string.hpp\"\n</span><span class=\"k\">using</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">placeholders</span><span class=\"o\">::</span><span class=\"n\">_1</span><span class=\"p\">;</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MinimalSubscriber</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">Node</span>\n<span class=\"p\">{</span>\n  <span class=\"nl\">public:</span>\n    <span class=\"n\">MinimalSubscriber</span><span class=\"p\">()</span>\n    <span class=\"o\">:</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"minimal_subscriber\"</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"n\">subscription_</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">create_subscription</span><span class=\"o\">&lt;</span><span class=\"n\">std_msgs</span><span class=\"o\">::</span><span class=\"n\">msg</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n      <span class=\"s\">\"topic\"</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">MinimalSubscriber</span><span class=\"o\">::</span><span class=\"n\">topic_callback</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"n\">_1</span><span class=\"p\">));</span>\n    <span class=\"p\">}</span>\n\n  <span class=\"nl\">private:</span>\n    <span class=\"kt\">void</span> <span class=\"n\">topic_callback</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">std_msgs</span><span class=\"o\">::</span><span class=\"n\">msg</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"o\">::</span><span class=\"n\">SharedPtr</span> <span class=\"n\">msg</span><span class=\"p\">)</span> <span class=\"k\">const</span>\n    <span class=\"p\">{</span>\n      <span class=\"n\">RCLCPP_INFO</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">get_logger</span><span class=\"p\">(),</span> <span class=\"s\">\"I heard: '%s'\"</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">Subscription</span><span class=\"o\">&lt;</span><span class=\"n\">std_msgs</span><span class=\"o\">::</span><span class=\"n\">msg</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"o\">&gt;::</span><span class=\"n\">SharedPtr</span> <span class=\"n\">subscription_</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span> <span class=\"n\">argv</span><span class=\"p\">[])</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">);</span>\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">spin</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"o\">&lt;</span><span class=\"n\">MinimalSubscriber</span><span class=\"o\">&gt;</span><span class=\"p\">());</span>\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">shutdown</span><span class=\"p\">();</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>publisher 노드와 동일하게 subscriber 노드에서 사용할 헤더를 선언한다. 특히 <code class=\"language-plaintext highlighter-rouge\">rclcpp/rclcpp.hpp</code>는 ROS2에서 C++을 사용하기 위한 기본적인 기능을 포함하고 있으며, <code class=\"language-plaintext highlighter-rouge\">std_msgs/msg/string.hpp</code>는 string으로 publish하기 위한 메시지 타입을 선언한 것이다.</li>\n</ul>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;memory&gt;\n</span>\n<span class=\"cp\">#include \"rclcpp/rclcpp.hpp\"\n#include \"std_msgs/msg/string.hpp\"\n</span><span class=\"k\">using</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">placeholders</span><span class=\"o\">::</span><span class=\"n\">_1</span><span class=\"p\">;</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>다음으로 <code class=\"language-plaintext highlighter-rouge\">MinimalPublisher</code>라는 노드 클래스를 생성하며, <code class=\"language-plaintext highlighter-rouge\">rclcpp::Node</code>를 상속받는다.</li>\n</ul>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">MinimalSubscriber</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">Node</span>\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">MinimalSubscriber</code>의 생성자로, 노드를 초기화하고, <code class=\"language-plaintext highlighter-rouge\">std_msgs::msg::String</code> 타입의 <code class=\"language-plaintext highlighter-rouge\">topic</code>이라는 이름을 갖는 subscriber를 생성한다. 해당 <code class=\"language-plaintext highlighter-rouge\">topic</code>으로 메시지를 subscirbe하면, <code class=\"language-plaintext highlighter-rouge\">topic_callback</code>함수를 호출한다.</li>\n</ul>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nl\">public:</span>\n  <span class=\"n\">MinimalSubscriber</span><span class=\"p\">()</span>\n  <span class=\"o\">:</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"minimal_subscriber\"</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">subscription_</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">create_subscription</span><span class=\"o\">&lt;</span><span class=\"n\">std_msgs</span><span class=\"o\">::</span><span class=\"n\">msg</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n    <span class=\"s\">\"topic\"</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">MinimalSubscriber</span><span class=\"o\">::</span><span class=\"n\">topic_callback</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"n\">_1</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">topic_callback()</code> 함수는 해당 토픽으로 받은 message를 RCLCPP_INFO로 로그를 남긴다.</li>\n</ul>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nl\">private:</span>\n  <span class=\"kt\">void</span> <span class=\"nf\">topic_callback</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">std_msgs</span><span class=\"o\">::</span><span class=\"n\">msg</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"o\">::</span><span class=\"n\">SharedPtr</span> <span class=\"n\">msg</span><span class=\"p\">)</span> <span class=\"k\">const</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">RCLCPP_INFO</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">get_logger</span><span class=\"p\">(),</span> <span class=\"s\">\"I heard: '%s'\"</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n  <span class=\"err\">}</span>\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">Subscription</span><span class=\"o\">&lt;</span><span class=\"n\">std_msgs</span><span class=\"o\">::</span><span class=\"n\">msg</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"o\">&gt;::</span><span class=\"n\">SharedPtr</span> <span class=\"n\">subscription_</span><span class=\"p\">;</span>\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">main()</code> 함수에서 <code class=\"language-plaintext highlighter-rouge\">MinimalSubscriber</code> 객체를 불러와 subscriber 노드를 실행시킨다.</li>\n</ul>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span> <span class=\"n\">argv</span><span class=\"p\">[])</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">);</span>\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">spin</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"o\">&lt;</span><span class=\"n\">MinimalSubscriber</span><span class=\"o\">&gt;</span><span class=\"p\">());</span>\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">shutdown</span><span class=\"p\">();</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h2 id=\"3-python\">3. Python</h2>\n\n<h3 id=\"31-publisher\">3.1 Publisher</h3>\n<p>다음은 topic publisher의 간단한 <a href=\"https://docs.ros.org/en/foxy/Tutorials/Writing-A-Simple-Py-Publisher-And-Subscriber.html#write-the-publisher-node\">예제</a>이다.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">rclpy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rclpy.node</span> <span class=\"kn\">import</span> <span class=\"n\">Node</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">std_msgs.msg</span> <span class=\"kn\">import</span> <span class=\"n\">String</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MinimalPublisher</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">().</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"s\">'minimal_publisher'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">publisher_</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">create_publisher</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"s\">'topic'</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n        <span class=\"n\">timer_period</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span>  <span class=\"c1\"># seconds\n</span>        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">timer</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">create_timer</span><span class=\"p\">(</span><span class=\"n\">timer_period</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">timer_callback</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">timer_callback</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"p\">()</span>\n        <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"s\">'Hello World: %d'</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">i</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">publisher_</span><span class=\"p\">.</span><span class=\"n\">publish</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get_logger</span><span class=\"p\">().</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s\">'Publishing: \"%s\"'</span> <span class=\"o\">%</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">rclpy</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n    <span class=\"n\">minimal_publisher</span> <span class=\"o\">=</span> <span class=\"n\">MinimalPublisher</span><span class=\"p\">()</span>\n\n    <span class=\"n\">rclpy</span><span class=\"p\">.</span><span class=\"n\">spin</span><span class=\"p\">(</span><span class=\"n\">minimal_publisher</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Destroy the node explicitly\n</span>    <span class=\"c1\"># (optional - otherwise it will be done automatically\n</span>    <span class=\"c1\"># when the garbage collector destroys the node object)\n</span>    <span class=\"n\">minimal_publisher</span><span class=\"p\">.</span><span class=\"n\">destroy_node</span><span class=\"p\">()</span>\n    <span class=\"n\">rclpy</span><span class=\"p\">.</span><span class=\"n\">shutdown</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>먼저 ros2 python 노드에 사용되는 <code class=\"language-plaintext highlighter-rouge\">rclpy</code>와 <code class=\"language-plaintext highlighter-rouge\">rclpy.node</code>의 <code class=\"language-plaintext highlighter-rouge\">Node</code>를 import한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">rclpy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rclpy.node</span> <span class=\"kn\">import</span> <span class=\"n\">Node</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>topic의 메시지 타입으로 사용할 <code class=\"language-plaintext highlighter-rouge\">String</code>을 import 한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">std_msgs.msg</span> <span class=\"kn\">import</span> <span class=\"n\">String</span>\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">Node</code>를 상속받는 <code class=\"language-plaintext highlighter-rouge\">MinimalPublisher</code> 클래스를 생성한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">MinimalPublisher</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"p\">):</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>생성자에서 node를 초기화하고, <code class=\"language-plaintext highlighter-rouge\">topic</code>이라는 이름을 갖는 publisher를 <code class=\"language-plaintext highlighter-rouge\">create_publisher</code> 함수를 이용하여 생성한다. 또한 0.5초마다 주기적으로 publish하도록 <code class=\"language-plaintext highlighter-rouge\">timer</code>를 정의하고, 해당 <code class=\"language-plaintext highlighter-rouge\">timer</code>마다 <code class=\"language-plaintext highlighter-rouge\">timer_callback()</code>함수를 호출한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"nb\">super</span><span class=\"p\">().</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"s\">'minimal_publisher'</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">publisher_</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">create_publisher</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"s\">'topic'</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"n\">timer_period</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span>  <span class=\"c1\"># seconds\n</span>    <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">timer</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">create_timer</span><span class=\"p\">(</span><span class=\"n\">timer_period</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">timer_callback</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">timer_callback()</code> 함수는 <code class=\"language-plaintext highlighter-rouge\">String</code> 타입의 message를 만들어 publish한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">timer_callback</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"p\">()</span>\n    <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"s\">'Hello World: %d'</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">i</span>\n    <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">publisher_</span><span class=\"p\">.</span><span class=\"n\">publish</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get_logger</span><span class=\"p\">().</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s\">'Publishing: \"%s\"'</span> <span class=\"o\">%</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>마지막으로 <code class=\"language-plaintext highlighter-rouge\">main()</code>함수에서 MinimalPublisher 객체를 생성함으로써, publisher 노드를 시작한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">rclpy</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n    <span class=\"n\">minimal_publisher</span> <span class=\"o\">=</span> <span class=\"n\">MinimalPublisher</span><span class=\"p\">()</span>\n\n    <span class=\"n\">rclpy</span><span class=\"p\">.</span><span class=\"n\">spin</span><span class=\"p\">(</span><span class=\"n\">minimal_publisher</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Destroy the node explicitly\n</span>    <span class=\"c1\"># (optional - otherwise it will be done automatically\n</span>    <span class=\"c1\"># when the garbage collector destroys the node object)\n</span>    <span class=\"n\">minimal_publisher</span><span class=\"p\">.</span><span class=\"n\">destroy_node</span><span class=\"p\">()</span>\n    <span class=\"n\">rclpy</span><span class=\"p\">.</span><span class=\"n\">shutdown</span><span class=\"p\">()</span>\n</code></pre>  </div></div>\n\n<h3 id=\"32-subscriber\">3.2 Subscriber</h3>\n<p>다음은 topic subscriber의 간단한 <a href=\"https://docs.ros.org/en/foxy/Tutorials/Writing-A-Simple-Py-Publisher-And-Subscriber.html#write-the-subscriber-node\">예제</a>이다.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">rclpy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rclpy.node</span> <span class=\"kn\">import</span> <span class=\"n\">Node</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">std_msgs.msg</span> <span class=\"kn\">import</span> <span class=\"n\">String</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MinimalSubscriber</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">().</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"s\">'minimal_subscriber'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">subscription</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">create_subscription</span><span class=\"p\">(</span>\n            <span class=\"n\">String</span><span class=\"p\">,</span>\n            <span class=\"s\">'topic'</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">listener_callback</span><span class=\"p\">,</span>\n            <span class=\"mi\">10</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">subscription</span>  <span class=\"c1\"># prevent unused variable warning\n</span>\n    <span class=\"k\">def</span> <span class=\"nf\">listener_callback</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get_logger</span><span class=\"p\">().</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s\">'I heard: \"%s\"'</span> <span class=\"o\">%</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">rclpy</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n    <span class=\"n\">minimal_subscriber</span> <span class=\"o\">=</span> <span class=\"n\">MinimalSubscriber</span><span class=\"p\">()</span>\n\n    <span class=\"n\">rclpy</span><span class=\"p\">.</span><span class=\"n\">spin</span><span class=\"p\">(</span><span class=\"n\">minimal_subscriber</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Destroy the node explicitly\n</span>    <span class=\"c1\"># (optional - otherwise it will be done automatically\n</span>    <span class=\"c1\"># when the garbage collector destroys the node object)\n</span>    <span class=\"n\">minimal_subscriber</span><span class=\"p\">.</span><span class=\"n\">destroy_node</span><span class=\"p\">()</span>\n    <span class=\"n\">rclpy</span><span class=\"p\">.</span><span class=\"n\">shutdown</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>publisher와 동일하게 ros2 python 노드에 필요한 클래스를 import하고, subscribe할 메시지 타입인 <code class=\"language-plaintext highlighter-rouge\">String</code>을 import한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">rclpy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rclpy.node</span> <span class=\"kn\">import</span> <span class=\"n\">Node</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">std_msgs.msg</span> <span class=\"kn\">import</span> <span class=\"n\">String</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>Subscribe 노드인 <code class=\"language-plaintext highlighter-rouge\">MinimalSubscriber</code> 클래스를 생성한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">MinimalSubscriber</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"p\">):</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>생성자에서 노드를 초기화하고, <code class=\"language-plaintext highlighter-rouge\">create_subscription()</code>을 이용하여 <code class=\"language-plaintext highlighter-rouge\">topic</code>이라는 이름을 갖는 subscriber 객체를 생성한다. 해당 subscriber 객체는 토픽을 subscribe하면 <code class=\"language-plaintext highlighter-rouge\">listener_callback</code> 함수를 호출한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"nb\">super</span><span class=\"p\">().</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"s\">'minimal_subscriber'</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">subscription</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">create_subscription</span><span class=\"p\">(</span>\n        <span class=\"n\">String</span><span class=\"p\">,</span>\n        <span class=\"s\">'topic'</span><span class=\"p\">,</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">listener_callback</span><span class=\"p\">,</span>\n        <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">subscription</span>  <span class=\"c1\"># prevent unused variable warning\n</span></code></pre>  </div></div>\n\n<ul>\n <li>subscribe시 호출되는 <code class=\"language-plaintext highlighter-rouge\">listener_callback()</code>함수를 정의하며, 호출 시 subscribe한 메시지의 로그를 남긴다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">listener_callback</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get_logger</span><span class=\"p\">().</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s\">'I heard: \"%s\"'</span> <span class=\"o\">%</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>마지막으로 <code class=\"language-plaintext highlighter-rouge\">main()</code>함수에서 <code class=\"language-plaintext highlighter-rouge\">MinimalSubscriber</code> 객체를 생성함으로써, subscribe 노드를 실행시킨다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">rclpy</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n    <span class=\"n\">minimal_subscriber</span> <span class=\"o\">=</span> <span class=\"n\">MinimalSubscriber</span><span class=\"p\">()</span>\n\n    <span class=\"n\">rclpy</span><span class=\"p\">.</span><span class=\"n\">spin</span><span class=\"p\">(</span><span class=\"n\">minimal_subscriber</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Destroy the node explicitly\n</span>    <span class=\"c1\"># (optional - otherwise it will be done automatically\n</span>    <span class=\"c1\"># when the garbage collector destroys the node object)\n</span>    <span class=\"n\">minimal_subscriber</span><span class=\"p\">.</span><span class=\"n\">destroy_node</span><span class=\"p\">()</span>\n    <span class=\"n\">rclpy</span><span class=\"p\">.</span><span class=\"n\">shutdown</span><span class=\"p\">()</span>\n</code></pre>  </div></div>\n","dir":"/0001ROS/0002ROS2/0001Basic/","name":"0010Topic.md","path":"0001ROS/0002ROS2/0001Basic/0010Topic.md","url":"/0001ROS/0002ROS2/0001Basic/0010Topic.html"},{"sort":10,"layout":"default","title":"유니폼 이니셜라이저","content":"<h1 id=\"유니폼-이니셜라이저\">유니폼 이니셜라이저</h1>\n\n<ul>\n <li>참고문헌 : 전문가를 위한 C++(마크 그레고리 / 한빛미디어)</li>\n</ul>\n\n<p><code class=\"language-plaintext highlighter-rouge\">C++11</code> 이전에는 구조체나 클래스 등의 타입별로 초기화 방식이 일정하지 않았다. 구조체의 경우 <code class=\"language-plaintext highlighter-rouge\">{...}</code> 문법을 적용한 반면, 클래스의 경우 <code class=\"language-plaintext highlighter-rouge\">(...)</code> 문멉을 이용하여 생성자를 호출하였다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">ExampleStruct</span> <span class=\"n\">myExample1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">};</span> <span class=\"c1\">// 구조체의 초기화</span>\n<span class=\"n\">ExampleClass</span> <span class=\"nf\">myExample2</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">);</span> <span class=\"c1\">// 클래스의 초기화</span>\n</code></pre>  </div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">C++11</code> 부터 타입을 초기화 할 때 <code class=\"language-plaintext highlighter-rouge\">{...}</code> 문법을 사용하는 유니폼 초기화를 따르도록 통일됐다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">ExampleStruct</span> <span class=\"n\">myExample1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">};</span> <span class=\"c1\">// 구조체의 초기화</span>\n<span class=\"n\">ExampleClass</span> <span class=\"n\">myExample2</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">};</span> <span class=\"c1\">// 클래스의 초기화</span>\n</code></pre>  </div></div>\n\n<p>또한 등호를 생략해도 된다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">ExampleStruct</span> <span class=\"n\">myExample1</span><span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">};</span> <span class=\"c1\">// 구조체의 초기화</span>\n<span class=\"n\">ExampleClass</span> <span class=\"n\">myExample2</span><span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">};</span> <span class=\"c1\">// 클래스의 초기화</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>유니폼 이니셜라이저는 구조체나 클래스 뿐만 아니라 C++에 있는 모든 대상을 초기화 하는데 사용된다. 다음의 예시는 네 변수를 모두 3으로 초기화된다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"nf\">b</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n<span class=\"kt\">int</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">};</span>\n<span class=\"kt\">int</span> <span class=\"n\">d</span><span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">};</span>\n</code></pre>  </div> </div>\n </li>\n <li>유니폼 초기화는 제로 초기화에도 적용할 수 있다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"n\">e</span><span class=\"p\">{};</span>\n</code></pre>  </div> </div>\n </li>\n <li>유니폼 초기화는 동작으로 할당되는 배열을 초기화할 때도 적용할 수 있다.\n <div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span><span class=\"o\">*</span> <span class=\"n\">pArray</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">};</span>\n</code></pre>  </div> </div>\n </li>\n</ul>\n","dir":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/","name":"0010Uniform-initialization.md","path":"0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0010Uniform-initialization.md","url":"/0003Software/0001Languages/0001C++/0001Professional_C++/Part1/Chapter1/0010Uniform-initialization.html"},{"sort":10,"layout":"default","title":"Submodule","content":"<h1 id=\"submodule\">Submodule</h1>\n\n<p>github 기초 개념</p>\n","dir":"/0004Tools/0001DevelopmentTool/0001Git/","name":"0010Submodule.md","path":"0004Tools/0001DevelopmentTool/0001Git/0010Submodule.md","url":"/0004Tools/0001DevelopmentTool/0001Git/0010Submodule.html"},{"sort":11,"layout":"default","title":"Parameter","content":"<h1 id=\"parameter\">Parameter</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- ROS 로봇 프로그래밍(표윤석, 조한철, 정려운, 임태훈)</em></p>\n","dir":"/0001ROS/0001ROS1/0001Basic/","name":"0011Parameter.md","path":"0001ROS/0001ROS1/0001Basic/0011Parameter.md","url":"/0001ROS/0001ROS1/0001Basic/0011Parameter.html"},{"sort":11,"layout":"default","title":"Service","content":"<h1 id=\"service\">Service</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- ROS 2로 시작하는 로봇 프로그래밍(표윤석, 임태훈)</em></p>\n\n<p><em>- <a href=\"https://docs.ros.org/en/foxy/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.html\">Writing a simple service and client (C++)</a></em></p>\n\n<p><em>- <a href=\"https://docs.ros.org/en/foxy/Tutorials/Writing-A-Simple-Py-Service-And-Client.html\">Writing a simple service and client (Python)</a></em></p>\n\n<h2 id=\"1-service\">1. Service</h2>\n<p><a href=\"https://docs.ros.org/en/foxy/Tutorials/Services/Understanding-ROS2-Services.html\">서비스</a>는 동기식 양방향 메시지 송수신 방식으로 서비스 요청(Request)하는 쪽을 Service Client, 요청받은 서비스를 수행한 후 서비스 응답(Response)하는 쪽을 Service Server라고 한다.</p>\n\n<h2 id=\"2-service-interface\">2. service interface</h2>\n<p>서비스 예제를 수행하기 위해 <code class=\"language-plaintext highlighter-rouge\">AddTwoInts.srv</code> 인터페이스 파일을 다음과 같이 정의한다.</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>int64 a\nint64 b\n---\nint64 sum\n</code></pre>  </div></div>\n\n<h2 id=\"3-c\">3. C++</h2>\n\n<h3 id=\"31-service-server\">3.1 Service Server</h3>\n<p>다음은 Service Server의 간단한 <a href=\"https://docs.ros.org/en/foxy/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.html#write-the-service-node\">예제</a>이다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include \"rclcpp/rclcpp.hpp\"\n#include \"example_interfaces/srv/add_two_ints.hpp\"\n</span>\n<span class=\"cp\">#include &lt;memory&gt;\n</span>\n<span class=\"kt\">void</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">example_interfaces</span><span class=\"o\">::</span><span class=\"n\">srv</span><span class=\"o\">::</span><span class=\"n\">AddTwoInts</span><span class=\"o\">::</span><span class=\"n\">Request</span><span class=\"o\">&gt;</span> <span class=\"n\">request</span><span class=\"p\">,</span>\n          <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">example_interfaces</span><span class=\"o\">::</span><span class=\"n\">srv</span><span class=\"o\">::</span><span class=\"n\">AddTwoInts</span><span class=\"o\">::</span><span class=\"n\">Response</span><span class=\"o\">&gt;</span>      <span class=\"n\">response</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">response</span><span class=\"o\">-&gt;</span><span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">-&gt;</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">request</span><span class=\"o\">-&gt;</span><span class=\"n\">b</span><span class=\"p\">;</span>\n  <span class=\"n\">RCLCPP_INFO</span><span class=\"p\">(</span><span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"s\">\"rclcpp\"</span><span class=\"p\">),</span> <span class=\"s\">\"Incoming request</span><span class=\"se\">\\n</span><span class=\"s\">a: %ld\"</span> <span class=\"s\">\" b: %ld\"</span><span class=\"p\">,</span>\n                <span class=\"n\">request</span><span class=\"o\">-&gt;</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">-&gt;</span><span class=\"n\">b</span><span class=\"p\">);</span>\n  <span class=\"n\">RCLCPP_INFO</span><span class=\"p\">(</span><span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"s\">\"rclcpp\"</span><span class=\"p\">),</span> <span class=\"s\">\"sending back response: [%ld]\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">long</span> <span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"n\">response</span><span class=\"o\">-&gt;</span><span class=\"n\">sum</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">);</span>\n\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">Node</span><span class=\"o\">&gt;</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">Node</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"p\">(</span><span class=\"s\">\"add_two_ints_server\"</span><span class=\"p\">);</span>\n\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">Service</span><span class=\"o\">&lt;</span><span class=\"n\">example_interfaces</span><span class=\"o\">::</span><span class=\"n\">srv</span><span class=\"o\">::</span><span class=\"n\">AddTwoInts</span><span class=\"o\">&gt;::</span><span class=\"n\">SharedPtr</span> <span class=\"n\">service</span> <span class=\"o\">=</span>\n    <span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">create_service</span><span class=\"o\">&lt;</span><span class=\"n\">example_interfaces</span><span class=\"o\">::</span><span class=\"n\">srv</span><span class=\"o\">::</span><span class=\"n\">AddTwoInts</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">\"add_two_ints\"</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">add</span><span class=\"p\">);</span>\n\n  <span class=\"n\">RCLCPP_INFO</span><span class=\"p\">(</span><span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"s\">\"rclcpp\"</span><span class=\"p\">),</span> <span class=\"s\">\"Ready to add two ints.\"</span><span class=\"p\">);</span>\n\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">spin</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">);</span>\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">shutdown</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>위에서 선언한 <code class=\"language-plaintext highlighter-rouge\">AddTwoInts.srv</code>의 서비스 형태를 가져오기 위해 <code class=\"language-plaintext highlighter-rouge\">../srv/add_two_ints.hpp</code>를 헤더로 가져온다.</li>\n</ul>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include \"rclcpp/rclcpp.hpp\"\n#include \"example_interfaces/srv/add_two_ints.hpp\"\n</span>\n<span class=\"cp\">#include &lt;memory&gt;\n</span></code></pre>  </div></div>\n\n<ul>\n <li>다음은 serivce client에서 service request가 왔을 때 request에 대한 response를 수행하는 콜백함수이다.</li>\n</ul>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">example_interfaces</span><span class=\"o\">::</span><span class=\"n\">srv</span><span class=\"o\">::</span><span class=\"n\">AddTwoInts</span><span class=\"o\">::</span><span class=\"n\">Request</span><span class=\"o\">&gt;</span> <span class=\"n\">request</span><span class=\"p\">,</span>\n          <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">example_interfaces</span><span class=\"o\">::</span><span class=\"n\">srv</span><span class=\"o\">::</span><span class=\"n\">AddTwoInts</span><span class=\"o\">::</span><span class=\"n\">Response</span><span class=\"o\">&gt;</span>      <span class=\"n\">response</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">response</span><span class=\"o\">-&gt;</span><span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">-&gt;</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">request</span><span class=\"o\">-&gt;</span><span class=\"n\">b</span><span class=\"p\">;</span>\n  <span class=\"n\">RCLCPP_INFO</span><span class=\"p\">(</span><span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"s\">\"rclcpp\"</span><span class=\"p\">),</span> <span class=\"s\">\"Incoming request</span><span class=\"se\">\\n</span><span class=\"s\">a: %ld\"</span> <span class=\"s\">\" b: %ld\"</span><span class=\"p\">,</span>\n                <span class=\"n\">request</span><span class=\"o\">-&gt;</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">-&gt;</span><span class=\"n\">b</span><span class=\"p\">);</span>\n  <span class=\"n\">RCLCPP_INFO</span><span class=\"p\">(</span><span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"s\">\"rclcpp\"</span><span class=\"p\">),</span> <span class=\"s\">\"sending back response: [%ld]\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">long</span> <span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"n\">response</span><span class=\"o\">-&gt;</span><span class=\"n\">sum</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>메인 함수에서는 노드를 초기화하고, service server 객체를 생성한다.</li>\n</ul>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">);</span>\n\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">Node</span><span class=\"o\">&gt;</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">Node</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"p\">(</span><span class=\"s\">\"add_two_ints_server\"</span><span class=\"p\">);</span>\n\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">Service</span><span class=\"o\">&lt;</span><span class=\"n\">example_interfaces</span><span class=\"o\">::</span><span class=\"n\">srv</span><span class=\"o\">::</span><span class=\"n\">AddTwoInts</span><span class=\"o\">&gt;::</span><span class=\"n\">SharedPtr</span> <span class=\"n\">service</span> <span class=\"o\">=</span>\n    <span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">create_service</span><span class=\"o\">&lt;</span><span class=\"n\">example_interfaces</span><span class=\"o\">::</span><span class=\"n\">srv</span><span class=\"o\">::</span><span class=\"n\">AddTwoInts</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">\"add_two_ints\"</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">add</span><span class=\"p\">);</span>\n\n  <span class=\"n\">RCLCPP_INFO</span><span class=\"p\">(</span><span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"s\">\"rclcpp\"</span><span class=\"p\">),</span> <span class=\"s\">\"Ready to add two ints.\"</span><span class=\"p\">);</span>\n\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">spin</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">);</span>\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">shutdown</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h3 id=\"32-service-client\">3.2 Service Client</h3>\n<p>다음은 Service Client의 간단한 <a href=\"https://docs.ros.org/en/foxy/Tutorials/Writing-A-Simple-Cpp-Service-And-Client.html#write-the-client-node\">예제</a>이다.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include \"rclcpp/rclcpp.hpp\"\n#include \"example_interfaces/srv/add_two_ints.hpp\"\n</span>\n<span class=\"cp\">#include &lt;chrono&gt;\n#include &lt;cstdlib&gt;\n#include &lt;memory&gt;\n</span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono_literals</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">);</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">argc</span> <span class=\"o\">!=</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">RCLCPP_INFO</span><span class=\"p\">(</span><span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"s\">\"rclcpp\"</span><span class=\"p\">),</span> <span class=\"s\">\"usage: add_two_ints_client X Y\"</span><span class=\"p\">);</span>\n      <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">Node</span><span class=\"o\">&gt;</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">Node</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"p\">(</span><span class=\"s\">\"add_two_ints_client\"</span><span class=\"p\">);</span>\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">Client</span><span class=\"o\">&lt;</span><span class=\"n\">example_interfaces</span><span class=\"o\">::</span><span class=\"n\">srv</span><span class=\"o\">::</span><span class=\"n\">AddTwoInts</span><span class=\"o\">&gt;::</span><span class=\"n\">SharedPtr</span> <span class=\"n\">client</span> <span class=\"o\">=</span>\n    <span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">create_client</span><span class=\"o\">&lt;</span><span class=\"n\">example_interfaces</span><span class=\"o\">::</span><span class=\"n\">srv</span><span class=\"o\">::</span><span class=\"n\">AddTwoInts</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">\"add_two_ints\"</span><span class=\"p\">);</span>\n\n  <span class=\"k\">auto</span> <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"o\">&lt;</span><span class=\"n\">example_interfaces</span><span class=\"o\">::</span><span class=\"n\">srv</span><span class=\"o\">::</span><span class=\"n\">AddTwoInts</span><span class=\"o\">::</span><span class=\"n\">Request</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n  <span class=\"n\">request</span><span class=\"o\">-&gt;</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">atoll</span><span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n  <span class=\"n\">request</span><span class=\"o\">-&gt;</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">atoll</span><span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]);</span>\n\n  <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">client</span><span class=\"o\">-&gt;</span><span class=\"n\">wait_for_service</span><span class=\"p\">(</span><span class=\"mx\">1s</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">ok</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n      <span class=\"n\">RCLCPP_ERROR</span><span class=\"p\">(</span><span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"s\">\"rclcpp\"</span><span class=\"p\">),</span> <span class=\"s\">\"Interrupted while waiting for the service. Exiting.\"</span><span class=\"p\">);</span>\n      <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">RCLCPP_INFO</span><span class=\"p\">(</span><span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"s\">\"rclcpp\"</span><span class=\"p\">),</span> <span class=\"s\">\"service not available, waiting again...\"</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">auto</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">-&gt;</span><span class=\"n\">async_send_request</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">);</span>\n  <span class=\"c1\">// Wait for the result.</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">spin_until_future_complete</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"o\">==</span>\n    <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">FutureReturnCode</span><span class=\"o\">::</span><span class=\"n\">SUCCESS</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">RCLCPP_INFO</span><span class=\"p\">(</span><span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"s\">\"rclcpp\"</span><span class=\"p\">),</span> <span class=\"s\">\"Sum: %ld\"</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">sum</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"n\">RCLCPP_ERROR</span><span class=\"p\">(</span><span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"s\">\"rclcpp\"</span><span class=\"p\">),</span> <span class=\"s\">\"Failed to call service add_two_ints\"</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">shutdown</span><span class=\"p\">();</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>service server와 동일하게 <code class=\"language-plaintext highlighter-rouge\">AddTwoInts.srv</code>의 서비스 형태를 가져오기 위해 <code class=\"language-plaintext highlighter-rouge\">../srv/add_two_ints.hpp</code>를 헤더로 가져온다.</li>\n</ul>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include \"rclcpp/rclcpp.hpp\"\n#include \"example_interfaces/srv/add_two_ints.hpp\"\n</span>\n<span class=\"cp\">#include &lt;chrono&gt;\n#include &lt;cstdlib&gt;\n#include &lt;memory&gt;\n</span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono_literals</span><span class=\"p\">;</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>메인 함수에서는 노드를 초기화하고, service client 객체를 초기화한다. 그리고, request 변수를 만들고, 노드 실행 시 받아온 argument를 이용하여 초기화한다.</li>\n</ul>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">);</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">argc</span> <span class=\"o\">!=</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">RCLCPP_INFO</span><span class=\"p\">(</span><span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"s\">\"rclcpp\"</span><span class=\"p\">),</span> <span class=\"s\">\"usage: add_two_ints_client X Y\"</span><span class=\"p\">);</span>\n      <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">Node</span><span class=\"o\">&gt;</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">Node</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"p\">(</span><span class=\"s\">\"add_two_ints_client\"</span><span class=\"p\">);</span>\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">Client</span><span class=\"o\">&lt;</span><span class=\"n\">example_interfaces</span><span class=\"o\">::</span><span class=\"n\">srv</span><span class=\"o\">::</span><span class=\"n\">AddTwoInts</span><span class=\"o\">&gt;::</span><span class=\"n\">SharedPtr</span> <span class=\"n\">client</span> <span class=\"o\">=</span>\n    <span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">create_client</span><span class=\"o\">&lt;</span><span class=\"n\">example_interfaces</span><span class=\"o\">::</span><span class=\"n\">srv</span><span class=\"o\">::</span><span class=\"n\">AddTwoInts</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">\"add_two_ints\"</span><span class=\"p\">);</span>\n\n  <span class=\"k\">auto</span> <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"o\">&lt;</span><span class=\"n\">example_interfaces</span><span class=\"o\">::</span><span class=\"n\">srv</span><span class=\"o\">::</span><span class=\"n\">AddTwoInts</span><span class=\"o\">::</span><span class=\"n\">Request</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n  <span class=\"n\">request</span><span class=\"o\">-&gt;</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">atoll</span><span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n  <span class=\"n\">request</span><span class=\"o\">-&gt;</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">atoll</span><span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]);</span>\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">wait_for_service()</code> 함수를 통해 service server가 있는지 체크한다.</li>\n</ul>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">client</span><span class=\"o\">-&gt;</span><span class=\"n\">wait_for_service</span><span class=\"p\">(</span><span class=\"mx\">1s</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">ok</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n      <span class=\"n\">RCLCPP_ERROR</span><span class=\"p\">(</span><span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"s\">\"rclcpp\"</span><span class=\"p\">),</span> <span class=\"s\">\"Interrupted while waiting for the service. Exiting.\"</span><span class=\"p\">);</span>\n      <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">RCLCPP_INFO</span><span class=\"p\">(</span><span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"s\">\"rclcpp\"</span><span class=\"p\">),</span> <span class=\"s\">\"service not available, waiting again...\"</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<ul>\n <li><code class=\"language-plaintext highlighter-rouge\">async_send_request()</code>함수를 이용하여 client에서 request를 요청하고, 리턴값으로 result 값을 받는다.</li>\n</ul>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"k\">auto</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">-&gt;</span><span class=\"n\">async_send_request</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">);</span>\n  <span class=\"c1\">// Wait for the result.</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">spin_until_future_complete</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"o\">==</span>\n    <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">FutureReturnCode</span><span class=\"o\">::</span><span class=\"n\">SUCCESS</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">RCLCPP_INFO</span><span class=\"p\">(</span><span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"s\">\"rclcpp\"</span><span class=\"p\">),</span> <span class=\"s\">\"Sum: %ld\"</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">sum</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"n\">RCLCPP_ERROR</span><span class=\"p\">(</span><span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"s\">\"rclcpp\"</span><span class=\"p\">),</span> <span class=\"s\">\"Failed to call service add_two_ints\"</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">rclcpp</span><span class=\"o\">::</span><span class=\"n\">shutdown</span><span class=\"p\">();</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"err\">}</span>\n</code></pre>  </div></div>\n\n<h2 id=\"4-python\">4. Python</h2>\n\n<h3 id=\"41-service-server\">4.1 Service Server</h3>\n<p>다음은 Service Server의 간단한 <a href=\"https://docs.ros.org/en/foxy/Tutorials/Writing-A-Simple-Py-Service-And-Client.html#write-the-service-node\">예제</a>이다.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">example_interfaces.srv</span> <span class=\"kn\">import</span> <span class=\"n\">AddTwoInts</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">rclpy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rclpy.node</span> <span class=\"kn\">import</span> <span class=\"n\">Node</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MinimalService</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">().</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"s\">'minimal_service'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">srv</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">create_service</span><span class=\"p\">(</span><span class=\"n\">AddTwoInts</span><span class=\"p\">,</span> <span class=\"s\">'add_two_ints'</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">add_two_ints_callback</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add_two_ints_callback</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nb\">sum</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">b</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get_logger</span><span class=\"p\">().</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s\">'Incoming request</span><span class=\"se\">\\n</span><span class=\"s\">a: %d b: %d'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">b</span><span class=\"p\">))</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">rclpy</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n    <span class=\"n\">minimal_service</span> <span class=\"o\">=</span> <span class=\"n\">MinimalService</span><span class=\"p\">()</span>\n\n    <span class=\"n\">rclpy</span><span class=\"p\">.</span><span class=\"n\">spin</span><span class=\"p\">(</span><span class=\"n\">minimal_service</span><span class=\"p\">)</span>\n\n    <span class=\"n\">rclpy</span><span class=\"p\">.</span><span class=\"n\">shutdown</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>위에서 선언한 <code class=\"language-plaintext highlighter-rouge\">AddTwoInts.srv</code>의 서비스 형태를 가져오기 위해 <code class=\"language-plaintext highlighter-rouge\">AddTwoInts</code>를 import 한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">example_interfaces.srv</span> <span class=\"kn\">import</span> <span class=\"n\">AddTwoInts</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">rclpy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rclpy.node</span> <span class=\"kn\">import</span> <span class=\"n\">Node</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>Service Server를 위한 클래스로, service server 객체를 생성하고, service client의 request 시 콜백되는 <code class=\"language-plaintext highlighter-rouge\">add_two_ints_callback()</code>함수를 정의한다. <code class=\"language-plaintext highlighter-rouge\">add_two_ints_callback()</code>함수는 request로 요청된 변수를 이용하여 response에 결과값을 답아 리턴한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">MinimalService</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">().</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"s\">'minimal_service'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">srv</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">create_service</span><span class=\"p\">(</span><span class=\"n\">AddTwoInts</span><span class=\"p\">,</span> <span class=\"s\">'add_two_ints'</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">add_two_ints_callback</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add_two_ints_callback</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nb\">sum</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">b</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get_logger</span><span class=\"p\">().</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s\">'Incoming request</span><span class=\"se\">\\n</span><span class=\"s\">a: %d b: %d'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">b</span><span class=\"p\">))</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">response</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>메인함수에서는 위에서 선언한 클래스를 선언한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">rclpy</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n    <span class=\"n\">minimal_service</span> <span class=\"o\">=</span> <span class=\"n\">MinimalService</span><span class=\"p\">()</span>\n\n    <span class=\"n\">rclpy</span><span class=\"p\">.</span><span class=\"n\">spin</span><span class=\"p\">(</span><span class=\"n\">minimal_service</span><span class=\"p\">)</span>\n\n    <span class=\"n\">rclpy</span><span class=\"p\">.</span><span class=\"n\">shutdown</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</code></pre>  </div></div>\n\n<h3 id=\"42-service-client\">4.2 Service Client</h3>\n<p>다음은 Service Client의 간단한 <a href=\"https://docs.ros.org/en/foxy/Tutorials/Writing-A-Simple-Py-Service-And-Client.html#write-the-client-node\">예제</a>이다.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">example_interfaces.srv</span> <span class=\"kn\">import</span> <span class=\"n\">AddTwoInts</span>\n<span class=\"kn\">import</span> <span class=\"nn\">rclpy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rclpy.node</span> <span class=\"kn\">import</span> <span class=\"n\">Node</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MinimalClientAsync</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">().</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"s\">'minimal_client_async'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cli</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">create_client</span><span class=\"p\">(</span><span class=\"n\">AddTwoInts</span><span class=\"p\">,</span> <span class=\"s\">'add_two_ints'</span><span class=\"p\">)</span>\n        <span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cli</span><span class=\"p\">.</span><span class=\"n\">wait_for_service</span><span class=\"p\">(</span><span class=\"n\">timeout_sec</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get_logger</span><span class=\"p\">().</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s\">'service not available, waiting again...'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">req</span> <span class=\"o\">=</span> <span class=\"n\">AddTwoInts</span><span class=\"p\">.</span><span class=\"n\">Request</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">send_request</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">req</span><span class=\"p\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">req</span><span class=\"p\">.</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cli</span><span class=\"p\">.</span><span class=\"n\">call_async</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">req</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">rclpy</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n    <span class=\"n\">minimal_client</span> <span class=\"o\">=</span> <span class=\"n\">MinimalClientAsync</span><span class=\"p\">()</span>\n    <span class=\"n\">minimal_client</span><span class=\"p\">.</span><span class=\"n\">send_request</span><span class=\"p\">()</span>\n\n    <span class=\"k\">while</span> <span class=\"n\">rclpy</span><span class=\"p\">.</span><span class=\"n\">ok</span><span class=\"p\">():</span>\n        <span class=\"n\">rclpy</span><span class=\"p\">.</span><span class=\"n\">spin_once</span><span class=\"p\">(</span><span class=\"n\">minimal_client</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">minimal_client</span><span class=\"p\">.</span><span class=\"n\">future</span><span class=\"p\">.</span><span class=\"n\">done</span><span class=\"p\">():</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">minimal_client</span><span class=\"p\">.</span><span class=\"n\">future</span><span class=\"p\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n            <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                <span class=\"n\">minimal_client</span><span class=\"p\">.</span><span class=\"n\">get_logger</span><span class=\"p\">().</span><span class=\"n\">info</span><span class=\"p\">(</span>\n                    <span class=\"s\">'Service call failed %r'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,))</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">minimal_client</span><span class=\"p\">.</span><span class=\"n\">get_logger</span><span class=\"p\">().</span><span class=\"n\">info</span><span class=\"p\">(</span>\n                    <span class=\"s\">'Result of add_two_ints: for %d + %d = %d'</span> <span class=\"o\">%</span>\n                    <span class=\"p\">(</span><span class=\"n\">minimal_client</span><span class=\"p\">.</span><span class=\"n\">req</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">minimal_client</span><span class=\"p\">.</span><span class=\"n\">req</span><span class=\"p\">.</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nb\">sum</span><span class=\"p\">))</span>\n            <span class=\"k\">break</span>\n\n    <span class=\"n\">minimal_client</span><span class=\"p\">.</span><span class=\"n\">destroy_node</span><span class=\"p\">()</span>\n    <span class=\"n\">rclpy</span><span class=\"p\">.</span><span class=\"n\">shutdown</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>service server와 동일하게 <code class=\"language-plaintext highlighter-rouge\">AddTwoInts.srv</code>의 서비스 형태를 가져오기 위해 <code class=\"language-plaintext highlighter-rouge\">AddTowInts</code>를 import 한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">example_interfaces.srv</span> <span class=\"kn\">import</span> <span class=\"n\">AddTwoInts</span>\n<span class=\"kn\">import</span> <span class=\"nn\">rclpy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rclpy.node</span> <span class=\"kn\">import</span> <span class=\"n\">Node</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>Service Client 클래스를 선언한다. 해당 클래스는 service client 객체를 생성하고, <code class=\"language-plaintext highlighter-rouge\">wait_for_service()</code>함수를 통해 service server 노드가 있는지 확인하고, request 메시지를 담을 변수를 생성한다. 또한 <code class=\"language-plaintext highlighter-rouge\">send_request()</code>함수를 선언하여, request를 처리하며, <code class=\"language-plaintext highlighter-rouge\">call_async()</code>함수를 이용하여 request를 service server에 요청한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">MinimalClientAsync</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">().</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"s\">'minimal_client_async'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cli</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">create_client</span><span class=\"p\">(</span><span class=\"n\">AddTwoInts</span><span class=\"p\">,</span> <span class=\"s\">'add_two_ints'</span><span class=\"p\">)</span>\n        <span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cli</span><span class=\"p\">.</span><span class=\"n\">wait_for_service</span><span class=\"p\">(</span><span class=\"n\">timeout_sec</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get_logger</span><span class=\"p\">().</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s\">'service not available, waiting again...'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">req</span> <span class=\"o\">=</span> <span class=\"n\">AddTwoInts</span><span class=\"p\">.</span><span class=\"n\">Request</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">send_request</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">req</span><span class=\"p\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">req</span><span class=\"p\">.</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cli</span><span class=\"p\">.</span><span class=\"n\">call_async</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">req</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>메인 함수에서는 위에서 선언한 Service Client 클래스를 선언하고, request를 요청한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">rclpy</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n    <span class=\"n\">minimal_client</span> <span class=\"o\">=</span> <span class=\"n\">MinimalClientAsync</span><span class=\"p\">()</span>\n    <span class=\"n\">minimal_client</span><span class=\"p\">.</span><span class=\"n\">send_request</span><span class=\"p\">()</span>\n\n</code></pre>  </div></div>\n\n<ul>\n <li>request에 대한 server의 result 결과를 확인한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"k\">while</span> <span class=\"n\">rclpy</span><span class=\"p\">.</span><span class=\"n\">ok</span><span class=\"p\">():</span>\n        <span class=\"n\">rclpy</span><span class=\"p\">.</span><span class=\"n\">spin_once</span><span class=\"p\">(</span><span class=\"n\">minimal_client</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">minimal_client</span><span class=\"p\">.</span><span class=\"n\">future</span><span class=\"p\">.</span><span class=\"n\">done</span><span class=\"p\">():</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">minimal_client</span><span class=\"p\">.</span><span class=\"n\">future</span><span class=\"p\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n            <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                <span class=\"n\">minimal_client</span><span class=\"p\">.</span><span class=\"n\">get_logger</span><span class=\"p\">().</span><span class=\"n\">info</span><span class=\"p\">(</span>\n                    <span class=\"s\">'Service call failed %r'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,))</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">minimal_client</span><span class=\"p\">.</span><span class=\"n\">get_logger</span><span class=\"p\">().</span><span class=\"n\">info</span><span class=\"p\">(</span>\n                    <span class=\"s\">'Result of add_two_ints: for %d + %d = %d'</span> <span class=\"o\">%</span>\n                    <span class=\"p\">(</span><span class=\"n\">minimal_client</span><span class=\"p\">.</span><span class=\"n\">req</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">minimal_client</span><span class=\"p\">.</span><span class=\"n\">req</span><span class=\"p\">.</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nb\">sum</span><span class=\"p\">))</span>\n            <span class=\"k\">break</span>\n</code></pre>  </div></div>\n","dir":"/0001ROS/0002ROS2/0001Basic/","name":"0011Service.md","path":"0001ROS/0002ROS2/0001Basic/0011Service.md","url":"/0001ROS/0002ROS2/0001Basic/0011Service.html"},{"sort":12,"layout":"default","title":"Action","content":"<h1 id=\"action\">Action</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- ROS 2로 시작하는 로봇 프로그래밍(표윤석, 임태훈)</em></p>\n","dir":"/0001ROS/0002ROS2/0001Basic/","name":"0012Action.md","path":"0001ROS/0002ROS2/0001Basic/0012Action.md","url":"/0001ROS/0002ROS2/0001Basic/0012Action.html"},{"sort":13,"layout":"default","title":"Parameter","content":"<h1 id=\"parameter\">Parameter</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- ROS 2로 시작하는 로봇 프로그래밍(표윤석, 임태훈)</em></p>\n","dir":"/0001ROS/0002ROS2/0001Basic/","name":"0013Parameter.md","path":"0001ROS/0002ROS2/0001Basic/0013Parameter.md","url":"/0001ROS/0002ROS2/0001Basic/0013Parameter.html"},{"sort":14,"layout":"default","title":"Log","content":"<h1 id=\"log\">Log</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- ROS 2로 시작하는 로봇 프로그래밍(표윤석, 임태훈)</em></p>\n","dir":"/0001ROS/0002ROS2/0001Basic/","name":"0014Log.md","path":"0001ROS/0002ROS2/0001Basic/0014Log.md","url":"/0001ROS/0002ROS2/0001Basic/0014Log.html"},{"sort":15,"layout":"default","title":"DDS","content":"<h1 id=\"dds\">DDS</h1>\n\n<h2 id=\"0-참고-문헌\">0. 참고 문헌</h2>\n<p><em>- ROS 2로 시작하는 로봇 프로그래밍(표윤석, 임태훈)</em></p>\n","dir":"/0001ROS/0002ROS2/0001Basic/","name":"0015DDS.md","path":"0001ROS/0002ROS2/0001Basic/0015DDS.md","url":"/0001ROS/0002ROS2/0001Basic/0015DDS.html"}]